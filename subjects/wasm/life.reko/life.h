// life.h
// Generated by decompiling life.wasm
// using Reko decompiler version 0.11.5.0.

/*
// Equivalence classes ////////////
Eq_1: (struct "Globals" (FFFFFFAB (arr Eq_57) aFFFFFFAB))
	globals_t (in globals : (ptr32 (struct "Globals")))
Eq_14: (union "Eq_14" (ui32 u0) ((ptr32 byte) u1))
	T_14 (in (1<32> - arg0_1) * 0x2710<32> + 0x10<32> @ 000C007A : word32)
	T_15 (in v16_15 @ 000C007A : Eq_14)
Eq_36: (union "Eq_36" (byte u0) (word32 u1))
	T_36 (in (word80000) ((Eq_55[]) 0xFFFFFFAD<32>)[arg0_1] + (((Eq_57[]) 0xFFFFFFAB<32>))[arg0_1].b0000 + (word32) ((Eq_59[]) 0x73<32>)[arg0_1] + (word32) ((Eq_61[]) 0x75<32>)[arg0_1] @ 000C0104 : word32)
	T_37 (in v16_91 @ 000C0104 : Eq_36)
	T_38 (in 3<32> @ 000C010A : word32)
	T_40 (in 2<32> @ 000C0111 : word32)
Eq_55: (struct "Eq_55" 2710 (2 byte b0002))
	T_55
Eq_57: (struct "Eq_57" 2710 (0 byte b0000) (2 byte b0002) (65 byte b0065) (C8 byte b00C8) (CA byte b00CA))
	T_57
Eq_59: (struct "Eq_59" 2710 (C8 byte b00C8))
	T_59
Eq_61: (struct "Eq_61" 2710 (CA byte b00CA))
	T_61
Eq_63: (struct "Eq_63" 2710 (65 byte b0065))
	T_63
// Type Variables ////////////
globals_t: (in globals : (ptr32 (struct "Globals")))
  Class: Eq_1
  DataType: (ptr32 Eq_1)
  OrigDataType: (ptr32 (struct "Globals"))
T_2: (in  : word32)
  Class: Eq_2
  DataType: word32
  OrigDataType: word32
T_3: (in arg0 : word32)
  Class: Eq_3
  DataType: word32
  OrigDataType: word32
T_4: (in arg1 : word32)
  Class: Eq_4
  DataType: word32
  OrigDataType: word32
T_5: (in arg2 : word32)
  Class: Eq_5
  DataType: word32
  OrigDataType: word32
T_6: (in <invalid> @ 000C005F : word32)
  Class: Eq_2
  DataType: word32
  OrigDataType: word32
T_7: (in arg0 @ 000C005F : ui32)
  Class: Eq_7
  DataType: ui32
  OrigDataType: word32
T_8: (in arg0_1 @ 000C0060 : ui32)
  Class: Eq_7
  DataType: ui32
  OrigDataType: ui32
T_9: (in 1<32> @ 000C007A : word32)
  Class: Eq_9
  DataType: ui32
  OrigDataType: ui32
T_10: (in 1<32> - arg0_1 @ 000C007A : word32)
  Class: Eq_10
  DataType: ui32
  OrigDataType: ui32
T_11: (in 0x2710<32> @ 000C007A : word32)
  Class: Eq_11
  DataType: ui32
  OrigDataType: ui32
T_12: (in (1<32> - arg0_1) * 0x2710<32> @ 000C007A : word32)
  Class: Eq_12
  DataType: ui32
  OrigDataType: ui32
T_13: (in 0x10<32> @ 000C007A : word32)
  Class: Eq_13
  DataType: word32
  OrigDataType: word32
T_14: (in (1<32> - arg0_1) * 0x2710<32> + 0x10<32> @ 000C007A : word32)
  Class: Eq_14
  DataType: Eq_14
  OrigDataType: ui32
T_15: (in v16_15 @ 000C007A : Eq_14)
  Class: Eq_14
  DataType: Eq_14
  OrigDataType: (union (ui32 u0) ((ptr32 byte) u1))
T_16: (in 0<32> @ 000C00AA : word32)
  Class: Eq_16
  DataType: word32
  OrigDataType: word32
T_17: (in loc13_105 @ 000C00AA : word32)
  Class: Eq_16
  DataType: word32
  OrigDataType: word32
T_18: (in 0<32> @ 000C00C4 : word32)
  Class: Eq_7
  DataType: ui32
  OrigDataType: word32
T_19: (in 0xFFFFFFAD<32> @ 000C0104 : word32)
  Class: Eq_19
  DataType: (ptr32 (arr Eq_55))
  OrigDataType: (ptr32 (struct (0 (arr T_55) a0000)))
T_20: (in 0x2710<32> @ 000C0104 : word32)
  Class: Eq_20
  DataType: ui32
  OrigDataType: ui32
T_21: (in arg0_1 * 0x2710<32> @ 000C0104 : word32)
  Class: Eq_21
  DataType: ui32
  OrigDataType: ui32
T_22: (in 0xFFFFFFAD<32>[arg0_1 * 0x2710<32>] @ 000C0104 : byte)
  Class: Eq_22
  DataType: byte
  OrigDataType: byte
T_23: (in 0xFFFFFFAB<32> @ 000C0104 : word32)
  Class: Eq_23
  DataType: (ptr32 (arr Eq_57))
  OrigDataType: (ptr32 (struct (0 (arr T_57) a0000)))
T_24: (in arg0_1 * 0x2710<32> @ 000C0104 : word32)
  Class: Eq_24
  DataType: ui32
  OrigDataType: ui32
T_25: (in 0xFFFFFFAB<32>[arg0_1 * 0x2710<32>] @ 000C0104 : byte)
  Class: Eq_25
  DataType: byte
  OrigDataType: byte
T_26: (in 0xFFFFFFAD<32>[arg0_1 * 0x2710<32>] + 0xFFFFFFAB<32>[arg0_1 * 0x2710<32>] @ 000C0104 : byte)
  Class: Eq_26
  DataType: byte
  OrigDataType: byte
T_27: (in 0x73<32> @ 000C0104 : word32)
  Class: Eq_27
  DataType: (ptr32 (arr Eq_59))
  OrigDataType: (ptr32 (struct (0 (arr T_59) a0000)))
T_28: (in arg0_1 * 0x2710<32> @ 000C0104 : word32)
  Class: Eq_28
  DataType: ui32
  OrigDataType: ui32
T_29: (in 0x73<32>[arg0_1 * 0x2710<32>] @ 000C0104 : byte)
  Class: Eq_29
  DataType: byte
  OrigDataType: byte
T_30: (in CONVERT(0x73<32>[arg0_1 * 0x2710<32>], byte, word32) @ 000C0104 : word32)
  Class: Eq_30
  DataType: word32
  OrigDataType: word32
T_31: (in (word80000) ((Eq_55[]) 0xFFFFFFAD<32>)[arg0_1] + (((Eq_57[]) 0xFFFFFFAB<32>))[arg0_1].b0000 + (word32) ((Eq_59[]) 0x73<32>)[arg0_1] @ 000C0104 : word32)
  Class: Eq_31
  DataType: byte
  OrigDataType: byte
T_32: (in 0x75<32> @ 000C0104 : word32)
  Class: Eq_32
  DataType: (ptr32 (arr Eq_61))
  OrigDataType: (ptr32 (struct (0 (arr T_61) a0000)))
T_33: (in arg0_1 * 0x2710<32> @ 000C0104 : word32)
  Class: Eq_33
  DataType: ui32
  OrigDataType: ui32
T_34: (in 0x75<32>[arg0_1 * 0x2710<32>] @ 000C0104 : byte)
  Class: Eq_34
  DataType: byte
  OrigDataType: byte
T_35: (in CONVERT(0x75<32>[arg0_1 * 0x2710<32>], byte, word32) @ 000C0104 : word32)
  Class: Eq_35
  DataType: word32
  OrigDataType: word32
T_36: (in (word80000) ((Eq_55[]) 0xFFFFFFAD<32>)[arg0_1] + (((Eq_57[]) 0xFFFFFFAB<32>))[arg0_1].b0000 + (word32) ((Eq_59[]) 0x73<32>)[arg0_1] + (word32) ((Eq_61[]) 0x75<32>)[arg0_1] @ 000C0104 : word32)
  Class: Eq_36
  DataType: Eq_36
  OrigDataType: byte
T_37: (in v16_91 @ 000C0104 : Eq_36)
  Class: Eq_36
  DataType: Eq_36
  OrigDataType: (union (byte u1) (word32 u0))
T_38: (in 3<32> @ 000C010A : word32)
  Class: Eq_36
  DataType: word32
  OrigDataType: word32
T_39: (in v16_91 == 3<32> @ 000C010A : bool)
  Class: Eq_39
  DataType: bool
  OrigDataType: bool
T_40: (in 2<32> @ 000C0111 : word32)
  Class: Eq_36
  DataType: word32
  OrigDataType: word32
T_41: (in v16_91 != 2<32> @ 000C0111 : bool)
  Class: Eq_41
  DataType: bool
  OrigDataType: bool
T_42: (in 0x10<32> @ 000C011B : word32)
  Class: Eq_42
  DataType: (ptr32 (arr Eq_63))
  OrigDataType: (ptr32 (struct (0 (arr T_63) a0000)))
T_43: (in arg0_1 * 0x2710<32> @ 000C011B : word32)
  Class: Eq_43
  DataType: ui32
  OrigDataType: ui32
T_44: (in 0x10<32>[arg0_1 * 0x2710<32>] @ 000C011B : byte)
  Class: Eq_44
  DataType: byte
  OrigDataType: byte
T_45: (in CONVERT(0x10<32>[arg0_1 * 0x2710<32>], byte, word32) @ 000C011B : word32)
  Class: Eq_16
  DataType: word32
  OrigDataType: word32
T_46: (in 1<32> @ 000C0122 : word32)
  Class: Eq_16
  DataType: word32
  OrigDataType: word32
T_47: (in SLICE(loc13_105, byte, 0) @ 000C012C : byte)
  Class: Eq_47
  DataType: byte
  OrigDataType: byte
T_48: (in 0<32> @ 000C012C : word32)
  Class: Eq_48
  DataType: word32
  OrigDataType: word32
T_49: (in v16_15 + 0<32> @ 000C012C : word32)
  Class: Eq_49
  DataType: ui32
  OrigDataType: ui32
T_50: (in Mem114[v16_15 + 0<32>:byte] @ 000C012C : byte)
  Class: Eq_47
  DataType: byte
  OrigDataType: byte
T_51: (in true @ 000C0135 : bool)
  Class: Eq_51
  DataType: bool
  OrigDataType: bool
T_52: (in 1<32> @ 000C014A : word32)
  Class: Eq_7
  DataType: ui32
  OrigDataType: word32
T_53: (in true @ 000C014F : bool)
  Class: Eq_53
  DataType: bool
  OrigDataType: bool
T_54: (in  @ 000C0152 : word32)
  Class: Eq_2
  DataType: word32
  OrigDataType: word32
T_55:
  Class: Eq_55
  DataType: Eq_55
  OrigDataType: (struct 2710 (0 T_22 t0000))
T_56:
  Class: Eq_56
  DataType: (arr Eq_55)
  OrigDataType: (arr T_55)
T_57:
  Class: Eq_57
  DataType: Eq_57
  OrigDataType: (struct 2710 (0 T_25 t0000))
T_58:
  Class: Eq_58
  DataType: (arr Eq_57)
  OrigDataType: (arr T_57)
T_59:
  Class: Eq_59
  DataType: Eq_59
  OrigDataType: (struct 2710 (0 T_29 t0000))
T_60:
  Class: Eq_60
  DataType: (arr Eq_59)
  OrigDataType: (arr T_59)
T_61:
  Class: Eq_61
  DataType: Eq_61
  OrigDataType: (struct 2710 (0 T_34 t0000))
T_62:
  Class: Eq_62
  DataType: (arr Eq_61)
  OrigDataType: (arr T_61)
T_63:
  Class: Eq_63
  DataType: Eq_63
  OrigDataType: (struct 2710 (0 T_44 t0000))
T_64:
  Class: Eq_64
  DataType: (arr Eq_63)
  OrigDataType: (arr T_63)
*/
typedef struct Globals {
	Eq_57 aFFFFFFAB[];	// FFFFFFAB
} Eq_1;

typedef union Eq_14 {
	ui32 u0;
	byte * u1;
} Eq_14;

typedef union Eq_36 {
	byte u0;
	word32 u1;
} Eq_36;

typedef struct Eq_55 {	// size: 10000 2710
	byte b0002;	// 2
} Eq_55;

typedef struct Eq_57 {	// size: 10000 2710
	byte b0000;	// 0
	byte b0002;	// 2
	byte b0065;	// 65
	byte b00C8;	// C8
	byte b00CA;	// CA
} Eq_57;

typedef struct Eq_59 {	// size: 10000 2710
	byte b00C8;	// C8
} Eq_59;

typedef struct Eq_61 {	// size: 10000 2710
	byte b00CA;	// CA
} Eq_61;

typedef struct Eq_63 {	// size: 10000 2710
	byte b0065;	// 65
} Eq_63;

