void _init()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
_init_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000402168:
	word64 rax_4 = Mem0[0x0000000000619FF8:word64]
	branch rax_4 == 0x0000000000000000 l000000000040217D
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000402178:
	word64 rsp_15
	byte SCZO_16
	word64 rax_17
	byte SZO_18
	bool C_19
	bool Z_20
	call __gmon_start__ (retsize: 8; depth: 16)
		uses: C_7,rax_4,rsp_2,SCZO,SZO_5,Z_6
		defs: C_19,rax_17,rsp_15,SCZO_16,SZO_18,Z_20
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>

l000000000040217D:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>

_init_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



void free()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
free_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

free_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void malloc()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
malloc_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

malloc_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004028C0(word64 rsi, word32 edi, word64 r9, word64 r10, word64 r11, word64 r13, word64 r14, word64 r15, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r10 r11 r13 r14 r15 r9 rsi
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004028C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004028C0_entry:
// DataOut: edi fs r10 r11 r13 r14 r15 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004028C0:
	fn000000000040D6A0(Mem0[rsi:word64])
	setlocale(0x0000000000000006, 0x0000000000416919)
	bindtextdomain(0x0000000000413800, 0x000000000041381C)
	textdomain(0x0000000000413800)
	Mem45[0x000000000061A580:word32] = 0x00000002
	fn0000000000411EE0(0x000000000040A200)
	Mem47[0x000000000061B030:word32] = 0x00000000
	Mem48[0x000000000061B0D0:byte] = 0x01
	Mem49[0x000000000061B180:word64] = 0x0000000000000000
	word32 eax_53 = (word32) (uint64) Mem49[0x000000000061A56C:word32]
	Mem56[0x000000000061B190:word64] = 0x0000000000000000
	Mem57[0x000000000061B188:word64] = 0xFFFFFFFFFFFFFFFF
	Mem58[0x000000000061B0F0:byte] = 0x00
	word64 rbx_1277 = (uint64) edi
	word64 rbp_143 = rsi
	word32 ebx_141 = (word32) rbx_1277
	word64 rsp_2050 = fp - 0x00000000000003B8
	branch eax_53 == 0x00000002 l0000000000403203
// DataOut: eax ebx fs r10 r11 r13 r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040297B:
	branch eax_53 == 0x00000003 l00000000004029AF
// DataOut: eax ebx fs r10 r11 r13 r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> eax:<invalid> sil:0x1C cl:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004029AF:
	Mem4113[0x000000000061B150:word32] = 0x00000000
	fn000000000040E640(0x00000005, 0x0000000000000000)
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> eax:<invalid> sil:0x1C cl:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402980:
	branch (word32) (uint64) (eax_53 - 0x00000001) == 0x00000000 l000000000040298A
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> eax:<invalid> sil:0x1C cl:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040298A:
	branch isatty(0x0000000000000001) == 0x00000000 l00000000004037EC
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> eax:<invalid> sil:0x1C cl:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004037EC:
	Mem4106[0x000000000061B150:word32] = 0x00000001
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:0x0000000000000001 rax:<invalid> rsi:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> sil:0x1C cl:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040299C:
	Mem4104[0x000000000061B150:word32] = 0x00000002
	Mem4105[0x000000000061B0F0:byte] = 0x01
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:0x0000000000000001 rax:<invalid> rsi:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> sil:0x1C cl:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004029C5:
	Mem204[0x000000000061B14C:word32] = 0x00000000
	Mem205[0x000000000061B148:word32] = 0x00000000
	Mem206[0x000000000061B147:byte] = 0x00
	Mem207[0x000000000061B145:byte] = 0x00
	Mem208[0x000000000061B144:byte] = 0x00
	Mem209[0x000000000061B12C:word32] = 0x00000000
	Mem210[0x000000000061B114:byte] = 0x00
	Mem211[0x000000000061B110:word32] = 0x00000001
	Mem212[0x000000000061B10E:byte] = 0x00
	Mem213[0x000000000061B10D:byte] = 0x00
	Mem214[0x000000000061B108:word32] = 0x00000000
	Mem215[0x000000000061B100:word64] = 0x0000000000000000
	Mem216[0x000000000061B0F8:word64] = 0x0000000000000000
	Mem217[0x000000000061B17D:byte] = 0x00
	word64 rax_218 = getenv(0x000000000041382E)
	branch rax_218 == 0x0000000000000000 l0000000000402A7F
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402A50:
	word64 rax_4052 = fn0000000000409E50(0x0000000000000004, 0x0000000000416460, 0x0000000000416480, rax_218)
	byte al_4056 = (byte) rax_4052
	branch (word32) rax_4052 < 0x00000000 l0000000000403786
// DataOut: al ebx fs r10 r11 r12 r13 r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:0x000000000041382E rax:<invalid> rsi:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403786:
	word64 r8_4071
	word64 r12_4075
	fn000000000040E930(rbx_1277, rbp_143, rax_218, r11, rax_218, r13, r14, r15, fs, out rbx_1277, out rbp_143, out r8_4071, out r9, out r10, out r11, out r12_4075, out r13, out r14, out r15)
	error(0x0000000000000000, 0x0000000000000000, dcgettext(0x0000000000000000, 0x0000000000415B00, 0x0000000000000005), Mem217[fp - 0x00000000000003C0:<unknown>])
// DataOut: ebx fs r10 r11 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rcx:0x0000000000000004 rdx:<invalid> eax:<invalid> ecx:<invalid> sil:0x80 cl:0x04 -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402A6F:
	fn000000000040E640((word32) (uint64) Mem217[DPB(rax_4052, (int16) al_4056, 0) * 0x0000000000000004 + 0x00416460:word32], 0x0000000000000000)
// DataOut: ebx fs r10 r11 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rcx:0x0000000000000004 rdx:<invalid> eax:<invalid> ecx:<invalid> sil:0x80 cl:0x04 -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402A7F:
	Mem249[0x000000000061B0C8:word64] = 0x0000000000000050
	word64 rax_250 = getenv(0x000000000041383C)
	Mem258[fp - 0x0000000000000398:word64] = fp - 0x0000000000000378
	branch rax_250 == 0x0000000000000000 l0000000000402AB1
// DataOut: ebx fs r10 r11 r12 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:(int16) al eax:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402AA6:
	branch Mem258[rax_250:byte] != 0x00 l00000000004037B8
// DataOut: ebx fs r10 r11 r12 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041383C rax:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:0x0041383C r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004037B8:
	byte r13b_4005
	branch fn0000000000410E90(0x00000000, 0x0000000000000000, rax_250, 0x0000000000000000, out ebx_141, out r9, out r13b_4005) != 0x00000000 l0000000000403A93
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041383C rax:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:<invalid> eax:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:0x0041383C r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004037D2:
	word64 rax_4039 = Mem258[fp - 0x0000000000000378:word64]
	branch rax_4039 == 0x0000000000000000 l0000000000403A93
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> ax:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403A93:
	word64 r8_4018
	word64 r12_4022
	fn000000000040E930(rbx_1277, rbp_143, rax_250, r11, rax_250, r13, r14, r15, fs, out rbx_1277, out rbp_143, out r8_4018, out r9, out r10, out r11, out r12_4022, out r13, out r14, out r15)
	error(0x0000000000000000, 0x0000000000000000, dcgettext(0x0000000000000000, 0x0000000000415B48, 0x0000000000000005), Mem258[fp - 0x00000000000003C0:<unknown>])
// DataOut: ebx fs r10 r11 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> ax:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004037E0:
	Mem4047[0x000000000061B0C8:word64] = rax_4039
// DataOut: ebx fs r10 r11 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> ax:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402AB1:
	branch ioctl(0x0000000000000001, 0x0000000000005413, Mem258[fp - 0x00000000000003C0:<unknown>]) == 0xFFFFFFFF l0000000000402ADD
// DataOut: ebx fs r10 r11 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:<invalid> eax:<invalid> r8:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> esi:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402ACC:
	word32 eax_3983 = (word32) Mem258[fp - 0x0000000000000376:word16]
	word64 rax_3984 = (uint64) eax_3983
	branch (word16) eax_3983 == 0x0000 l0000000000402ADD
// DataOut: ebx fs r10 r11 r15 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000000001 rax:<invalid> rsi:0x0000000000005413 r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r8:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> ecx:<invalid> sil:0x13 cl:<invalid> esi:0x00005413 al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00000001 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402AD6:
	Mem3991[0x000000000061B0C8:word64] = rax_3984
// DataOut: ebx fs r10 r11 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000000001 rax:<invalid> rsi:0x0000000000005413 r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r8:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> ecx:<invalid> sil:0x13 cl:<invalid> esi:0x00005413 al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00000001 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402ADD:
	word64 rax_287 = getenv(0x0000000000413844)
	Mem296[0x000000000061B0D8:word64] = 0x0000000000000008
	branch rax_287 == 0x0000000000000000 l0000000000402B22
// DataOut: ebx fs r10 r11 r15 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000000001 rax:<invalid> rsi:0x0000000000005413 r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r8:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> ecx:<invalid> sil:0x13 cl:<invalid> esi:0x00005413 al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00000001 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402AFA:
	byte r13b_3952
	branch fn0000000000410E90(0x00000000, 0x0000000000000000, rax_287, 0x0000000000000000, out ebx_141, out r9, out r13b_3952) != 0x00000000 l00000000004041BB
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000413844 rax:<invalid> rsi:0x0000000000005413 r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r8:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> ecx:<invalid> sil:0x13 cl:<invalid> esi:0x00005413 al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00413844 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004041BB:
	word64 r8_3962
	word64 r12_3966
	word64 r13_3967
	word64 r14_3968
	fn000000000040E930(rbx_1277, rbp_143, rax_287, r11, rax_287, r13, r14, r15, fs, out rbx_1277, out rbp_143, out r8_3962, out r9, out r10, out r11, out r12_3966, out r13_3967, out r14_3968, out r15)
	error(0x0000000000000000, 0x0000000000000000, dcgettext(0x0000000000000000, 0x0000000000415B88, 0x0000000000000005), Mem296[fp - 0x00000000000003C0:<unknown>])
// DataOut: ebx fs r10 r11 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> r8:<invalid> ax:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402B16:
	Mem3958[0x000000000061B0D8:word64] = Mem296[fp - 0x0000000000000378:word64]
// DataOut: ebx fs r10 r11 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> r8:<invalid> ax:<invalid> ebx:<invalid> r9d:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402B22:
	r14 = 0x0000000000000000
	byte r14b_315 = 0x00
	r13 = 0x0000000000000000
	byte r13b_3161 = 0x00
	word64 r12_2062 = 0x0000000000000000
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r8:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402B30:
	word32 eax_1444
	word64 rsi_1941
	Mem356[fp - 0x0000000000000380:word32] = 0xFFFFFFFF
	word64 r8_1060 = fp - 0x0000000000000380
	word32 eax_357 = getopt_long((uint64) ebx_141, rbp_143, 0x0000000000415BC8, 0x0000000000413080, fp - 0x0000000000000380)
	branch eax_357 == 0xFFFFFFFF l000000000040321E
// DataOut: eax ebx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> ax:<invalid> r8:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> bpl:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040321E:
	branch Mem356[0x000000000061B138:word64] == 0x0000000000000000 l000000000040398A
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040398A:
	fn000000000040C810(0x000000000061B138, getenv(0x00000000004138E1), fp - 0x0000000000000380, out ebx_141, out r8_1060, out r9, out r14, out r15)
	branch r15 == 0x0000000000000000 l0000000000404531
// DataOut: ebx fs r10 r11 r12 r13b r14 r14b r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404531:
	branch getenv(0x00000000004138E4) != 0x0000000000000000 l00000000004039B2
// DataOut: ebx fs r10 r11 r12 r13b r14 r14b r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> bpl:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:0x40 dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404544:
// DataOut: ebx fs r10 r11 r12 r13b r14 r14b r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x00000000004138E4 rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> bpl:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:0x40 dx:0xB138 dl:0x38 edi:0x004138E4 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004039B2:
	Mem3934[0x000000000061B134:word32] = (word32) (uint64) Mem356[0x000000000061B140:word32]
	Mem3936[0x000000000061A560:word64] = Mem3934[0x000000000061B138:word64]
// DataOut: ebx fs r10 r11 r12 r13b r14 r14b r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> bpl:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:0x40 dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004039CC:
	branch r14b_315 == 0x00 l000000000040322C
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> bpl:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:0x40 dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004039D5:
	Mem3926[0x000000000061B140:word32] = 0x00000000
	Mem3927[0x000000000061B138:word64] = 0x0000000000000400
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> bpl:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:0x40 dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040322C:
	word64 rdx_3543 = Mem356[0x000000000061B0C8:word64]
	word64 rax_3546 = 0x0000000000000001
	branch rdx_3543 >u 0x0000000000000002 l00000000004037FB
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004037FB:
	rax_3546 = (uint64) ((uint128) (uint64) rdx_3543 /u 0x0000000000000003)
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:0x0001 r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:0x01 cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403242:
	Mem3562[0x000000000061B020:word64] = rax_3546
	word64 rax_3563 = fn000000000040E600(0x0000000000000000, r8_1060, r11)
	Mem3565[0x000000000061B0E8:word64] = rax_3563
	branch fn000000000040E630(rax_3563) == 0x00000005 l000000000040426C
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040426C:
	fn000000000040E650(0x00000001, 0x00000020, Mem3565[0x000000000061B0E8:word64])
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403268:
	word64 rax_3574 = (uint64) Mem3565[0x000000000061B12C:word32]
	branch (word32) rax_3574 <=u 0x00000001 l00000000004032A9
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403273:
	r14 = r8_1060 + 0x00000000004138ED
	byte al_3861 = (byte) (word32) Mem3565[rax_3574 + 0x00000000004138ED:byte]
	branch al_3861 == 0x00 l00000000004032A9
// DataOut: al ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403289:
	r14 = r14 + 0x0000000000000001
	al_3861 = (byte) (word32) Mem3565[fn000000000040E650(0x00000001, (int32) al_3861, Mem3565[0x000000000061B0E8:word64]):byte] (alias)
	branch al_3861 != 0x00 l0000000000403289
// DataOut: al ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> sil:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004032A9:
	word64 rax_3591 = fn000000000040E600(0x0000000000000000, r8_1060, r11)
	Mem3597[0x000000000061B0E0:word64] = rax_3591
	rsi_1941 = fn000000000040E650(0x00000001, 0x0000003A, rax_3591)
	branch Mem3597[0x000000000061B130:byte] == 0x00 l00000000004032E2
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004032D2:
	branch Mem3597[0x000000000061B150:word32] == 0x00000000 l00000000004032E2
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004032DB:
	Mem3852[0x000000000061B130:byte] = 0x00
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004032E2:
	branch (word32) (uint64) ((word32) (uint64) Mem3597[0x000000000061B14C:word32] - 0x00000001) <=u 0x00000001 l0000000000403965
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403965:
	branch r13b_3161 != 0x00 l00000000004032F4
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040396E:
	branch Mem3597[0x000000000061B150:word32] == 0x00000000 l000000000040380D
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040397B:
	Mem3849[0x000000000061B148:word32] = 0x00000004
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004032F4:
	branch Mem3597[0x000000000061B150:word32] == 0x00000000 l000000000040380D
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040380D:
	bool Z_3612 = (bool) cond(r12_2062)
	branch r12_2062 == 0x0000000000000000 l00000000004045C6
// DataOut: ebx fs r10 r11 r12 r15 r8 r9 rbp rbx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004045C6:
	word64 rax_3822 = getenv(0x00000000004138F5)
	r12_2062 = rax_3822
	Z_3612 = (bool) cond(rax_3822) (alias)
	branch rax_3822 != 0x0000000000000000 l00000000004045DF
// DataOut: ebx fs r10 r11 r12 r15 r8 r9 rbp rbx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004045DB_1:
	r12_2062 = 0x0000000000413827
// DataOut: ebx fs r10 r11 r12 r15 r8 r9 rbp rbx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x00000000004138F5 rax:0x0000000000413827 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00413827 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x3827 r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> al:0x27 cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:0x004138F5 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004045DF:
// DataOut: ebx fs r10 r11 r12 r15 r8 r9 rbp rbx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x00000000004138F5 rax:0x0000000000413827 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00413827 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x3827 r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> al:0x27 cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:0x004138F5 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403816:
	r14 = 0x0000000000412CA0
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040383E:
	word64 rsi_3647 = r12_2062
	word64 rdi_3650 = 0x0000000000412CA0
	word64 rcx_3652 = 0x0000000000000006
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403847:
	branch rcx_3652 == 0x0000000000000000 l0000000000403849
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403847_1:
	Z_3612 = (bool) cond(Mem3597[rsi_4114:byte] - Mem3597[rdi_4115:byte]) (alias)
	rsi_3647 = rsi_4114 + 0x0000000000000001
	rdi_3650 = rdi_4115 + 0x0000000000000001
	rcx_3652 = rcx_3652 - 0x0000000000000001
	word64 rsi_4114 = rsi_3647
	word64 rdi_4115 = rdi_3650
	branch Mem3597[rsi_4114:byte] != Mem3597[rdi_4115:byte] l0000000000403847
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403849:
	branch Z_3612 l0000000000403828
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403828:
	branch fn000000000040AB70(0x0000000000000002, out rsi_1941) == 0x00 l0000000000403301
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040383A:
	r12_2062 = r12_2062 + 0x0000000000000006
	Z_3612 = (bool) cond(r12_2062) (alias)
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:0x00000002 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040384B:
	branch Mem3597[r12_2062:byte] == 0x2B l00000000004043D9
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403856:
	word64 rax_3691 = fn0000000000409E50(0x0000000000000004, 0x00000000004136F0, 0x0000000000413700, r12_2062)
	branch rax_3691 < 0x0000000000000000 l0000000000404564
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404564:
	r9 = fn0000000000409F80(rax_3691, r12_2062, 0x000000000041391D, r11, 0x0000000000000006, 0x0000000000412CA0, r15, fs, out r10, out r11, out r13, out r14, out r15)
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413928, 0x0000000000000005), Mem3597[0x000000000061A650:word64])
	word64 rbx_3756 = 0x0000000000413700
// DataOut: fs r10 r11 r13 r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x004136F0 ebp:<invalid> al:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040459C:
	branch Mem3597[rbx_3756:word64] == 0x0000000000000000 l00000000004031D6
// DataOut: fs r10 r11 r13 r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004031D6:
	rbx_1277 = Mem3597[0x000000000061A650:word64]
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415BF8, 0x0000000000000005), rbx_1277)
	ebx_141 = (word32) rbx_1277 (alias)
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004045A8:
	__fprintf_chk(Mem3597[0x000000000061A650:word64], 0x0000000000000001, 0x000000000041393E, Mem3597[fp - 0x00000000000003C0:<unknown>])
	rbx_3756 = rbx_3756 + 0x0000000000000008
// DataOut: fs r10 r11 r13 r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403876:
	branch rax_3691 == 0x0000000000000001 l0000000000404549
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x004136F0 ebp:<invalid> al:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404549:
	Mem3735[0x000000000061A3D8:word64] = 0x0000000000413966
	Mem3736[0x000000000061A3D0:word64] = 0x0000000000413966
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x004136F0 ebp:<invalid> al:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403880:
	branch rax_3691 <= 0x0000000000000001 l0000000000404465
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x004136F0 ebp:<invalid> al:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404465:
	branch rax_3691 != 0x0000000000000000 l00000000004038A8
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x004136F0 ebp:<invalid> al:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040446E:
	Mem3733[0x000000000061A3D8:word64] = 0x000000000041394E
	Mem3734[0x000000000061A3D0:word64] = 0x000000000041394E
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x004136F0 ebp:<invalid> al:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403886:
	branch rax_3691 == 0x0000000000000002 l00000000004045F3
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x004136F0 ebp:<invalid> al:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004045F3:
	Mem3728[0x000000000061A3D0:word64] = 0x0000000000413975
	Mem3729[0x000000000061A3D8:word64] = 0x0000000000413969
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x004136F0 ebp:<invalid> al:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403890:
	branch rax_3691 != 0x0000000000000003 l00000000004038A8
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x004136F0 ebp:<invalid> al:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403896:
	word64 rsi_3711
	branch fn000000000040AB70(0x0000000000000002, out rsi_3711) != 0x00 l000000000040460E
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x004136F0 ebp:<invalid> al:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040460E:
	word64 rax_3719 = dcgettext(0x0000000000000000, Mem3597[0x000000000061A3D0:word64], 0x0000000000000002)
	word64 rsi_3720 = Mem3597[0x000000000061A3D8:word64]
	Mem3725[0x000000000061A3D0:word64] = rax_3719
	Mem3727[0x000000000061A3D8:word64] = dcgettext(0x0000000000000000, rsi_3720, 0x0000000000000002)
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:0x00 esi:0x00413700 ecx:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x004136F0 ebp:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:0x00000002 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402B5A:
	word32 eax_3065 = (word32) (uint64) (eax_357 + 0x00000083)
	branch eax_3065 >u 0x00000112 l00000000004031F9
// DataOut: eax ebx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402B6A:
	switch (eax_3065) { l0000000000402DFF l0000000000402DF8 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l0000000000402DDC l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l0000000000402DC0 l0000000000402D75 l0000000000402D66 l0000000000402D5A l00000000004031F9 l0000000000402D4B l0000000000402D3F l0000000000402D30 l0000000000402D05 l00000000004031F9 l00000000004031F9 l0000000000402CF6 l00000000004031F9 l0000000000402CE8 l00000000004031F9 l00000000004031F9 l0000000000402CD7 l0000000000402CCB l0000000000402CB6 l0000000000402C85 l0000000000402C70 l00000000004031F9 l00000000004031F9 l0000000000402C5B l00000000004031F9 l0000000000402C4F l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l0000000000402C40 l0000000000402C2F l0000000000402C20 l0000000000402C14 l00000000004031F9 l0000000000402BDA l0000000000402BC4 l0000000000402B95 l0000000000402B8C l00000000004031F9 l0000000000402B84 l0000000000402B78 l00000000004031C7 l0000000000402B71 l00000000004031B1 l00000000004031A2 l0000000000403196 l000000000040318A l000000000040317E l0000000000403169 l000000000040315A l0000000000403145 l00000000004030DC l00000000004030CD l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004031F9 l00000000004030C1 l0000000000403084 l000000000040302E l000000000040301F l0000000000403010 l0000000000402FD6 l0000000000402FC1 l0000000000402FB5 l0000000000402F8A l0000000000402F50 l0000000000402F15 l0000000000402F09 l0000000000402EDA l0000000000402E9A l0000000000402E60 l0000000000402E54 }
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402E54:
	r12_2062 = Mem356[0x000000000061A640:word64]
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402E60:
	Mem3526[0x000000000061B14C:word32] = (word32) (uint64) Mem356[fn000000000040A120(0x0000000000412F50, 0x0000000000412F80, Mem356[0x000000000061A640:word64], 0x0000000000413883, 0x0000000000000004, Mem356[0x000000000061A578:word64], r11, fs, out r9, out r10, out r11) * 0x0000000000000004 + 0x00412F50:word32]
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402E9A:
	Mem3512[0x000000000061B148:word32] = (word32) (uint64) Mem356[fn000000000040A120(0x0000000000412FB0, 0x0000000000412FE0, Mem356[0x000000000061A640:word64], 0x000000000041387C, 0x0000000000000004, Mem356[0x000000000061A578:word64], r11, fs, out r9, out r10, out r11) * 0x0000000000000004 + 0x00412FB0:word32]
	r13 = 0x0000000000000001
	r13b_3161 = 0x01 (alias)
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402EDA:
	Mem3492[0x000000000061B140:word32] = 0x00000090
	Mem3493[0x000000000061B134:word32] = 0x00000090
	Mem3494[0x000000000061B138:word64] = 0x0000000000000001
	Mem3495[0x000000000061A560:word64] = 0x0000000000000001
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402F09:
	Mem3491[0x000000000061B0F0:byte] = 0x00
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402F15:
	fn000000000040E640((word32) (uint64) Mem356[fn000000000040A120(0x0000000000416460, 0x0000000000416480, Mem356[0x000000000061A640:word64], 0x00000000004138AD, 0x0000000000000004, Mem356[0x000000000061A578:word64], r11, fs, out r9, out r10, out r11) * 0x0000000000000004 + 0x00416460:word32], 0x0000000000000000)
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402F50:
	Mem3474[0x000000000061B12C:word32] = (word32) (uint64) Mem356[fn000000000040A120(0x00000000004136B0, 0x00000000004136C0, Mem356[0x000000000061A640:word64], 0x000000000041389B, 0x0000000000000004, Mem356[0x000000000061A578:word64], r11, fs, out r9, out r10, out r11) * 0x0000000000000004 + 0x004136B0:word32]
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402F8A:
	word64 rax_3455 = fn0000000000410C40(rbp_143, 0x0000000000000010)
	Mem3457[rax_3455:word64] = Mem356[0x000000000061A640:word64]
	word64 rdx_3458 = Mem3457[0x000000000061B0F8:word64]
	Mem3459[0x000000000061B0F8:word64] = rax_3455
	Mem3460[rax_3455 + 0x0000000000000008:word64] = rdx_3458
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402FB5:
	Mem3453[0x000000000061B10C:byte] = 0x01
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402FC1:
	Mem3449[0x000000000061B150:word32] = 0x00000000
	r12_2062 = 0x0000000000413813
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402FD6:
	Mem3448[0x000000000061B150:word32] = (word32) (uint64) Mem356[fn000000000040A120(0x0000000000413010, 0x0000000000413040, Mem356[0x000000000061A640:word64], 0x000000000041388A, 0x0000000000000004, Mem356[0x000000000061A578:word64], r11, fs, out r9, out r10, out r11) * 0x0000000000000004 + 0x00413010:word32]
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403010:
	Mem3434[0x000000000061B12C:word32] = 0x00000002
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040301F:
	Mem3433[0x000000000061B110:word32] = 0x00000004
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040302E:
	word64 rsi_3378 = Mem356[0x000000000061A640:word64]
	branch rsi_3378 == 0x0000000000000000 l0000000000403A7C
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040303E:
	word32 eax_3415 = (word32) (uint64) Mem356[fn000000000040A120(0x0000000000412EC0, 0x0000000000412F00, rsi_3378, 0x0000000000413893, 0x0000000000000004, Mem356[0x000000000061A578:word64], r11, fs, out r9, out r10, out r11) * 0x0000000000000004 + 0x00412EC0:word32]
	branch eax_3415 == 0x00000001 l0000000000403A7C
// DataOut: eax ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040306F:
	branch eax_3415 == 0x00000002 l0000000000403A6A
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> bpl:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403A6A:
	branch isatty(0x0000000000000001) == 0x00000000 l0000000000403078
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> bpl:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403A7C:
	Mem3401[0x000000000061B129:byte] = 0x01
	Mem3402[0x000000000061B0D8:word64] = 0x0000000000000000
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> bpl:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403078:
	Mem3427[0x000000000061B129:byte] = 0x00
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> bpl:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403084:
	word64 r8_3361
	eax_1444 = fn000000000040C810(0x000000000061B138, Mem356[0x000000000061A640:word64], fp - 0x0000000000000380, out ebx_141, out r8_3361, out r9, out r14, out r15)
	branch eax_1444 != 0x00000000 l00000000004043C0
// DataOut: eax ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004043C0:
	r8_1060 = Mem356[0x000000000061A640:word64]
	fn00000000004112D0(0x0000000000413080, (word32) (uint64) Mem356[rsp_2050 + 0x0000000000000038:word32], (word32) (uint64) eax_1444)
// DataOut: ebx fs r10 r11 r12 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> bpl:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:0x40 dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004043D9:
	word64 r13_2937
	word64 r12_2919 = r12_2062 + 0x0000000000000001
	word64 rax_2924 = strchr(r12_2919, 0x000000000000000A)
	r14 = rax_2924
	branch rax_2924 == 0x0000000000000000 l000000000040444F
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040444F:
	r13_2937 = r12_2919
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x000000000000000A rdi:<invalid> rax:<invalid> r14:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> eax:<invalid> r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:0x0A esi:0x0000000A ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004043F2:
	r13_2937 = r8_1060 + 0x0000000000000001
	word64 rsi_2959 = 0x000000000000000A
	branch strchr(r13_2937, 0x000000000000000A) == 0x0000000000000000 l0000000000404438
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x000000000000000A rdi:<invalid> rax:<invalid> r14:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> eax:<invalid> r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:0x0A esi:0x0000000A ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404408:
	word64 r15_2998
	r15 = fn000000000040EC10(rbx_1277, rbp_143, r12_2919, r11, r12_2919, r13_2937, rax_2924, r15, fs, out rbx_1277, out rbp_143, out r8_1060, out r9, out r10, out r11, out r12_2919, out r13_2937, out r14, out r15_2998)
	error(0x0000000000000002, 0x0000000000000000, dcgettext(0x0000000000000000, 0x0000000000413900, 0x0000000000000005), Mem356[rsp_2050 + -8:<unknown>])
	rsi_2959 = 0x0000000000000000
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x000000000000000A rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> eax:<invalid> r8:<invalid> rcx:<invalid> sil:0x0A esi:0x0000000A ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00000001 ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404438:
	Mem2987[rsi_2959:byte] = 0x00
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040443C:
	Mem2954[0x000000000061A3D0:word64] = r12_2919
	Mem2955[0x000000000061A3D8:word64] = r13_2937
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> esi:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004038A8:
	branch strstr(Mem356[0x000000000061A3D0:word64], 0x0000000000413766) == 0x0000000000000000 l0000000000404484
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> esi:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404484:
	rsi_1941 = 0x0000000000413766
	branch strstr(Mem356[0x000000000061A3D8:word64], 0x0000000000413766) != 0x0000000000000000 l00000000004038C2
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040449E:
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x0000000000413766 rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:0x66 esi:0x00413766 ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004038C2:
	Mem2679[0x000000000061A748:word64] = 0x0000000000000005
// DataOut: ebx fs r10 r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x0000000000413766 rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:0x66 esi:0x00413766 ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004038CD:
	r14 = Mem2679[0x000000000061A748:word64]
	Mem2706[0x000000000061A748:word64] = 0x0000000000000000
	word64 r13_2703 = 0x000000000061A760
	word32 r12d_2708 = 0x0002000E
// DataOut: ebx fs r10 r11 r12d r13 r14 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004038EB:
	Mem2722[rsp_2050 + 0x0000000000000040:word64] = r14
	r9 = 0x0000000000000000
	r8_1060 = 0x0000000000000000
	rsi_1941 = fn000000000040CDC0(Mem2722[rsp_2050 + 0x0000000000000020:word64], 0x00000000000000A1, r13_2703, nl_langinfo((uint64) r12d_2708), 0x00000000, 0x00000000)
	branch false l0000000000404356
// DataOut: ebx fs r10 r11 r12d r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404356:
	Mem2794[0x000000000061A748:word64] = 0x0000000000000000
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040391F:
	word64 rax_2763 = Mem2722[rsp_2050 + 0x0000000000000040:word64]
	branch Mem2722[0x000000000061A748:word64] <u rax_2763 l0000000000403933
// DataOut: ebx fs r10 r11 r12d r13 r14 r15 r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040392B_1:
	rax_2763 = Mem2722[0x000000000061A748:word64]
// DataOut: ebx fs r10 r11 r12d r13 r14 r15 r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403933:
	Mem2783[0x000000000061A748:word64] = rax_2763
	r12d_2708 = (word32) (uint64) (r12d_2708 + 0x00000001) (alias)
	r13_2703 = r13_2703 + 161
	branch r12d_2708 != 0x0002001A l00000000004038EB
// DataOut: ebx fs r10 r11 r12d r13 r14 r15 r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040394E:
	branch rax_2763 <u r14 l00000000004038CD
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403957:
	branch rax_2763 != 0x0000000000000000 l0000000000403301
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403960:
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404361:
	error(0x0000000000000000, 0x0000000000000000, dcgettext(0x0000000000000000, 0x0000000000415C30, 0x0000000000000005), Mem2722[rsp_2050 + -8:<unknown>])
	rsi_1941 = 0x0000000000000000
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403301:
	r12_2062 = (uint64) Mem356[0x000000000061A620:word32]
	word32 r12d_448 = (word32) r12_2062
	branch Mem356[0x000000000061B129:byte] != 0x00 l0000000000403AC5
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403AC5:
	word64 rax_2041 = getenv(0x000000000041397F)
	Mem2049[rsp_2050 + 0x0000000000000038:word64] = rax_2041
	branch rax_2041 == 0x0000000000000000 l0000000000403AE2
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403AD9:
	branch Mem2049[rax_2041:byte] != 0x00 l00000000004044FA
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041397F rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:0x0041397F r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004044FA:
	Mem2265[rsp_2050 + 0x0000000000000030:word16] = 0x3F3F
	Mem2266[rsp_2050 + 0x0000000000000032:byte] = 0x00
	word64 rax_2273 = fn0000000000410E30(rax_2041, out rsi_1941)
	Mem2280[0x000000000061B118:word64] = rax_2273
	Mem2281[rsp_2050 + 0x0000000000000040:word64] = rax_2273
	word64 r13_2267 = 0x0000000000000000
	word32 edx_2275 = 0x00000000
// DataOut: ebx edx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041397F rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:0x0041397F r11d:<invalid> r10:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040451F:
	branch edx_2275 >u 0x00000005 l0000000000402985
// DataOut: ebx edx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404528:
	switch (edx_2275) { l0000000000404703 l00000000004046D6 l000000000040473B l0000000000404690 l0000000000402985 l0000000000404647 }
// DataOut: ebx edx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404647:
	error(0x0000000000000000, 0x0000000000000000, dcgettext(0x0000000000000000, 0x0000000000415D98, 0x0000000000000005), Mem2281[rsp_2050 + -8:<unknown>])
	free(Mem2281[0x000000000061B118:word64])
	rsi_1941 = 0x0000000000000000
	word64 rdi_2622 = Mem2281[0x000000000061B120:word64]
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404679:
	branch rdi_2622 == 0x0000000000000000 l0000000000404787
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404787:
	Mem2633[0x000000000061B129:byte] = 0x00
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404682:
	word64 r13_2630 = Mem2281[r15 + 0x0000000000000020:word64]
	free(rdi_2622)
	rdi_2622 = r13_2630
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404690:
	word64 rax_2571 = Mem2281[rsp_2050 + 0x0000000000000038:word64]
	Mem2573[rsp_2050 + 0x0000000000000038:word64] = rax_2571 + 0x0000000000000001
	edx_2275 = 0x00000005 (alias)
	branch Mem2573[rax_2571:byte] != 0x3D l0000000000404528
// DataOut: ebx edx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004046AC:
	Mem2589[rbp_143 + 0x0000000000000018:word64] = Mem2573[rsp_2050 + 0x0000000000000040:word64]
	rsi_1941 = rsp_2050 + 0x0000000000000038
	edx_2275 = (word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond(fn00000000004049E0(rbp_143 + 0x0000000000000010, 0x00, r13_2267, r14, r15, out rbx_1277, out rsp_2050, out rbp_143, out r8_1060, out r9, out r10, out r11, out r12_2062) - 0x01)) & 0x00000005) (alias)
// DataOut: ebx edx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:0x05 edx:0x00000005 cl:<invalid> r12d:<invalid> dx:0x0005 edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040473B:
	word64 rax_2467 = Mem2281[rsp_2050 + 0x0000000000000038:word64]
	Mem2471[rsp_2050 + 0x0000000000000038:word64] = rax_2467 + 0x0000000000000001
	r15 = 0x0000000000000000
	word32 r15d_2469 = 0x00000000
	edx_2275 = 0x00000005 (alias)
	branch Mem2471[rax_2467:byte] != 0x3D l0000000000404528
// DataOut: ebx edx fs r10 r11 r12 r12d r13 r14 r15 r15d r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040475A:
// DataOut: fs r11 r12 r13 r15 r15d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:0x05 edx:0x00000005 cl:<invalid> r12d:<invalid> dx:0x0005 edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404772:
	word64 rsi_2482 = Mem2471[r15 * 0x0000000000000008 + 0x004135E0:word64]
	r14 = (int64) r15d_2469
	branch rsi_2482 != 0x0000000000000000 l000000000040475C
// DataOut: fs r11 r12 r13 r14 r15 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:0x05 edx:0x00000005 cl:<invalid> r12d:<invalid> dx:0x0005 edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040475C:
	r15 = r15 + 0x0000000000000001
	r15d_2469 = (word32) r15 (alias)
	branch strcmp(rsp_2050 + 0x0000000000000030, rsi_2482) == 0x00000000 l0000000000404828
// DataOut: fs r11 r12 r13 r14 r15 r15d rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:(int64) r15d r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:0x05 edx:0x00000005 cl:<invalid> r12d:<invalid> dx:0x0005 edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404828:
	Mem2554[rsi_2482 + 0x000000000061A3E8:word64] = Mem2471[rsp_2050 + 0x0000000000000040:word64]
	r14 = r14 << 0x0000000000000004
	rsi_1941 = rsp_2050 + 0x0000000000000038
	edx_2275 = 0x00000000 (alias)
	branch fn00000000004049E0(rsi_2482 + 0x000000000061A3E0, 0x00, r13_2267, r14 << 0x0000000000000004, r15, out rbx_1277, out rsp_2050, out rbp_143, out r8_1060, out r9, out r10, out r11, out r12_2062) != 0x00 l0000000000404528
// DataOut: ebx edx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:(int64) r15d r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:0x05 edx:0x00000005 cl:<invalid> r12d:<invalid> dx:0x0005 edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404782:
// DataOut: fs r11 r12 r13 r14 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:(int64) r15d r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:0x05 edx:0x00000005 cl:<invalid> r12d:<invalid> dx:0x0005 edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404857:
	word64 r14_2511
	r14 = fn000000000040E930(rbx_1277, rbp_143, rsp_2050 + 0x0000000000000030, r11, r12_2062, r13_2267, r14, r15, fs, out rbx_1277, out rbp_143, out r8_1060, out r9, out r10, out r11, out r12_2062, out r13_2267, out r14_2511, out r15)
	error(0x0000000000000000, 0x0000000000000000, dcgettext(0x0000000000000000, 0x00000000004139FB, 0x0000000000000005), Mem2471[rsp_2050 + -8:<unknown>])
	rsi_1941 = 0x0000000000000000
	edx_2275 = 0x00000005 (alias)
// DataOut: ebx edx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> r15:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> ecx:<invalid> al:<invalid> r11d:<invalid> ax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004046D6:
	word64 rax_2448 = Mem2281[rsp_2050 + 0x0000000000000038:word64]
	edx_2275 = 0x00000005 (alias)
	branch Mem2281[rax_2448:byte] == 0x00 l0000000000404528
// DataOut: ebx edx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004046E9:
	Mem2459[rsp_2050 + 0x0000000000000038:word64] = rax_2448 + 0x0000000000000001
	Mem2466[rsp_2050 + 0x0000000000000031:byte] = (byte) (word32) Mem2459[rax_2448:byte]
	edx_2275 = 0x00000002 (alias)
// DataOut: ebx edx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:0x05 edx:0x00000005 cl:<invalid> r12d:<invalid> dx:0x0005 edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404703:
	word64 rax_2380 = Mem2281[rsp_2050 + 0x0000000000000038:word64]
	byte cl_2387 = (byte) (word32) Mem2281[rax_2380:byte]
	branch cl_2387 == 0x2A l00000000004047D4
// DataOut: cl ebx edx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004047D4:
	word64 rax_2409 = fn0000000000410C40(rsi_1941, 0x0000000000000028)
	word64 rax_2413 = Mem2281[0x000000000061B120:word64]
	Mem2422[rsp_2050 + 0x0000000000000038:word64] = Mem2281[rsp_2050 + 0x0000000000000038:word64] + 0x0000000000000001
	Mem2424[0x000000000061B120:word64] = rax_2409
	Mem2425[rbp_143 + 0x0000000000000020:word64] = rax_2413
	Mem2427[rbp_143 + 0x0000000000000008:word64] = Mem2425[rsp_2050 + 0x0000000000000040:word64]
	r13_2267 = rax_2409
	rsi_1941 = rsp_2050 + 0x0000000000000038
	edx_2275 = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond(fn00000000004049E0(rax_2409, 0x01, rax_2409, r14, r15, out rbx_1277, out rsp_2050, out rbp_143, out r8_1060, out r9, out r10, out r11, out r12_2062) - 0x01)) & 0x00000002) + 0x00000003) (alias)
// DataOut: ebx edx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404714:
	branch cl_2387 == 0x3A l00000000004047C6
// DataOut: cl ebx edx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004047C6:
	Mem2407[rsp_2050 + 0x0000000000000038:word64] = rax_2380 + 0x0000000000000001
// DataOut: ebx edx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040471D:
	branch cl_2387 == 0x00 l000000000040478E
// DataOut: ebx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040478E:
	branch Mem2281[0x000000000061A450:word64] != 0x0000000000000006 l0000000000403AE2
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040479C:
	rsi_1941 = 0x0000000000413989
	branch strncmp(Mem2281[0x000000000061A458:word64], 0x0000000000413989, 0x0000000000000006) != 0x00000000 l0000000000403AE2
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004047BA:
	Mem2379[0x000000000061B198:byte] = 0x01
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:0x0000000000413989 r12:<invalid> rdx:0x0000000000000006 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:0x89 esi:0x00413989 ecx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:0x06 edx:0x00000006 cl:<invalid> r12d:<invalid> dx:0x0006 edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404721:
	Mem2396[rsp_2050 + 0x0000000000000038:word64] = rax_2380 + 0x0000000000000001
	Mem2403[rsp_2050 + 0x0000000000000030:byte] = (byte) (word32) Mem2396[rax_2380:byte]
	edx_2275 = 0x00000001 (alias)
// DataOut: ebx edx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403AE2:
	branch Mem2049[0x000000000061B129:byte] == 0x00 l0000000000403315
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403AEF:
	branch (byte) fn0000000000404CD0(0x0000000D, out rsi_1941) != 0x00 l0000000000403B2B
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403AFD:
	branch (byte) fn0000000000404CD0(0x0000000E, out rsi_1941) == 0x00 l0000000000403B14
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:0x0000000D -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B0B:
	branch Mem2049[0x000000000061B198:byte] != 0x00 l0000000000403B2B
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:0x0000000E -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B14:
	branch (byte) fn0000000000404CD0(0x0000000C, out rsi_1941) == 0x00 l0000000000403B32
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:0x0000000E -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B22:
	branch Mem2049[0x000000000061B150:word32] != 0x00000000 l0000000000403B32
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:0x0000000C -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B2B:
	Mem2240[0x000000000061B115:byte] = 0x01
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B32:
	branch tcgetpgrp(0x0000000000000001) < 0x00000000 l0000000000403315
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B44:
	sigemptyset(0x000000000061B040)
	word64 r13_2106 = 0x0000000000412CC0
// DataOut: ebx fs r10 r11 r12 r12d r13 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000000001 rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:0x00000001 -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B51:
	word32 r14d_2116 = (word32) (uint64) Mem2049[r13_2106 + 0x0000000000000000:word32]
	sigaction((uint64) r14d_2116, 0x0000000000000000, Mem2049[rsp_2050 + 0x0000000000000020:word64])
	branch Mem2049[rsp_2050 + 0x0000000000000040:word64] == 0x0000000000000001 l0000000000403B7C
// DataOut: ebx fs r10 r11 r12 r12d r13 r14d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B6F:
	sigaddset(0x000000000061B040, (uint64) r14d_2116)
// DataOut: ebx fs r10 r11 r12 r12d r13 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:(uint64) r14d rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B7C:
	r13_2106 = r13_2106 + 0x0000000000000004
	branch r13_2106 != 0xFFFFFFFFFFBED370 l0000000000403B51
// DataOut: ebx fs r10 r11 r12 r12d r13 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B86:
	word64 rdi_2132 = rsp_2050 + 0x0000000000000048
	word64 rsi_2134 = 0x000000000061B040
	word64 rcx_2137 = 0x0000000000000020
// DataOut: ebx fs r10 r11 r12 r12d r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B95:
	branch rcx_2137 == 0x0000000000000000 l0000000000403B97
// DataOut: ebx fs r10 r11 r12 r12d r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B97:
	Mem2158[rsp_2050 + 0x00000000000000C8:word32] = 0x10000000
	word64 r13_2160 = DPB(r13_2106, 0x00, 0) + 0x0000000000412CC0
	r14 = 0x00000000004049B0
// DataOut: ebx fs r10 r11 r12 r12d r13 r14 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BAB:
	r15 = (uint64) Mem2158[r13_2160 + 0x0000000000000000:word32]
	word32 r15d_2177 = (word32) r15
	rsi_1941 = (uint64) r15d_2177
	branch sigismember(0x000000000061B040, rsi_1941) == 0x00000000 l0000000000403BE4
// DataOut: ebx fs r10 r11 r12 r12d r13 r14 r15 r15d r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BC3:
	rsi_1941 = Mem2158[rsp_2050 + 0x0000000000000020:word64]
	word64 rax_2208 = 0x00000000004057F0
	branch r15d_2177 == 0x00000014 l0000000000403BD5
// DataOut: ebx fs r10 r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000061B040 rax:<invalid> rsi:(uint64) r15d r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:0x0061B040 -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BD1_1:
	rax_2208 = 0x00000000004049B0
// DataOut: ebx fs r10 r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000061B040 rax:0x00000000004057F0 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x004057F0 r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:0xF0 r13b:<invalid> r15:<invalid> ax:0x57F0 r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:0x0061B040 -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BD5:
	Mem2221[rsp_2050 + 0x0000000000000040:word64] = rax_2208
	sigaction((uint64) r15d_2177, rsi_1941, 0x0000000000000000)
// DataOut: ebx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000061B040 rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:0x0061B040 -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BE4:
	r13_2160 = r13_2160 + 0x0000000000000004
	branch r13_2160 != 0xFFFFFFFFFFBED370 l0000000000403BAB
// DataOut: ebx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BEE:
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B95_1:
	Mem2149[rdi_2132:word32] = Mem2049[rsi_2134:word32]
	rsi_2134 = rsi_2134 + 0x0000000000000004
	rdi_2132 = rdi_2132 + 0x0000000000000004
	rcx_2137 = rcx_2137 - 0x0000000000000001
// DataOut: ebx fs r10 r11 r12 r12d r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> r10:<invalid> r11d:<invalid> dl:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403315:
	branch Mem356[0x000000000061B110:word32] == 0x00000001 l0000000000403A39
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403A39:
	word32 eax_2014 = 0x00000002
	branch Mem356[0x000000000061B10D:byte] != 0x00 l0000000000403A5F
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403A47:
	branch Mem356[0x000000000061B12C:word32] == 0x00000003 l0000000000403A5F
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000002 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000002 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0002 r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:0x02 cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403A50:
	eax_2014 = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond(Mem356[0x000000000061B150:word32] - 0x00000001)) & 0xFFFFFFFE) + 0x00000004) (alias)
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000002 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000002 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0002 r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:0x02 cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403A5F:
	Mem2025[0x000000000061B110:word32] = eax_2014
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403322:
	branch Mem356[0x000000000061B10E:byte] != 0x00 l00000000004039EF
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004039EF:
	word64 rax_1990 = fn000000000040B400(0x0000000000404990, 0x0000000000404980, 0x0000000000000000, 0x000000000000001E, 0x00000000004049D0, r11, out r9)
	Mem1998[0x000000000061B1C8:word64] = rax_1990
	eax_1444 = (word32) rax_1990 (alias)
	branch rax_1990 == 0x0000000000000000 l00000000004043BB
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403A1B:
	_obstack_begin(0x000000000061AF00, 0x0000000000000000, 0x0000000000000000, 0x0000000000402640, 0x00000000004021F0)
	r8_1060 = 0x00000000004021F0
	rsi_1941 = 0x0000000000000000
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r9:0x00000000AAAAAAAB r15d:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:0x00404980 al:<invalid> cl:0x90 r12d:<invalid> ecx:0x00404990 dx:0x4980 dl:0x80 edi:0x0000001E r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040332F:
	byte al_1954
	word32 eax_552 = (word32) (uint64) Mem356[0x000000000061B148:word32]
	branch eax_552 == 0x00000004 l000000000040377A
// DataOut: eax ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040333E:
	branch eax_552 == 0x00000002 l000000000040377A
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403347:
	branch Mem356[0x000000000061B150:word32] == 0x00000000 l000000000040377A
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403354:
	branch Mem356[0x000000000061B17D:byte] != 0x00 l000000000040377A
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403361:
	branch Mem356[0x000000000061B144:byte] != 0x00 l000000000040377A
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040377A:
	Mem1959[0x000000000061B0C1:byte] = 0x01
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040336E:
	Mem1970[0x000000000061B0C1:byte] = 0x00
	al_1954 = 0x01 (alias)
	branch Mem356[0x000000000061B10E:byte] != 0x00 l00000000004033A0
// DataOut: al ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403383:
	branch Mem1970[0x000000000061B129:byte] != 0x00 l00000000004033A0
// DataOut: al ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0001 r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:0x01 cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040338C:
	branch Mem1970[0x000000000061B12C:word32] != 0x00000000 l00000000004033A0
// DataOut: al ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0001 r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:0x01 cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403395:
	branch Mem1970[0x000000000061B10C:byte] != 0x00 l00000000004033A0
// DataOut: al ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0001 r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:0x01 cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040339E:
	al_1954 = 0x00 (alias)
// DataOut: al ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004033A0:
	Mem563[0x000000000061B0C0:byte] = al_1954
	Mem565[0x000000000061B0C0:byte] = Mem563[0x000000000061B0C0:byte] & 0x01
	branch Mem565[0x000000000061B130:byte] == 0x00 l00000000004033E8
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004033B6:
	_obstack_begin(0x000000000061AFC0, 0x0000000000000000, 0x0000000000000000, 0x0000000000402640, 0x00000000004021F0)
	_obstack_begin(0x000000000061AF60, 0x0000000000000000, 0x0000000000000000, 0x0000000000402640, 0x00000000004021F0)
	r8_1060 = 0x00000000004021F0
	rsi_1941 = 0x0000000000000000
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004033E8:
	word64 rsi_1037
	Mem580[0x000000000061B1B8:word64] = 0x0000000000000064
	word64 rax_585 = fn0000000000410C40(rsi_1941, 0x0000000000004B00)
	Mem586[0x000000000061B1B0:word64] = 0x0000000000000000
	Mem587[0x000000000061B1C0:word64] = rax_585
	fn0000000000404DD0()
	word32 r13d_1900 = (word32) (uint64) ((word32) (uint64) ebx_141 - r12d_448)
	branch r13d_1900 <= 0x00000000 l00000000004042A0
// DataOut: fs r10 r11 r12d r13d r14 r15 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004042A0:
	branch Mem587[0x000000000061B10D:byte] == 0x00 l00000000004043A5
// DataOut: fs r10 r11 r13d r14 r15 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004043A5:
	rsi_1037 = fn0000000000404D20(0x00000001, 0x0000000000000000, 0x0000000000413990, r11)
// DataOut: fs r10 r11 r13d r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004042AD:
	word32 ebx_1913
	word32 r12d_1919
	fn0000000000407EA0(0x0000000000416919, 0x00000001, 0x0000000000000003, 0x0000000000413990, r8_1060, r10, r11, r14, r15, fs, out ebx_1913, out rsi_1037, out r8_1060, out r9, out r10, out r11, out r12d_1919, out r13d_1900)
// DataOut: fs r10 r11 r13d r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403423:
	rbp_143 = rbp_143 + (int64) r12d_448 * 0x0000000000000008
// DataOut: fs r10 r11 r12d r14 r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r10:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040342B:
	word32 ebx_1893
	word32 r12d_1899
	fn0000000000407EA0(0x0000000000416919, 0x00000001, 0x0000000000000000, Mem587[rbp_143:word64], r8_1060, r10, r11, r14, r15, fs, out ebx_1893, out rsi_1037, out r8_1060, out r9, out r10, out r11, out r12d_1899, out r13d_1900)
	rbp_143 = rbp_143 + 0x0000000000000008
	branch ebx_1893 > r12d_1899 l000000000040342B
// DataOut: fs r10 r11 r12d r13d r14 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> dx:<invalid> ecx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> r11d:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040344D:
	word64 r13_1061
	branch Mem587[0x000000000061B1B0:word64] != 0x0000000000000000 l0000000000404200
// DataOut: fs r10 r11 r13d r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> dx:<invalid> ecx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> r11d:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404200:
	word64 r14_1813
	rsi_1037 = fn0000000000404E80(rsi_1037, r11, r15, out r8_1060, out r13_1061, out r14_1813, out r15)
	branch Mem587[0x000000000061B10D:byte] == 0x00 l0000000000404454
// DataOut: fs r10 r11 r13 r13d r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> dx:<invalid> ecx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> r11d:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404454:
	rsi_1037 = fn0000000000405090(0x01, 0x0000000000000000, r11)
// DataOut: fs r10 r11 r13 r13d r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> edx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> dx:<invalid> ecx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> r11d:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404212:
	branch Mem587[0x000000000061B1B0:word64] == 0x0000000000000000 l000000000040345B
// DataOut: fs r10 r11 r13 r13d r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> edx:<invalid> ax:<invalid> r15:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404220:
	rsi_1037 = fn00000000004079F0(rbp_143, rsi_1037, r8_1060, r11, r15, fs, out r8_1060, out r9, out r10, out r11)
	branch Mem587[0x000000000061B190:word64] == 0x0000000000000000 l00000000004044B5
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> edx:<invalid> ax:<invalid> r15:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004044B5:
	Mem1863[rsp_2050 + 0x0000000000000018:word64] = 0x0000000000000000
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> edx:<invalid> ax:<invalid> r15:<invalid> r14d:<invalid> r10:<invalid> dx:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404233:
	word64 rdi_1837 = Mem587[0x000000000061A610:word64]
	word64 rax_1839 = Mem587[rdi_1837 + 0x0000000000000028:word64]
	branch rax_1839 >=u Mem587[rdi_1837 + 0x0000000000000030:word64] l00000000004044A3
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> edx:<invalid> ax:<invalid> r15:<invalid> r14d:<invalid> r10:<invalid> dx:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004044A3:
	__overflow(rdi_1837, 0x000000000000000A)
	rsi_1037 = 0x000000000000000A
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> edx:<invalid> ax:<invalid> r15:<invalid> r14d:<invalid> r10:<invalid> dx:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404248:
	Mem1857[rdi_1837 + 0x0000000000000028:word64] = rax_1839 + 0x0000000000000001
	Mem1858[rax_1839:byte] = 0x0A
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> edx:<invalid> ax:<invalid> r15:<invalid> r14d:<invalid> r10:<invalid> dx:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404253:
	word64 rax_1851 = Mem587[0x000000000061B190:word64]
	Mem1853[0x000000000061B018:word64] = Mem587[0x000000000061B018:word64] + 0x0000000000000001
	Mem1855[rsp_2050 + 0x0000000000000018:word64] = rax_1851
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> edx:<invalid> ax:<invalid> r15:<invalid> r14d:<invalid> r10:<invalid> dx:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040345B:
	word64 rax_1794 = Mem587[0x000000000061B190:word64]
	Mem1804[rsp_2050 + 0x0000000000000018:word64] = rax_1794
	r13_1061 = (uint64) (r13d_1900 - 0x00000001)
	branch (word32) r13_1061 > 0x00000000 l00000000004034D2
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040346D:
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404385:
	branch rax_1794 == 0x0000000000000000 l00000000004034D2
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040438E:
	branch Mem1804[rax_1794 + 0x0000000000000018:word64] != 0x0000000000000000 l00000000004034D2
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404399:
	Mem1810[0x000000000061B0D0:byte] = 0x00
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004034D2:
	branch Mem587[rsp_2050 + 0x0000000000000018:word64] == 0x0000000000000000 l00000000004040B5
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004040B5:
	branch Mem587[0x000000000061B129:byte] == 0x00 l0000000000404152
// DataOut: r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004040C2:
	branch Mem587[0x000000000061B128:byte] == 0x00 l00000000004040ED
// DataOut: r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004040CB:
	branch Mem587[0x000000000061A3E0:word64] == 0x0000000000000002 l00000000004042CB
// DataOut: r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004042CB:
	branch memcmp(Mem587[0x000000000061A3E8:word64], 0x00000000004139E1, 0x0000000000000002) != 0x00000000 l00000000004040D9
// DataOut: r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004042E9:
	branch Mem587[0x000000000061A3F0:word64] != 0x0000000000000001 l00000000004040D9
// DataOut: r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:0x00000000004139E1 r12:<invalid> rdx:0x0000000000000002 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:0xE1 esi:0x004139E1 cl:<invalid> al:<invalid> dl:0x02 r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000002 bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:0x0002 dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004042F7:
	branch Mem587[Mem587[0x000000000061A3F8:word64]:byte] != 0x6D l00000000004040D9
// DataOut: r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:0x00000000004139E1 r12:<invalid> rdx:0x0000000000000002 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:0xE1 esi:0x004139E1 cl:<invalid> al:<invalid> dl:0x02 r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000002 bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:0x0002 dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404307:
// DataOut: r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:0x00000000004139E1 r12:<invalid> rdx:0x0000000000000002 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:0xE1 esi:0x004139E1 cl:<invalid> al:<invalid> dl:0x02 r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000002 bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:0x0002 dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004040D9:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A3F0)
// DataOut: r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004040ED:
	fflush_unlocked(Mem587[0x000000000061A610:word64])
	word64 rbx_1709 = 0x0000000000412CC0
// DataOut: r13 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040410D:
	word32 ebp_1717 = (word32) (uint64) Mem587[rbx_1709:word32]
	branch sigismember(0x000000000061B040, (uint64) ebp_1717) == 0x00000000 l0000000000404100
// DataOut: ebp r13 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040411F:
	signal((uint64) ebp_1717, 0x0000000000000000)
// DataOut: r13 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000061B040 rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:0x0061B040 r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:0x40 ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404100:
	rbx_1709 = rbx_1709 + 0x0000000000000004
	branch rbx_1709 == 0x0000000000412CF0 l000000000040412A
// DataOut: r13 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040412A:
	word32 ebx_1734 = (word32) (uint64) Mem587[0x000000000061B034:word32]
	branch ebx_1734 == 0x00000000 l0000000000404143
// DataOut: ebx r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404134:
	raise(0x0000000000000013)
	ebx_1734 = (word32) (uint64) (ebx_1734 - 0x00000001) (alias)
	branch ebx_1734 != 0x00000000 l0000000000404134
// DataOut: ebx r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404143:
	word64 rdi_1742 = (uint64) Mem587[0x000000000061B038:word32]
	branch (word32) rdi_1742 == 0x00000000 l0000000000404152
// DataOut: r13 r15 rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040414D:
	raise(rdi_1742)
// DataOut: r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404152:
	branch Mem587[0x000000000061B130:byte] != 0x00 l000000000040430C
// DataOut: r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040430C:
	fn0000000000405630(0x000000000061AFC0, 0x00000000004139E4)
	fn0000000000405630(0x000000000061AF60, 0x00000000004139EE)
	fn000000000040E630(Mem587[0x000000000061B0E8:word64])
	__printf_chk(0x0000000000000001, 0x0000000000415D40, Mem587[rsp_2050 + -8:<unknown>])
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040415F:
	word64 rbx_1665 = Mem587[0x000000000061B1C8:word64]
	branch rbx_1665 == 0x0000000000000000 l00000000004041F5
// DataOut: r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040416F:
	branch fn000000000040AFB0(rbx_1665) == 0x0000000000000000 l00000000004041ED
// DataOut: r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004041ED:
	fn000000000040B640(rbx_1665, r13_1061, r15)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004041F5:
	exit((uint64) Mem587[0x000000000061B030:word32])
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040417C:
	__assert_fail(0x0000000000415D68, 0x0000000000413736, 0x00000000000005DC, 0x0000000000412CA7)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004034DE:
	word64 r14_1032
	Mem660[0x000000000061B190:word64] = Mem587[Mem587[rsp_2050 + 0x0000000000000018:word64] + 0x0000000000000018:word64]
	branch Mem587[0x000000000061B1C8:word64] == 0x0000000000000000 l0000000000403FB5
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403FB5:
	r14_1032 = Mem660[r8_1060:word64]
// DataOut: fs r10 r11 r14 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004034FC:
	r14_1032 = Mem660[r9:word64]
	branch r14_1032 == 0x0000000000000000 l0000000000403FC2
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403FC2:
	word64 rax_1582 = Mem660[0x000000000061AF18:word64]
	branch (word32) (rax_1582 - Mem660[0x000000000061AF10:word64]) <=u 0x0000000F l00000000004044C3
// DataOut: fs r11 r13 r15 r8 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004044C3:
	__assert_fail(0x0000000000415C58, 0x0000000000413736, 0x00000000000003D5, 0x0000000000412C38)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403FDC:
	branch Mem660[0x000000000061AF20:word64] - rax_1582 >= 0xFFFFFFFFFFFFFFF0 l0000000000404002
// DataOut: fs r11 r13 r15 r8 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403FEC:
	_obstack_newchunk(0x000000000061AF00, 0x00000000FFFFFFF0)
	rax_1582 = Mem660[0x000000000061AF18:word64]
// DataOut: fs r11 r13 r15 r8 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404002:
	word64 rsi_1599 = Mem660[rsp_2050 + 0x0000000000000020:word64]
	word64 rdi_1602 = Mem660[0x000000000061B1C8:word64]
	Mem1603[0x000000000061AF18:word64] = rax_1582 - 0x0000000000000010
	word64 rax_1605 = Mem1603[rax_1582 - 0x0000000000000008:word64]
	Mem1606[rsp_2050 + 0x0000000000000040:word64] = Mem1603[rax_1582 - 0x0000000000000010:word64]
	Mem1607[rsp_2050 + 0x0000000000000048:word64] = rax_1605
	word64 rax_1612 = fn000000000040BB90(rax_1605, rsi_1599, rdi_1602, r8_1060, r11, r15, out rsi_1037, out r8_1060, out r9, out r10)
	branch rax_1612 == 0x0000000000000000 l0000000000404287
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404287:
	__assert_fail(0x0000000000413992, 0x0000000000413736, 0x000000000000059D, 0x0000000000412CA7)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> r15:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404039:
	free(rax_1612)
	word64 rbx_1621 = Mem1607[rsp_2050 + 0x0000000000000018:word64]
	free(Mem1607[rbx_1621:word64])
	free(Mem1607[rbx_1621 + 0x0000000000000008:word64])
	free(rbx_1621)
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> r15:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403508:
	word64 rax_708 = Mem660[rsp_2050 + 0x0000000000000018:word64]
	rbx_1277 = Mem660[rax_708 + 0x0000000000000008:word64]
	Mem713[rsp_2050 + 0x000000000000002F:byte] = (byte) (word32) Mem660[rax_708 + 0x0000000000000010:byte]
	word64 rax_714 = __errno_location()
	Mem716[rax_714:word32] = 0x00000000
	word64 rax_720 = opendir(r14_1032)
	ebx_141 = (word32) rbx_1277 (alias)
	r12_2062 = rax_714
	word64 r13_1033 = rax_720
	branch rax_720 == 0x0000000000000000 l0000000000404195
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404195:
	word64 r14_1571
	rsi_1037 = fn0000000000405810(r14_1032, rbp_143, dcgettext(0x0000000000000000, 0x0000000000413998, 0x0000000000000005), (word32) Mem716[rsp_2050 + 0x000000000000002F:byte], r11, rax_720, r14_1032, r15, fs, out r8_1060, out r9, out r10, out r11, out r13_1061, out r14_1571, out r15)
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040353B:
	branch Mem716[0x000000000061B1C8:word64] == 0x0000000000000000 l00000000004035FF
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403549:
	byte al_1417
	word64 rsi_1413
	word32 eax_1398 = dirfd(rax_720)
	word64 rdx_1405 = Mem716[rsp_2050 + 0x0000000000000020:word64]
	branch eax_1398 < 0x00000000 l0000000000403E95
// DataOut: eax ebx fs r11 r12 r13 r14 r15 r8 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E95:
	rsi_1413 = r14_1032
	al_1417 = (byte) (uint64) (__xstat(0x0000000000000001, r14_1032, rdx_1405) >>u 0x0000001F) (alias)
// DataOut: al ebx fs r11 r12 r13 r14 r15 r8 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040355E:
	rsi_1413 = (uint64) eax_1398
	al_1417 = (byte) (uint64) (__fxstat(0x0000000000000001, rsi_1413, rdx_1405) >>u 0x0000001F) (alias)
// DataOut: al ebx fs r11 r12 r13 r14 r15 r8 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040356D:
	branch al_1417 != 0x00 l0000000000403478
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000000001 rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:0x00000001 r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:0x01 ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403478:
	word64 r14_1528
	rsi_1037 = fn0000000000405810(r14_1032, rbp_143, dcgettext(0x0000000000000000, 0x0000000000415CE8, 0x0000000000000005), (word32) Mem716[rsp_2050 + 0x000000000000002F:byte], r11, rax_720, r14_1032, r15, fs, out r8_1060, out r9, out r10, out r11, out r13_1061, out r14_1528, out r15)
	closedir(r13_1061)
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000000001 rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:0x00000001 r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:0x01 ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403575:
	word64 rdx_1423 = Mem716[rsp_2050 + 0x0000000000000040:word64]
	Mem1425[rsp_2050 + 0x0000000000000010:word64] = Mem716[rsp_2050 + 0x0000000000000048:word64]
	Mem1426[rsp_2050 + 0x0000000000000008:word64] = rdx_1423
	word64 rax_1427 = fn0000000000410C40(rsi_1413, 0x0000000000000010)
	word64 rdx_1429 = Mem1426[rsp_2050 + 0x0000000000000008:word64]
	word64 rdi_1433 = Mem1426[0x000000000061B1C8:word64]
	Mem1436[rax_1427:word64] = Mem1426[rsp_2050 + 0x0000000000000010:word64]
	Mem1437[rax_1427 + 0x0000000000000008:word64] = rdx_1429
	word64 rax_1442 = fn000000000040BB50(rax_1427, rax_1427, rdi_1433, r8_1060, r11, out rsi_1037, out r8_1060, out r9, out r10)
	rbp_143 = rax_1427
	eax_1444 = (word32) rax_1442 (alias)
	branch rax_1442 == 0x0000000000000000 l00000000004043BB
// DataOut: eax ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000000001 rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:0x00000001 r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:0x01 ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004043BB:
	fn0000000000410E50()
// DataOut: eax ebx fs r10 r11 r12 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r15d:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r10:<invalid> r11d:<invalid> r13b:<invalid> r8b:<invalid> r8d:<invalid> r14d:<invalid> r14b:<invalid> dil:<invalid> ah:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004035BF:
	branch rax_1427 != rax_1442 l0000000000403EE2
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> r15:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403EE2:
	free(rax_1427)
	word64 r12_1492
	word64 r14_1494
	fn000000000040EAB0(rbx_1277, rax_1427, r14_1032, r11, rax_714, rax_720, r14_1032, r15, fs, out rbp_143, out r8_1060, out r9, out r10, out r11, out r12_1492, out r13_1061, out r14_1494, out r15)
	error(0x0000000000000000, 0x0000000000000000, dcgettext(0x0000000000000000, 0x0000000000415D10, 0x0000000000000005), Mem1437[rsp_2050 + -8:<unknown>])
	closedir(r13_1061)
	Mem1513[0x000000000061B030:word32] = 0x00000002
	rsi_1037 = 0x0000000000000000
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> r15:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004035C8:
	word64 rax_1452 = Mem1437[0x000000000061AF18:word64]
	branch Mem1437[0x000000000061AF20:word64] - rax_1452 <= 0x000000000000000F l0000000000404064
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> r15:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404064:
	_obstack_newchunk(0x000000000061AF00, 0x0000000000000010)
	rsi_1037 = 0x0000000000000010
	rax_1452 = Mem1437[0x000000000061AF18:word64]
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> r15:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004035E3:
	Mem1471[0x000000000061AF18:word64] = rax_1452 + 0x0000000000000010
	Mem1473[rax_1452 + 0x0000000000000008:word64] = Mem1471[rsp_2050 + 0x0000000000000040:word64]
	Mem1475[rax_1452:word64] = Mem1473[rsp_2050 + 0x0000000000000048:word64]
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> r15:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004035FF:
	branch Mem716[0x000000000061B10E:byte] != 0x00 l0000000000403615
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403608:
	branch Mem716[0x000000000061B0D0:byte] == 0x00 l00000000004036D6
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403615:
	branch Mem716[0x000000000061A3C0:byte] != 0x00 l0000000000403646
// DataOut: fs r11 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040361E:
	word64 rdi_1375 = Mem716[0x000000000061A610:word64]
	word64 rax_1377 = Mem716[rdi_1375 + 0x0000000000000028:word64]
	branch rax_1377 >=u Mem716[rdi_1375 + 0x0000000000000030:word64] l00000000004045E4
// DataOut: fs r11 r14 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004045E4:
	__overflow(rdi_1375, 0x000000000000000A)
// DataOut: fs r11 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403633:
	Mem1391[rdi_1375 + 0x0000000000000028:word64] = rax_1377 + 0x0000000000000001
	Mem1392[rax_1377:byte] = 0x0A
// DataOut: fs r11 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040363E:
	Mem1388[0x000000000061B018:word64] = Mem716[0x000000000061B018:word64] + 0x0000000000000001
// DataOut: fs r11 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403646:
	Mem1260[0x000000000061A3C0:byte] = 0x00
	branch Mem716[0x000000000061B130:byte] != 0x00 l0000000000403F2E
// DataOut: fs r11 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403F2E:
	fwrite_unlocked(0x0000000000413771, 0x0000000000000001, 0x0000000000000002, Mem1260[0x000000000061A610:word64])
	Mem1345[0x000000000061B018:word64] = Mem1260[0x000000000061B018:word64] + 0x0000000000000002
	branch Mem1345[0x000000000061B130:byte] == 0x00 l000000000040365A
// DataOut: fs r11 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403F5E:
	word64 rax_1348 = Mem1345[0x000000000061AF78:word64]
	branch Mem1345[0x000000000061AF80:word64] <u rax_1348 + 0x0000000000000008 l000000000040407F
// DataOut: fs r11 r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000413771 rax:<invalid> rsi:0x0000000000000001 r12:<invalid> rdx:0x0000000000000002 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:0x01 esi:0x00000001 cl:<invalid> al:<invalid> dl:0x02 r8b:<invalid> r9:<invalid> r15d:<invalid> edi:0x00413771 r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000002 bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:0x0002 dil:0x71 ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040407F:
	_obstack_newchunk(0x000000000061AF60, 0x0000000000000008)
	rax_1348 = Mem1345[0x000000000061AF78:word64]
// DataOut: fs r11 r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000413771 rax:<invalid> rsi:0x0000000000000001 r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:0x01 esi:0x00000001 cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:0x00413771 r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:0x71 ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403F76:
	Mem1364[rax_1348:word64] = Mem1345[0x000000000061B018:word64]
	Mem1366[0x000000000061AF78:word64] = Mem1364[0x000000000061AF78:word64] + 0x0000000000000008
// DataOut: fs r11 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040365A:
	word64 rdx_1271 = Mem1260[0x000000000061B0E0:word64]
	branch rbx_1277 != 0x0000000000000000 l000000000040366F
// DataOut: fs r11 r14 rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040366B_1:
	rbx_1277 = r14_1032
// DataOut: fs r11 rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040366F:
	word64 rsi_1282
	word64 rdi_1283
	byte r12b_1288
	byte r14b_1289
	Mem1292[0x000000000061B018:word64] = Mem1260[0x000000000061B018:word64] + fn00000000004052D0(rdx_1271, rbx_1277, r11, fs, out rsi_1282, out rdi_1283, out r8_1060, out r9, out r10, out r11, out r12b_1288, out r14b_1289)
	branch Mem1292[0x000000000061B130:byte] == 0x00 l00000000004036B3
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> dil:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403689:
	word64 rax_1310 = Mem1292[0x000000000061AF78:word64]
	branch Mem1292[0x000000000061AF80:word64] <u rax_1310 + 0x0000000000000008 l000000000040409A
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r10:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040409A:
	_obstack_newchunk(0x000000000061AF60, 0x0000000000000008)
	rax_1310 = Mem1292[0x000000000061AF78:word64]
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r10:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004036A1:
	Mem1326[rax_1310:word64] = Mem1292[0x000000000061B018:word64]
	Mem1328[0x000000000061AF78:word64] = Mem1326[0x000000000061AF78:word64] + 0x0000000000000008
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r10:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004036B3:
	fwrite_unlocked(0x000000000041393B, 0x0000000000000001, 0x0000000000000002, Mem1292[0x000000000061A610:word64])
	Mem1308[0x000000000061B018:word64] = Mem1292[0x000000000061B018:word64] + 0x0000000000000002
	rsi_1037 = 0x0000000000000001
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r10:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004036D6:
	fn0000000000404DD0()
	word32 eax_822 = (word32) Mem716[rsp_2050 + 0x000000000000002F:byte]
	Mem823[rsp_2050 + 0x0000000000000008:word64] = 0x0000000000000000
	Mem824[rsp_2050 + 0x0000000000000010:word32] = eax_822
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004036F0:
	Mem845[rax_714:word32] = 0x00000000
	word64 rax_848 = readdir(r13_1033)
	word64 rdi_1001 = r13_1033
	rbp_143 = rax_848
	branch rax_848 == 0x0000000000000000 l0000000000403CC0
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403CC0:
	branch (word32) (uint64) Mem845[rax_714:word32] == 0x00000000 l0000000000403CF3
// DataOut: fs r10 r11 r13 r14 r15 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403CC8:
	rsi_1037 = fn0000000000405810(r14_1032, rax_848, dcgettext(0x0000000000000000, 0x00000000004139B1, 0x0000000000000005), (word32) (uint64) Mem845[rsp_2050 + 0x0000000000000010:word32], r11, r13_1033, r14_1032, r15, fs, out r8_1060, out r9, out r10, out r11, out r13_1033, out r14_1032, out r15)
	branch Mem845[rax_714:word32] == 0x0000004B l0000000000403770
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403CF3:
	branch closedir(r13_1033) != 0x00000000 l0000000000403EBC
// DataOut: fs r10 r11 r13 r14 r15 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403EBC:
	word64 r8_1214
	word64 r13_1218
	word64 r14_1219
	rsi_1037 = fn0000000000405810(r14_1032, rax_848, dcgettext(0x0000000000000000, 0x00000000004139C6, 0x0000000000000005), (word32) Mem845[rsp_2050 + 0x000000000000002F:byte], r11, r13_1033, r14_1032, r15, fs, out r8_1214, out r9, out r10, out r11, out r13_1218, out r14_1219, out r15)
// DataOut: fs r10 r11 r15 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D03:
	word64 r14_1062
	rsi_1037 = fn0000000000404E80(rsi_1037, r11, r15, out r8_1060, out r13_1061, out r14_1062, out r15)
	branch Mem845[0x000000000061B10E:byte] != 0x00 l0000000000403EAA
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403EAA:
	rsi_1037 = fn0000000000405090((byte) (word32) Mem845[rsp_2050 + 0x000000000000002F:byte], r14_1062, r11)
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D15:
	branch (word32) (uint64) Mem845[0x000000000061B150:word32] == 0x00000000 l0000000000403D2C
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D1F:
	branch Mem845[0x000000000061B144:byte] == 0x00 l0000000000403E00
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D2C:
	branch Mem845[0x000000000061B130:byte] != 0x00 l0000000000403F8D
// DataOut: fs r13 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403F8D:
	fwrite_unlocked(0x0000000000413771, 0x0000000000000001, 0x0000000000000002, Mem845[0x000000000061A610:word64])
	Mem1195[0x000000000061B018:word64] = Mem845[0x000000000061B018:word64] + 0x0000000000000002
// DataOut: fs r13 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D39:
	word64 rax_1114 = dcgettext(0x0000000000000000, 0x00000000004139DB, 0x0000000000000005)
	fputs_unlocked(rax_1114, Mem845[0x000000000061A610:word64])
	word64 rax_1121 = DPB(rax_1114, strlen(rax_1114), 0)
	word64 rdi_1122 = Mem845[0x000000000061A610:word64]
	Mem1125[0x000000000061B018:word64] = Mem845[0x000000000061B018:word64] + rax_1121
	word64 rax_1126 = Mem1125[rdi_1122 + 0x0000000000000028:word64]
	branch rax_1126 >=u Mem1125[rdi_1122 + 0x0000000000000030:word64] l00000000004044EB
// DataOut: fs r13 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004044EB:
	__overflow(rdi_1122, 0x0000000000000020)
// DataOut: fs r13 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x05 r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:0x00000005 dx:0x0005 r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D80:
	Mem1185[rdi_1122 + 0x0000000000000028:word64] = rax_1126 + 0x0000000000000001
	Mem1186[rax_1126:byte] = 0x20
// DataOut: fs r13 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x05 r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:0x00000005 dx:0x0005 r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D8B:
	word64 r8_1133 = Mem1125[0x000000000061B138:word64]
	word32 edx_1136 = (word32) (uint64) Mem1125[0x000000000061B140:word32]
	word64 rdi_1138 = Mem1125[rsp_2050 + 0x0000000000000008:word64]
	Mem1141[0x000000000061B018:word64] = Mem1125[0x000000000061B018:word64] + 0x0000000000000001
	word32 r15d_1147
	word64 rax_1148 = fn000000000040BD70(0x0000000000000200, edx_1136, rax_848, rsp_2050 + 0x00000000000000E0, rdi_1138, r8_1133, fs, out r8_1060, out r9, out r10, out r11, out r15d_1147)
	rsi_1037 = Mem1141[0x000000000061A610:word64]
	fputs_unlocked(rax_1148, rsi_1037)
	word64 rax_1157 = DPB(rax_1148, strlen(rax_1148), 0)
	word64 rdi_1158 = Mem1141[0x000000000061A610:word64]
	Mem1161[0x000000000061B018:word64] = Mem1141[0x000000000061B018:word64] + rax_1157
	word64 rax_1162 = Mem1161[rdi_1158 + 0x0000000000000028:word64]
	branch rax_1162 >=u Mem1161[rdi_1158 + 0x0000000000000030:word64] l00000000004044DC
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004044DC:
	__overflow(rdi_1158, 0x000000000000000A)
	rsi_1037 = 0x000000000000000A
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> ah:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403DED:
	Mem1178[rdi_1158 + 0x0000000000000028:word64] = rax_1162 + 0x0000000000000001
	Mem1179[rax_1162:byte] = 0x0A
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> ah:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403DF8:
	Mem1175[0x000000000061B018:word64] = Mem1161[0x000000000061B018:word64] + 0x0000000000000001
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> ah:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E00:
	branch Mem845[0x000000000061B1B0:word64] == 0x0000000000000000 l00000000004034A1
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E0E:
	rsi_1037 = fn00000000004079F0(rax_848, rsi_1037, r8_1060, r11, r15, fs, out r8_1060, out r9, out r10, out r11)
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004034A1:
	word64 rbx_767 = Mem716[rsp_2050 + 0x0000000000000018:word64]
	free(Mem716[rbx_767:word64])
	free(Mem716[rbx_767 + 0x0000000000000008:word64])
	free(rbx_767)
	Mem771[0x000000000061B0D0:byte] = 0x01
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:<invalid> dx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r11d:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004034C6:
	Mem704[rsp_2050 + 0x0000000000000018:word64] = Mem660[0x000000000061B190:word64]
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:<invalid> dx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> r11d:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040370C:
	word32 eax_892 = (word32) (uint64) Mem845[0x000000000061B108:word32]
	branch eax_892 == 0x00000002 l0000000000403C78
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040371F:
	branch Mem845[rax_848 + 0x0000000000000013:byte] == 0x2E l0000000000403C58
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C58:
	branch eax_892 == 0x00000000 l0000000000403770
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C60:
	branch Mem845[rax_848 + 0x0000000000000014 + (uint64) (Mem845[rax_848 + 0x0000000000000014:byte] == 0x2E):byte] == 0x00 l0000000000403770
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C74:
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:Test(EQ,Z) dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403729:
	branch eax_892 != 0x00000000 l0000000000403C78
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403731:
	r15 = Mem845[0x000000000061B0F8:word64]
	branch r15 != 0x0000000000000000 l0000000000403755
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403755:
	rdi_1001 = Mem845[rdi_1001:word64]
	branch fnmatch(rdi_1001, rax_848 + 0x0000000000000013, 0x0000000000000004) != 0x00000000 l0000000000403748
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403748:
	r15 = Mem845[r15 + 0x0000000000000008:word64]
	branch r15 == 0x0000000000000000 l0000000000403C78
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:0x0004 r11d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403769:
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:0x0004 r11d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040373D:
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C78:
	r15 = Mem845[0x000000000061B100:word64]
	branch r15 != 0x0000000000000000 l0000000000403C9D
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> r15:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C9D:
	rdi_1001 = Mem845[rdi_1001:word64]
	branch fnmatch(rdi_1001, rax_848 + 0x0000000000000013, 0x0000000000000004) != 0x00000000 l0000000000403C90
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C90:
	r15 = Mem845[r15 + 0x0000000000000008:word64]
	branch r15 == 0x0000000000000000 l0000000000403E20
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:0x0004 r11d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403CB1:
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:0x0004 r11d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C84:
// DataOut: fs r10 r11 r14 r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E20:
	word64 rax_922 = (uint64) ((word32) Mem845[rax_848 + 0x0000000000000012:byte] - 0x00000001)
	word64 rsi_919 = 0x0000000000000000
	byte al_926 = (byte) rax_922
	branch al_926 >u 0x0D l0000000000403E37
// DataOut: al esi fs r10 r11 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E2D:
	rsi_919 = (uint64) Mem845[DPB(rax_922, (word32) al_926, 0) * 0x0000000000000004 + 0x00412C00:word32]
// DataOut: esi fs r10 r11 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E37:
	word32 ebx_939
	word64 rsi_940
	word32 r12d_945
	word32 r13d_946
	Mem949[rsp_2050 + 0x0000000000000008:word64] = Mem845[rsp_2050 + 0x0000000000000008:word64] + fn0000000000407EA0(r14_1032, 0x00000000, rsi_919, rax_848 + 0x0000000000000013, r8_1060, r10, r11, r14_1032, r15, fs, out ebx_939, out rsi_940, out r8_1060, out r9, out r10, out r11, out r12d_945, out r13d_946)
	branch Mem949[0x000000000061B150:word32] != 0x00000001 l0000000000403770
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> dx:<invalid> r11d:<invalid> dil:<invalid> ah:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E56:
	branch Mem949[0x000000000061B148:word32] != 0xFFFFFFFF l0000000000403770
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> r11d:<invalid> dil:<invalid> r13b:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E63:
	branch Mem949[0x000000000061B144:byte] != 0x00 l0000000000403770
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> r11d:<invalid> dil:<invalid> r13b:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E70:
	branch Mem949[0x000000000061B10E:byte] != 0x00 l0000000000403770
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> r11d:<invalid> dil:<invalid> r13b:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E7D:
	word64 r8_958
	word64 rsi_962 = fn0000000000404E80(rsi_940, r11, r15, out r8_958, out r13_1033, out r14_1032, out r15)
	fn00000000004079F0(rax_848, rsi_962, r8_958, r11, r15, fs, out r8_1060, out r9, out r10, out r11)
	fn0000000000404DD0()
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> r11d:<invalid> dil:<invalid> r13b:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403770:
	rsi_1037 = fn0000000000406490()
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> r12d:<invalid> ecx:<invalid> r15:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004030A2:
	Mem3375[0x000000000061B134:word32] = (word32) (uint64) Mem356[0x000000000061B140:word32]
	Mem3377[0x000000000061A560:word64] = Mem3375[0x000000000061B138:word64]
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> bpl:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:0x40 dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004030C1:
	Mem3356[0x000000000061B146:byte] = 0x01
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004030CD:
	Mem3355[0x000000000061B150:word32] = 0x00000003
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004030DC:
	branch fn0000000000410E90(0x00000000, 0x0000000000000000, Mem356[0x000000000061A640:word64], 0x0000000000000000, out ebx_141, out r9, out r13b_3161) != 0x00000000 l0000000000403100
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004030F8:
	branch Mem356[fp - 0x0000000000000378:word64] != 0x0000000000000000 l0000000000403134
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> esi:<invalid> bpl:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> al:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403100:
	word64 r8_3331
	word64 r15_3338
	r15 = fn000000000040E930(rbx_1277, rbp_143, Mem356[0x000000000061A640:word64], r11, r12_2062, r13, r14, r15, fs, out rbx_1277, out rbp_143, out r8_3331, out r9, out r10, out r11, out r12_2062, out r13, out r14, out r15_3338)
	error(0x0000000000000002, 0x0000000000000000, dcgettext(0x0000000000000000, 0x000000000041384C, 0x0000000000000005), Mem356[fp - 0x00000000000003C0:<unknown>])
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> esi:<invalid> bpl:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> al:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403134:
	Mem3325[0x000000000061B0C8:word64] = Mem356[fp - 0x0000000000000378:word64]
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ax:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403145:
	Mem3286[0x000000000061B148:word32] = 0x00000003
	r13 = 0x0000000000000001
	r13b_3161 = 0x01 (alias)
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040315A:
	Mem3285[0x000000000061B14C:word32] = 0x00000002
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403169:
	Mem3281[0x000000000061B148:word32] = 0x00000004
	r13 = 0x0000000000000001
	r13b_3161 = 0x01 (alias)
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040317E:
	Mem3280[0x000000000061B144:byte] = 0x01
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040318A:
	Mem3279[0x000000000061B147:byte] = 0x01
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403196:
	Mem3278[0x000000000061B0F0:byte] = 0x01
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004031A2:
	Mem3277[0x000000000061B12C:word32] = 0x00000001
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004031B1:
	Mem3275[0x000000000061B150:word32] = 0x00000000
	Mem3276[0x000000000061A568:byte] = 0x00
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402B71:
	Mem3274[0x000000000061B145:byte] = 0x01
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004031C7:
	Mem3273[0x000000000061B150:word32] = 0x00000004
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402B78:
	Mem3272[0x000000000061B150:word32] = 0x00000000
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402B84:
	r14 = 0x0000000000000001
	r14b_315 = 0x01 (alias)
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402B8C:
	Mem3268[0x000000000061B114:byte] = 0x01
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402B95:
	Mem3264[0x000000000061B140:word32] = 0x000000B0
	Mem3265[0x000000000061B134:word32] = 0x000000B0
	Mem3266[0x000000000061B138:word64] = 0x0000000000000001
	Mem3267[0x000000000061A560:word64] = 0x0000000000000001
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402BC4:
	Mem3262[0x000000000061B150:word32] = 0x00000000
	Mem3263[0x000000000061A569:byte] = 0x00
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402BDA:
	Mem3240[0x000000000061B108:word32] = 0x00000002
	Mem3241[0x000000000061B148:word32] = 0xFFFFFFFF
	branch Mem356[0x000000000061B150:word32] == 0x00000000 l0000000000403C36
// DataOut: ebx fs r10 r11 r12 r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C36:
	Mem3261[0x000000000061B150:word32] = (word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond(isatty(0x0000000000000001) - 0x00000001)) + 0x00000002)
// DataOut: ebx fs r10 r11 r12 r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402BFB:
	Mem3247[0x000000000061B144:byte] = 0x00
	Mem3248[0x000000000061B129:byte] = 0x00
	r13 = 0x0000000000000001
	r13b_3161 = 0x01 (alias)
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402C14:
	Mem3237[0x000000000061B10D:byte] = 0x01
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402C20:
	Mem3236[0x000000000061B14C:word32] = 0x00000001
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402C2F:
	fn000000000040E640(0x00000005, 0x0000000000000000)
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402C40:
	Mem3230[0x000000000061B108:word32] = 0x00000002
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402C4F:
	Mem3229[0x000000000061B17D:byte] = 0x01
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402C5B:
	Mem3225[0x000000000061B148:word32] = 0x00000001
	r13 = 0x0000000000000001
	r13b_3161 = 0x01 (alias)
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402C70:
	Mem3221[0x000000000061B148:word32] = 0xFFFFFFFF
	r13 = 0x0000000000000001
	r13b_3161 = 0x01 (alias)
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402C85:
	branch fn0000000000410E90(0x00000000, 0x0000000000000000, Mem356[0x000000000061A640:word64], 0x0000000000000000, out ebx_141, out r9, out r13b_3161) != 0x00000000 l0000000000403BFD
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BFD:
	word64 r8_3199
	word64 r15_3206
	r15 = fn000000000040E930(rbx_1277, rbp_143, Mem356[0x000000000061A640:word64], r11, r12_2062, r13, r14, r15, fs, out rbx_1277, out rbp_143, out r8_3199, out r9, out r10, out r11, out r12_2062, out r13, out r14, out r15_3206)
	error(0x0000000000000002, 0x0000000000000000, dcgettext(0x0000000000000000, 0x0000000000413867, 0x0000000000000005), Mem356[fp - 0x00000000000003C0:<unknown>])
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> esi:<invalid> bpl:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> al:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402CA5:
	Mem3195[0x000000000061B0D8:word64] = Mem356[fp - 0x0000000000000378:word64]
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ax:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402CB6:
	Mem3158[0x000000000061B148:word32] = 0x00000002
	r13 = 0x0000000000000001
	r13b_3161 = 0x01 (alias)
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402CCB:
	Mem3157[0x000000000061B10E:byte] = 0x01
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402CD7:
	fn000000000040E640(0x00000003, 0x0000000000000000)
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402CE8:
	fn000000000040E640(0x00000000, 0x0000000000000000)
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402CF6:
	Mem3146[0x000000000061B110:word32] = 0x00000005
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402D05:
	r15 = Mem356[0x000000000061A640:word64]
	word64 rax_3141 = fn0000000000410C40(rbp_143, 0x0000000000000010)
	word64 rdx_3142 = Mem356[0x000000000061B100:word64]
	Mem3143[fp - 0x0000000000000380:word64] = r15
	Mem3144[rax_3141 + 0x0000000000000008:word64] = rdx_3142
	Mem3145[0x000000000061B100:word64] = rax_3141
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402D30:
	Mem3137[0x000000000061B110:word32] = 0x00000003
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402D3F:
	Mem3136[0x000000000061A568:byte] = 0x00
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402D4B:
	Mem3135[0x000000000061B12C:word32] = 0x00000003
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402D5A:
	Mem3134[0x000000000061B130:byte] = 0x01
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402D66:
	Mem3133[0x000000000061B150:word32] = 0x00000002
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402D75:
	word64 rax_3122 = fn0000000000410C40(rbp_143, 0x0000000000000010)
	word64 rdx_3123 = Mem356[0x000000000061B100:word64]
	Mem3124[rax_3122:word64] = 0x0000000000413864
	Mem3126[0x000000000061B100:word64] = rax_3122
	Mem3127[rax_3122 + 0x0000000000000008:word64] = rdx_3123
	word64 rax_3128 = fn0000000000410C40(rbp_143, 0x0000000000000010)
	word64 rdx_3129 = Mem3127[0x000000000061B100:word64]
	Mem3130[rax_3128:word64] = 0x0000000000413863
	Mem3131[rax_3128 + 0x0000000000000008:word64] = rdx_3129
	Mem3132[0x000000000061B100:word64] = rax_3128
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402DC0:
	branch Mem356[0x000000000061B108:word32] != 0x00000000 l0000000000402B30
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402DCD:
	Mem3120[0x000000000061B108:word32] = 0x00000001
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402DDC:
	branch Mem356[0x000000000061B150:word32] == 0x00000000 l0000000000402B30
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402DE9:
	Mem3117[0x000000000061B150:word32] = 0x00000001
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004031F9:
	fn0000000000409750(0x00000002)
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> bpl:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403203:
	Mem171[0x000000000061B150:word32] = 0x00000002
	fn000000000040E640(0x00000005, 0x0000000000000000)
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> eax:<invalid> sil:0x1C cl:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402DF8:
	fn0000000000409750(0x00000000)
// DataOut: r11 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402DFF:
	word64 rsi_3084
	word32 eax_3076 = (word32) (uint64) Mem356[0x000000000061A56C:word32]
	branch eax_3076 == 0x00000001 l0000000000403BF3
// DataOut: eax r11 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:0x0000000000413080 ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:0x00413080 esi:<invalid> al:<invalid> cl:0x80 r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BF3:
	rsi_3084 = 0x0000000000413807
// DataOut: r11 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402E15:
	rsi_3084 = 0x000000000041380F
	branch eax_3076 == 0x00000002 l0000000000402E26
// DataOut: r11 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402E22_1:
	rsi_3084 = 0x000000000041380E
// DataOut: r11 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x000000000041380E rsi:0x000000000041380F r12:<invalid> rdx:0x0000000000415BC8 eax:0x0041380E r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:0x380E r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:<invalid> esi:0x0041380F al:0x0E cl:<invalid> r12d:<invalid> sil:0x0F dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402E26:
	word64 rdi_3087 = Mem356[0x000000000061A610:word64]
	Mem3088[fp - 0x00000000000003B8:word64] = 0x0000000000000000
	fn0000000000410B30(0x00, 0x00000000004137FC, rsi_3084, rdi_3087, r11)
	exit(0x0000000000000000)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000415BC8 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:0x00415BC8 bpl:<invalid> ebp:<invalid> ecx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:0x5BC8 dl:0xC8 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402985:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> eax:<invalid> sil:<invalid> cl:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> esi:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> r11d:<invalid> dl:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> edi:<invalid> -944(fp):<invalid> -936(fp):<invalid> -928(fp):<invalid> -920(fp):fp - 0x0000000000000378 -905(fp):<invalid> -904(fp):<invalid> -903(fp):al -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



void fn0000000000404890(word64 rdx, word64 qwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdx
// LiveOut:
// Trashed:
// Preserved:
// Stack args: Stack +0000(64)
// Terminates process
fn0000000000404890_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000404890_entry:
// DataOut: rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404890:
	__align(fp + 0x0000000000000008)
	__libc_start_main(0x00000000004028C0, qwArg00, fp + 0x0000000000000008, 0x0000000000411E60, 0x0000000000411ED0, rdx, fp)
	__hlt()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004048C0(word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi r8 r8b r8d r8w rax rdi
// Preserved: rbp rsp
fn00000000004048C0_entry:
// DataOut: r8
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004048C0:
	branch false l00000000004048D7
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004048D7:
	branch 0x0000000000000000 == 0x0000000000000000 l00000000004048D5
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061A5FF r8:r8 - 6399480 rbp:fp - 0x0000000000000008 -8(fp):rbp

l00000000004048E1:
	word64 rsp_42
	word32 eax_43
	word64 rax_44
	word64 rbp_45
	word64 r8_46
	byte SCZO_47
	byte CZ_48
	byte SZO_49
	bool C_50
	bool Z_51
	word32 edi_52
	word64 rdi_53
	call 0x0000000000000000 (retsize: 8; depth: 8)
		uses: C_38,CZ_9,eax,edi,qwLoc08_5,r8_7,rax_35,rbp_39,rdi_41,rsp_40,SCZO_8,SZO_36,Z_37
		defs: C_50,CZ_48,eax_43,edi_52,r8_46,rax_44,rbp_45,rdi_53,rsp_42,SCZO_47,SZO_49,Z_51
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x0000000000000000 r8:r8 - 6399480 rbp:fp - 0x0000000000000008 -8(fp):rbp

l00000000004048D5:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> r8:r8 - 6399480 rbp:fp - 0x0000000000000008 -8(fp):rbp

fn00000000004048C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> r8:<invalid> rbp:rbp rdi:<invalid> -8(fp):rbp



byte fn00000000004049E0(word64 rcx, byte dl, word64 r13, word64 r14, word64 r15, ptr64 & rbxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl r13 r14 r15 rcx
// LiveOut: al ebx r10 r11 r12 r12d r8 r9 rbp rbx rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx eax ebp ebx ecx esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r14 r14b r14d r14w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rsp sp spl
// Preserved: r14
fn00000000004049E0_entry:
// DataOut: dl fs r12 r13 r14 r15 rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004049E0:
	word64 r8_101
	*r8Out = Mem0[r14:word64]
	word64 r9_104
	*r9Out = Mem0[r15:word64]
	word64 r10_102
	*r10Out = 0x0000000000000000
	word64 r11_14
	*r11Out = 0x0000000000000000
	word32 r11d_15 = 0x00000000
	byte r11b_16 = 0x00
// DataOut: dl eax ebx fs r10 r11 r11b r11d r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404A06:
	byte al_315
	byte SZO_197
	byte al_140
	word32 eax_213
	word32 eax_183
	byte al_108
	word64 rax_138 = 0x0000000000000000
	branch 0x00000000 == 0x00000002 l0000000000404A59
// DataOut: dl eax ebx fs r10 r11 r11b r11d r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404A59:
	rax_138 = DPB(rax_138, (word32) Mem0[rax_138:byte], 0) (alias)
	rcx = DPB(rcx, rax_138 - 0x0000000000000030, 0) (alias)
	branch (byte) (rax_138 - 0x0000000000000030) <=u 0x07 l0000000000404A50
// DataOut: dl eax ebx fs r10 r11 r11b r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404A50:
	word32 r11d_501 = rax_138 - 0x0000000000000030 + r11_14 * 0x0000000000000008
	*r11Out = DPB(r11_14, r11d_501, 0)
	r11b_16 = (byte) r11d_501 (alias)
	*r8Out = r8_101 + 0x0000000000000001
// DataOut: dl ebx fs r10 r11 r11b r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404A0B:
	branch true l0000000000404B20
// DataOut: dl eax ebx fs r10 r11 r11b r11d r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404B20:
	branch true l0000000000404A70
// DataOut: dl ebx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404A11:
	branch 0x00000000 == 0x00000003 l0000000000404AE0
// DataOut: dl eax ebx fs r10 r11 r11b r11d r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404AE0:
	rax_138 = DPB(rax_138, (word32) Mem0[rax_138:byte], 0) (alias)
	rcx = DPB(rcx, rax_138 - 0x0000000000000030, 0) (alias)
	byte cl_433 = (byte) (rax_138 - 0x0000000000000030)
	branch cl_433 >u 0x36 l0000000000404A65
// DataOut: al cl dl eax ebx fs r10 r11 r11b r11d r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404AF0:
	r14 = 0x0000000000000001 << cl_433
	word32 r14d_450 = (word32) r14
	branch (r14d_450 & 0x007E0000) != 0x00000000 l0000000000404B78
// DataOut: al dl eax ebx fs r10 r11 r11b r11d r12 r12d r13 r14 r14d r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404B78:
	word64 r11_473 = (uint64) (r11d_15 << 0x00000004)
	r11d_15 = rax_138 - 0x0000000000000037 + r11_473
	rax_138 = DPB(rax_138, (word32) Mem0[rax_138:byte], 0) (alias)
	*r8Out = r8_101 + 0x0000000000000001
	word64 r11_475
	*r11Out = DPB(r11_473, r11d_15, 0)
	r11b_16 = (byte) r11d_15 (alias)
	rcx = DPB(rcx, rax_138 - 0x0000000000000030, 0) (alias)
	cl_433 = (byte) (rax_138 - 0x0000000000000030) (alias)
	branch cl_433 >u 0x36 l0000000000404A65
// DataOut: al cl dl eax ebx fs r10 r11 r11b r11d r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404B95:
// DataOut: al cl dl eax ebx fs r10 r11 r11b r11d r12 r12d r13 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404AFF:
	branch (r14 & 0x0000000000000000) != 0x0000000000000000 l0000000000404AD0
// DataOut: al dl eax ebx fs r10 r11 r11b r11d r12 r12d r13 r14 r14d r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404AD0:
	word64 r11_466 = (uint64) (r11d_15 << 0x00000004)
	r11d_15 = rax_138 - 0x0000000000000057 + r11_466
	*r8Out = r8_101 + 0x0000000000000001
	word64 r11_470
	*r11Out = DPB(r11_466, r11d_15, 0)
	r11b_16 = (byte) r11d_15 (alias)
// DataOut: dl ebx fs r10 r11 r11b r11d r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404B04:
	branch (r14d_450 & 0x000003FF) == 0x00000000 l0000000000404A65
// DataOut: al dl eax ebx fs r10 r11 r11b r11d r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404A65:
	Mem400[r9_104:byte] = r11b_16
	*r10Out = r10_102 + 0x0000000000000001
	*r9Out = r9_104 + 0x0000000000000001
// DataOut: dl ebx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404B11:
	word64 r11_460 = (uint64) (r11d_15 << 0x00000004)
	r11d_15 = rax_138 - 0x0000000000000030 + r11_460
	*r8Out = r8_101 + 0x0000000000000001
	word64 r11_464
	*r11Out = DPB(r11_460, r11d_15, 0)
	r11b_16 = (byte) r11d_15 (alias)
// DataOut: dl ebx fs r10 r11 r11b r11d r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404A1A:
	branch true l0000000000404A70
// DataOut: dl ebx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404A22:
	eax_183 = (word32) Mem0[0x0000000000000000:byte]
	rax_138 = (uint64) eax_183 (alias)
	al_315 = (byte) eax_183 (alias)
	rcx = DPB(rcx, rax_138 - 0x0000000000000040, 0) (alias)
	branch (byte) (rax_138 - 0x0000000000000040) <=u 0x3E l0000000000404AA0
// DataOut: al dl eax ebx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404A2E:
	branch al_315 == 0x3F l0000000000404CB0
// DataOut: dl ebx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404CB0:
	Mem379[rcx:byte] = 0x7F
	*r10Out = r10_102 + 0x0000000000000001
	*r9Out = r9_104 + 0x0000000000000001
// DataOut: dl ebx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404A70:
	word32 eax_346 = (word32) Mem0[rax_138:byte]
	al_140 = (byte) eax_346 (alias)
	rax_138 = DPB(rax_138, eax_346, 0) (alias)
	SZO_197 = cond(al_140 - 0x3D) (alias)
	branch al_140 == 0x3D l0000000000404ABA
// DataOut: al dl ebx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404A78:
	branch SZO_197 l0000000000404B40
// DataOut: al dl ebx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404B40:
	branch al_140 == 0x00 l0000000000404B48
// DataOut: al dl ebx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404B44:
	branch al_140 != 0x3A l0000000000404B60
// DataOut: al dl ebx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404B48:
	eax_213 = 0x00000005 (alias)
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404A7E:
	branch al_140 == 0x5C l0000000000404CA0
// DataOut: al dl ebx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404CA0:
	r8_101 = r8_101 + 0x0000000000000001
// DataOut: dl ebx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404B29:
	word32 eax_238 = (word32) Mem0[rax_138:byte]
	byte al_240 = (byte) eax_238
	branch al_240 >u 0x78 l0000000000404C90
// DataOut: al dl eax ebx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404C90:
	r11_14 = (uint64) eax_238
	*r11Out = r11_14
	r11d_15 = (word32) r11_14 (alias)
	r11b_16 = (byte) r11_14 (alias)
// DataOut: dl ebx fs r10 r11 r11b r11d r12 r12d r13 r14 r15 r8 r9 rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404BD0:
	Mem276[r9_104:byte] = r11b_16
	*r10Out = r10_102 + 0x0000000000000001
	*r9Out = r9_104 + 0x0000000000000001
	eax_213 = 0x00000000 (alias)
// DataOut: dl eax ebx fs r10 r11 r11b r11d r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404BB0:
	*r8Out = r8_101 + 0x0000000000000001
	branch true l0000000000404A06
// DataOut: dl eax ebx fs r10 r11 r11b r11d r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404BBD:
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404B4D:
	al_108 = eax_213 != 0x00000006
// DataOut: al fs r10 r11 r13 r14 r15 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404B35:
	word32 ecx_243 = (word32) al_240
	word64 rcx_244 = DPB(rcx, ecx_243, 0)
	word64 rsp_245
	word64 r14_246
	word64 r8_247
	word32 eax_248
	word64 rax_249
	byte SZO_250
	bool C_251
	word64 r9_252
	word64 r15_253
	word32 r10d_254
	word64 r10_255
	word32 r11d_256
	word64 r11_257
	word64 r12_258
	word64 rbp_259
	word64 rcx_260
	word64 rbx_261
	word32 ebx_262
	byte SCZO_263
	bool Z_264
	byte CZ_265
	word32 ecx_266
	byte cl_267
	byte al_268
	word64 r13_269
	byte r11b_270
	byte dl_271
	word32 r14d_272
	call Mem0[rcx_244 * 0x0000000000000008 + 0x00411F40:word64] (retsize: 8; depth: 40)
		uses: al_240,C_236,cl_228,CZ_242,dl,eax_238,ebx_32,ecx_243,qwLoc08_4,qwLoc10_21,qwLoc18_25,qwLoc20_30,r10_231,r10d_232,r11_224,r11b_223,r11d_225,r12_22,r13,r14_237,r14d_222,r15,r8_230,r9_233,rax_239,rbp_27,rbx_31,rcx_244,rsp_28,SCZO_241,SZO_235,Z_229
		defs: al_268,C_251,cl_267,CZ_265,dl_271,eax_248,ebx_262,ecx_266,r10_255,r10d_254,r11_257,r11b_270,r11d_256,r12_258,r13_269,r14_246,r14d_272,r15_253,r8_247,r9_252,rax_249,rbp_259,rbx_261,rcx_260,rsp_245,SCZO_263,SZO_250,Z_264
	return al_268
// DataOut: al ebx fs r10 r11 r12 r12d r13 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14

l0000000000404A86:
	branch al_140 != 0x5E l0000000000404B60
// DataOut: al dl ebx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404A8E:
	eax_183 = (word32) Mem0[rax_138:byte]
	rax_138 = DPB(rax_138, eax_183, 0) (alias)
	r8_101 = r8_101 + 0x0000000000000001
	*r8Out = r8_101
	al_315 = (byte) eax_183 (alias)
	rcx = DPB(rcx, rax_138 - 0x0000000000000040, 0) (alias)
	branch (byte) (rax_138 - 0x0000000000000040) >u 0x3E l0000000000404A2E
// DataOut: al dl eax ebx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404A9E:
// DataOut: dl eax ebx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404AA0:
	word64 rax_185 = (uint64) (eax_183 & 0x0000001F)
	Mem190[rcx:byte] = (byte) rax_185
	word32 eax_191 = (word32) Mem190[rax_185:byte]
	al_140 = (byte) eax_191 (alias)
	r8_101 = r8_101 + 0x0000000000000001
	*r8Out = r8_101
	*r10Out = r10_102 + 0x0000000000000001
	rax_138 = DPB(rax_185, eax_191, 0) (alias)
	*r9Out = r9_104 + 0x0000000000000001
	SZO_197 = cond(al_140 - 0x3D) (alias)
	branch al_140 != 0x3D l0000000000404A78
// DataOut: al dl ebx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404ABA:
	branch dl == 0x00 l0000000000404B60
// DataOut: al dl ebx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404B60:
	Mem144[rcx:byte] = al_140
	*r8Out = r8_101 + 0x0000000000000001
	*r10Out = r10_102 + 0x0000000000000001
	*r9Out = r9_104 + 0x0000000000000001
// DataOut: dl ebx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404AC2:
	al_108 = 0x01 (alias)
// DataOut: al fs r10 r11 r13 r14 r15 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404A36:
	al_108 = 0x00 (alias)
// DataOut: al fs r10 r11 r13 r14 r15 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64) Local -0010(64) Local -0018(64) Local -0020(64)

l0000000000404A38:
	Mem112[r15:word64] = r9_104
	Mem113[r14:word64] = r8_101
	Mem114[r13:word64] = r10_102
	word64 rbx_116
	*rbxOut = rbx
	word64 rbp_119
	*rbpOut = rbp
	word64 r12_121
	*r12Out = r12
	word64 rsp_124
	*rspOut = fp
	return al_108
// DataOut: al ebx fs r10 r11 r12 r12d r13 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> al:Test(NE,Z) r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14

fn00000000004049E0_exit:
// DataOut: al ebx r10 r11 r12 r12d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> al:Test(NE,Z) r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14



word32 fn0000000000404CD0(word32 edi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi
// LiveOut: al eax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000404CD0_entry:
// DataOut: ebx edi fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404CD0:
	word64 rdi_3 = (uint64) edi
	word32 eax_33 = 0x00000000
	word64 rdx_9 = Mem0[(rdi_3 << 0x0000000000000004) + 0x000000000061A3E0:word64]
	word64 rsi_10 = Mem0[(rdi_3 << 0x0000000000000004) + 0x000000000061A3E8:word64]
	*rsiOut = rsi_10
	branch rdx_9 == 0x0000000000000000 l0000000000404CFC
// DataOut: al eax ebx fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404CEB:
	branch rdx_9 == 0x0000000000000001 l0000000000404D10
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

l0000000000404D10:
	return (word32) (Mem0[rsi_10:byte] != 0x30)
// DataOut: al eax ebx fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

l0000000000404CF1:
	bool Z_42 = (bool) cond(rdx_9 - 0x0000000000000002)
	eax_33 = 0x00000001 (alias)
	branch rdx_9 == 0x0000000000000002 l0000000000404D00
// DataOut: al eax ebx fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

l0000000000404D00:
	word64 rdi_46 = 0x0000000000413733
	word64 rcx_48 = 0x0000000000000002
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:0x0000000000000001 rdx:<invalid> rsi:<invalid>

l0000000000404D0A:
	branch rcx_48 == 0x0000000000000000 l0000000000404D0C
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x0000000000000001 rdx:<invalid> rsi:<invalid> rcx:<invalid>

l0000000000404D0A_1:
	Z_42 = (bool) cond(Mem0[rsi_85:byte] - Mem0[rdi_86:byte]) (alias)
	*rsiOut = rsi_85 + 0x0000000000000001
	rdi_46 = rdi_86 + 0x0000000000000001
	rcx_48 = rcx_48 - 0x0000000000000001
	word64 rsi_85 = rsi_10
	word64 rdi_86 = rdi_46
	branch Mem0[rsi_85:byte] != Mem0[rdi_86:byte] l0000000000404D0A
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x0000000000000001 rdx:<invalid> rsi:<invalid> rcx:<invalid>

l0000000000404D0C:
	return DPB(0x00000001, Z_42, 0)
// DataOut: al eax ebx fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x0000000000000001 rdx:<invalid> rsi:<invalid> rcx:<invalid>

l0000000000404CFC:
	return eax_33
// DataOut: al eax ebx fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

fn0000000000404CD0_exit:
// DataOut: al eax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:Test(NE,Z) rcx:<invalid>



word64 fn0000000000404D20(word32 edx, word64 rsi, word64 rdi, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edx r11 rdi rsi
// LiveOut: rsi
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: r12 r13 rbp rbx rsp
fn0000000000404D20_entry:
// DataOut: dl edx fs r10 r11 r13d r14d r15 r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404D20:
	byte r13b_8 = (byte) (uint64) edx
	word64 rax_25 = fn0000000000410C40(rsi, 0x0000000000000020)
	word64 rax_27 = 0x0000000000000000
	branch rsi == 0x0000000000000000 l0000000000404D4F
// DataOut: fs r10 r11 r12 r13b r14d r15 r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(32)

l0000000000404D47:
	rax_27 = fn0000000000410E30(rsi, out rsi)
// DataOut: fs r10 r11 r13b r14d r15 r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:(uint64) edx r12:rsi rbp:rdi rdi:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(32)

l0000000000404D4F:
	Mem35[rax_25 + 0x0000000000000008:word64] = rax_27
	word64 rax_36 = 0x0000000000000000
	branch rdi == 0x0000000000000000 l0000000000404D62
// DataOut: fs r10 r11 r13b r14d r15 r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:(uint64) edx r12:rsi rbp:rdi rdi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(32)

l0000000000404D5A:
	rax_36 = fn0000000000410E30(rdi, out rsi)
// DataOut: fs r10 r11 r13b r14d r15 r8 r9 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:(uint64) edx r12:rsi rbp:rdi rdi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(32)

l0000000000404D62:
	Mem45[rax_25:word64] = rax_36
	word64 rax_46 = Mem45[0x000000000061B190:word64]
	Mem47[r11 + 0x0000000000000010:byte] = r13b_8
	Mem49[0x000000000061B190:word64] = rax_25
	Mem50[rax_25 + 0x0000000000000018:word64] = rax_46
	return rsi
// DataOut: fs r10 r11 r13d r14d r15 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:(uint64) edx r12:rsi rbp:rdi rdi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

fn0000000000404D20_exit:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r13:r13 r12:r12 rbp:rbp rdi:<invalid> rbx:rbx rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13



void fn0000000000404D90(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO di dil edi rdi
// Preserved: rbx rsp
fn0000000000404D90_entry:
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r14d r15 r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404D90:
	free(Mem0[rdi:word64])
	free(Mem0[rdi + 0x0000000000000008:word64])
	word64 rdi_10 = Mem0[rdi + 0x00000000000000A8:word64]
	branch rdi_10 == 0x000000000061A56A l0000000000404DC0
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r14d r15 r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404DC0:
	return
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r14d r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rdi:<invalid> -8(fp):rbx

l0000000000404DB5:
	freecon(rdi_10)
	return
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r14d r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rdi:<invalid> -8(fp):rbx

fn0000000000404D90_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rdi:<invalid> -8(fp):rbx



void fn0000000000404DD0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi rax rdi
// Preserved: rbx rsp
fn0000000000404DD0_entry:
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404DD0:
	word64 rbx_32 = 0x0000000000000000
	branch Mem0[0x000000000061B1B0:word64] == 0x0000000000000000 l0000000000404DFD
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404DDD:
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> -8(fp):rbx

l0000000000404DE0:
	fn0000000000404D90(Mem0[Mem0[0x000000000061B1A8:word64] + rbx_32 * 0x0000000000000008:word64])
	rbx_32 = rbx_32 + 0x0000000000000001
	branch Mem0[0x000000000061B1B0:word64] >u rbx_32 l0000000000404DE0
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rax:<invalid> rdi:<invalid> -8(fp):rbx

l0000000000404DFD:
	Mem18[0x000000000061B1B0:word64] = 0x0000000000000000
	Mem19[0x000000000061B17C:byte] = 0x00
	Mem20[0x000000000061B178:word32] = 0x00000000
	Mem21[0x000000000061B174:word32] = 0x00000000
	Mem22[0x000000000061B170:word32] = 0x00000000
	Mem23[0x000000000061B168:word32] = 0x00000000
	Mem24[0x000000000061B164:word32] = 0x00000000
	Mem25[0x000000000061B160:word32] = 0x00000000
	Mem26[0x000000000061B16C:word32] = 0x00000000
	Mem27[0x000000000061B15C:word32] = 0x00000000
	Mem28[0x000000000061B158:word32] = 0x00000000
	Mem29[0x000000000061B154:word32] = 0x00000000
	return
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rax:<invalid> rdi:<invalid> -8(fp):rbx

fn0000000000404DD0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rax:<invalid> rdi:<invalid> -8(fp):rbx



word64 fn0000000000404E80(word64 rsi, word64 r11, word64 r15, ptr64 & r8Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r15 rsi
// LiveOut: r13 r13d r14 r15 r8 rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w rax rcx rdi rdx rsi si sil
// Preserved: rbp rbx rsp
fn0000000000404E80_entry:
	*r8Out = r8
	*r13Out = r13
	*r14Out = r14
	*r15Out = r15
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404E80:
	word64 rbx_10 = Mem0[0x000000000061B1B0:word64]
	word64 rbp_12 = rbx_10
	branch (rbx_10 >>u 0x0000000000000001) + rbx_10 >u Mem0[0x000000000061B1A0:word64] l0000000000404F98
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404F98:
	word64 rdi_224 = Mem0[0x000000000061B1A8:word64]
	free(rdi_224)
	branch rbx_10 >u 0x00000000AAAAAAAA l0000000000404FF8
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404FF8:
	fn0000000000410E50()
	word64 rsi_237 = Mem0[rsi:word64]
	strcmp(Mem0[rdi_224:word64], rsi_237)
	return rsi_237
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:0x00000000AAAAAAAA rbp:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404FB3:
	word64 rax_232 = fn0000000000410C40(rsi, rbx_10 * 0x0000000000000018)
	rbp_12 = Mem0[0x000000000061B1B0:word64]
	Mem234[0x000000000061B1A8:word64] = rax_232
	Mem236[0x000000000061B1A0:word64] = rbp_12 * 0x0000000000000003
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:0x00000000AAAAAAAA rbp:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404EA6:
	branch rbp_12 == 0x0000000000000000 l0000000000404ED3
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404EAB:
	word64 rax_205 = Mem0[0x000000000061B1A8:word64]
	word64 rdx_209 = Mem0[0x000000000061B1C0:word64]
	word64 rcx_211 = rax_205 + rbp_12 * 0x0000000000000008
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rax rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404EC0:
	Mem215[rax_205:word64] = rdx_209
	rax_205 = rax_205 + 0x0000000000000008
	rdx_209 = rdx_209 + 192
	branch rax_205 != rcx_211 l0000000000404EC0
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rax rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404ED3:
	branch Mem0[0x000000000061B148:word32] == 0xFFFFFFFF l0000000000404F8C
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404EE0:
	word64 rsi_127
	word32 ecx_120
	word64 rdi_115
	branch _setjmp(0x000000000061A680) == 0x00000000 l0000000000404F40
// DataOut: al fs r10 r11 r15 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F40:
	ecx_120 = (word32) (uint64) Mem0[0x000000000061B148:word32] (alias)
	rsi_127 = Mem0[0x000000000061B1B0:word64]
	rdi_115 = Mem0[0x000000000061B1A8:word64]
// DataOut: al ecx edi fs r10 r11 r15 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:0x000000000061A680 eax:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404EEE:
	r8 = (uint64) Mem0[0x000000000061B148:word32]
	word32 r8d_156 = (word32) r8
	branch r8d_156 == 0x00000003 l0000000000404FDF
// DataOut: fs r10 r11 r15 r8d r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:0x000000000061A680 eax:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404FDF:
	__assert_fail(0x000000000041373F, 0x0000000000413736, 0x0000000000000DDB, 0x0000000000412C95)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:0x000000000061A680 eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404EFF:
	rsi_127 = Mem0[0x000000000061B1B0:word64]
	rdi_115 = Mem0[0x000000000061B1A8:word64]
	branch rsi_127 == 0x0000000000000000 l0000000000404F33
// DataOut: edi fs r10 r11 r15 r8d r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:0x000000000061A680 eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F12:
	word64 rdx_176 = Mem0[0x000000000061B1C0:word64]
	word64 rcx_178 = rdi_115 + rsi_127 * 0x0000000000000008
	word64 rax_180 = rdi_115
// DataOut: edi fs r10 r11 r15 r8d r9 rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F20:
	Mem186[rax_180:word64] = rdx_176
	rax_180 = rax_180 + 0x0000000000000008
	rdx_176 = rdx_176 + 192
	branch rax_180 != rcx_178 l0000000000404F20
// DataOut: edi fs r10 r11 r15 r8d r9 rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F33:
	ecx_120 = (word32) (uint64) r8d_156 (alias)
// DataOut: al ecx edi fs r10 r11 r15 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F54:
	branch ecx_120 != 0x00000004 l0000000000404F60
// DataOut: al ecx edi edx fs r10 r11 r15 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> r8:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F59_1:
// DataOut: al ecx edi edx fs r10 r11 r15 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> r8:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F60:
	word64 r8_137 = DPB(r8, (word32) Mem0[0x000000000061B10C:byte], 0)
	*r8Out = r8_137
	word64 r13_148
	word64 r14_149
	word64 r15_150
	rsi = fn000000000040D690(rsi_127, rdi_115, r8_137, r11, r15, out r13_148, out r14_149, out r15_150)
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F8C:
	return rsi
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> eax:<invalid> rsi:<invalid> edx:<invalid> ax:<invalid> r8d:<invalid> r8:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> r15:<invalid> -16(fp):rbx -8(fp):rbp

fn0000000000404E80_exit:
// DataOut: r13 r13d r14 r15 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:rbx rax:<invalid> rbp:rbp rdx:<invalid> rcx:<invalid> edx:<invalid> ax:<invalid> r8d:<invalid> r8:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> r15:<invalid> -16(fp):rbx -8(fp):rbp



word64 fn0000000000405090(byte sil, word64 rdi, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 rdi sil
// LiveOut: rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r14 r14b r14d r14w rax rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn0000000000405090_entry:
// DataOut: fs r10 r11 r13d r8 r9 rdi rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405090:
	word32 r14d_106 = (word32) sil
	branch rdi == 0x0000000000000000 l00000000004050C0
// DataOut: fs r10 r11 r13 r14d r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(32)

l00000000004050AA:
	branch Mem0[0x000000000061B1C8:word64] == 0x0000000000000000 l00000000004050C0
// DataOut: fs r10 r11 r13 r14d r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004050B4:
	rsi = fn0000000000404D20(0x00000000, rdi, 0x0000000000000000, r11)
// DataOut: fs r10 r11 r13 r14d r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004050C0:
	word64 rbx_45 = Mem0[0x000000000061B1B0:word64]
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405108:
	branch rbx_45 == 0x0000000000000000 l00000000004051A8
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004051A8:
	word64 rdx_195
	word64 rdi_181 = Mem0[0x000000000061B1B0:word64]
	branch rdi_181 == 0x0000000000000000 l00000000004051F7
// DataOut: fs r10 r11 r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004051F7:
	rdx_195 = 0x0000000000000000
// DataOut: fs r10 r11 r8 r9 rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004051B4:
	rsi = Mem0[0x000000000061B1A8:word64]
	rdx_195 = 0x0000000000000000
	word64 rax_220 = 0x0000000000000000
// DataOut: fs r10 r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004051C0:
	word64 rcx_227 = Mem0[rsi + rax_220 * 0x0000000000000008:word64]
	Mem230[rsi + rdx_195 * 0x0000000000000008:word64] = rcx_227
	rax_220 = rax_220 + 0x0000000000000001
	rdx_195 = rdx_195 + DPB(rcx_227, (word32) (Mem0[rcx_227 + 0x00000000000000A0:word32] != 0x00000009), 0)
	branch rax_220 != rdi_181 l00000000004051C0
// DataOut: fs r10 r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004051E1:
	Mem200[0x000000000061B1B0:word64] = rdx_195
	return rsi
// DataOut: fs r10 r11 r13d r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000405090_exit:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r14d:<invalid> r13:r13 rbx:rbx r12:r12 rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> cl:<invalid> ecx:<invalid> rbp:rbp r14:r14 r15:r15 edx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000405111:
	word64 rbp_71 = Mem0[Mem0[0x000000000061B1A8:word64]:word64]
	word32 eax_73 = (word32) (uint64) Mem0[rbp_71 + 0x00000000000000A0:word32]
	branch eax_73 == 0x00000009 l000000000040512C
// DataOut: eax fs r10 r11 r12 r13 r14d r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405127:
	branch eax_73 != 0x00000003 l0000000000405100
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l000000000040512C:
	word64 r15_99 = Mem0[rdi:word64]
	branch rdi == 0x0000000000000000 l00000000004050E2
// DataOut: fs r10 r11 r12 r13 r14d r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405135:
	word64 rax_135 = fn000000000040A390(r15_99, out rsi)
	branch Mem0[rax_135:byte] != 0x2E l00000000004050D8
// DataOut: fs r10 r11 r12 r13 r14d r15 r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405142:
	byte al_173 = (byte) (word32) Mem0[rax_135 + 0x0000000000000001 + (uint64) (Mem0[rax_135 + 0x0000000000000001:byte] == 0x2E):byte]
	branch al_173 == 0x2F l0000000000405100
// DataOut: al fs r10 r11 r12 r13 r14d r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405154:
	branch al_173 == 0x00 l0000000000405100
// DataOut: fs r10 r11 r12 r13 r14d r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> dl:Test(EQ,Z) eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405158:
// DataOut: fs r10 r11 r12 r13 r14d r15 r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> dl:Test(EQ,Z) eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004050D8:
	branch Mem0[r15_99:byte] != 0x2F l0000000000405160
// DataOut: fs r10 r11 r12 r13 r14d r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405160:
	word64 rax_155 = fn000000000040A610(0x0000000000000000, r15_99, rdi, out r14d_106)
	rsi = fn0000000000404D20((word32) (uint64) r14d_106, Mem0[rbp_71 + 0x0000000000000008:word64], rax_155, r11)
	free(rax_155)
	branch Mem0[rbp_71 + 0x00000000000000A0:word32] != 0x00000009 l0000000000405100
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004050E2:
	rsi = fn0000000000404D20((word32) (uint64) r14d_106, Mem0[rbp_71 + 0x0000000000000008:word64], r15_99, r11)
	branch Mem0[rbp_71 + 0x00000000000000A0:word32] == 0x00000009 l0000000000405194
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405194:
	fn0000000000404D90(rbp_71)
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> dl:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004050FE:
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> dl:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405100:
	rbx_45 = rbx_45 - 0x0000000000000001
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)



void fn0000000000405200(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rbp rbx rsp
fn0000000000405200_entry:
// DataOut: fs r11 r13 r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405200:
	word64 rbx_11 = rdi
	branch rdi <u rsi l000000000040526B
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040526B:
	word64 rcx_116 = Mem0[0x000000000061B0D8:word64]
	branch rcx_116 != 0x0000000000000000 l0000000000405220
// DataOut: fs r11 r13 r15 rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405220:
	word64 rsi_96 = rbx_11 + 0x0000000000000001
	branch (uint64) ((uint128) (uint64) rsi /u rcx_116) <=u (uint64) ((uint128) ((uint64) rsi_96) /u rcx_116) l00000000004052A8
// DataOut: fs r11 r13 r15 rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l00000000004052A8:
	rbx_11 = rsi_96
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040523C:
	word64 rdi_110 = Mem0[0x000000000061A610:word64]
	word64 rax_111 = Mem0[rdi_110 + 0x0000000000000028:word64]
	branch rax_111 >=u Mem0[rdi_110 + 0x0000000000000030:word64] l00000000004052B9
// DataOut: fs r11 r13 r15 rax rbp rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l00000000004052B9:
	__overflow(rdi_110, 0x0000000000000009)
	rcx_116 = Mem0[0x000000000061B0D8:word64]
// DataOut: fs r11 r13 r15 rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040524D:
	Mem129[rdi_110 + 0x0000000000000028:word64] = rax_111 + 0x0000000000000001
	Mem130[rax_111:byte] = 0x09
// DataOut: fs r11 r13 r15 rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405258:
	rbx_11 = rbx_11 + rcx_116 - (uint64) ((uint128) ((uint64) rbx_11) % rcx_116)
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405277:
	rbx_11 = rbx_11 + 0x0000000000000001
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040527B:
	word64 rdi_78 = Mem0[0x000000000061A610:word64]
	word64 rdx_79 = Mem0[rdi_78 + 0x0000000000000028:word64]
	branch rdx_79 >=u Mem0[rdi_78 + 0x0000000000000030:word64] l00000000004052AD
// DataOut: fs r11 r13 r15 rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l00000000004052AD:
	__overflow(rdi_78, 0x0000000000000020)
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405266:
	branch rsi <=u rbx_11 l000000000040529C
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rax:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040528C:
	Mem87[rdi_78 + 0x0000000000000028:word64] = rdx_79 + 0x0000000000000001
	Mem88[rdx_79:byte] = 0x20
	branch rsi >u rbx_11 l000000000040526B
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405211:
// DataOut: fs r11 r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:rdi -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040529C:
	return
// DataOut: fs r11 r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> -16(fp):rbx -8(fp):rbp

fn0000000000405200_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> -16(fp):rbx -8(fp):rbp



word64 fn00000000004052D0(word64 rdx, word64 rsi, word64 r11, selector fs, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12bOut, ptr64 & r14bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdx rsi
// LiveOut: r10 r11 r12b r14b r8 r9 rax rdi rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn00000000004052D0_entry:
// DataOut: fs r11 rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004052D0:
	word64 r9_48
	word64 r10_49
	word64 r11_50
	word64 r8_47
	word64 rax_51 = fn000000000040E6F0(0xFFFFFFFFFFFFFFFF, rsi, 0x0000000000002000, fp + 0xFFFFFFFFFFFFDFB8, rdx, r11, fs, out r8_47, out r9_48, out r10_49, out r11_50)
	Mem57[fp + 0xFFFFFFFFFFFFDF90:word64] = fp + 0xFFFFFFFFFFFFDFB8
	word64 rsi_22
	*rsiOut = 0x0000000000002000
	word64 rdi_255
	*rdiOut = fp + 0xFFFFFFFFFFFFDFB8
	word64 rbx_304 = rax_51
	word64 rax_54 = fp + 0xFFFFFFFFFFFFDFB8
	branch rax_51 >u 0x0000000000001FFF l0000000000405590
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405590:
	Mem536[fp + 0xFFFFFFFFFFFFDF90:word64] = fp - 0x0000000000002088 - (rax_51 + 0x000000000000001F & 0xFFFFFFFFFFFFFFF0) + 0x000000000000000F
	Mem538[fp + 0xFFFFFFFFFFFFDF90:word64] = Mem536[fp + 0xFFFFFFFFFFFFDF90:word64] & 0xFFFFFFFFFFFFFFF0
	rdi_255 = Mem538[fp + 0xFFFFFFFFFFFFDF90:word64]
	*rdiOut = rdi_255
	*rsiOut = rax_51 + 0x0000000000000001
	word64 r9_544
	word64 r10_545
	word64 r11_546
	rax_54 = fn000000000040E6F0(0xFFFFFFFFFFFFFFFF, rsi, rax_51 + 0x0000000000000001, rdi_255, rdx, r11_50, fs, out r8_47, out r9_544, out r10_545, out r11_546)
// DataOut: fs r10 r11 r12 r13 r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):fp + 0xFFFFFFFFFFFFDFB8 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405343:
	word64 rdx_204 = rsi
	branch Mem57[0x000000000061B0F0:byte] != 0x00 l0000000000405412
// DataOut: fs r10 r11 r12 r13 r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405412:
	word64 rax_229 = DPB(rax_54, __ctype_get_mb_cur_max(), 0)
	branch rax_229 <=u 0x0000000000000001 l00000000004055D1
// DataOut: fs r10 r11 r13 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004055D1:
	word64 r14_475 = Mem57[rdx + 0xFFFFFFFFFFFFDF98:word64]
	word64 r12_477 = r14_475 + rax_51
	branch r14_475 >=u r12_477 l0000000000405602
// DataOut: fs r10 r11 r12 r14 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r9:<invalid> r15:<invalid> r12:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004055E1:
	word64 rax_500 = __ctype_b_loc()
	word64 rdx_504 = r14_475
// DataOut: fs r10 r11 r12 r8 r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004055E9:
	rsi_22 = DPB(rsi_22, (word32) Mem57[rdx_504:byte], 0) (alias)
	*rsiOut = rsi_22
	branch (Mem57[Mem57[rax_500:word64] + 0x0000000000000001 + rsi_22 * 0x0000000000000002:byte] & 0x40) != 0x00 l00000000004055F9
// DataOut: fs r10 r11 r12 r8 r9 rax rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004055F6:
	Mem526[rdx_504:byte] = 0x3F
// DataOut: fs r10 r11 r12 r8 r9 rax rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004055F9:
	rdx_504 = rdx_504 + 0x0000000000000001
	branch rdx_504 != r12_477 l00000000004055E9
// DataOut: fs r10 r11 r12 r8 r9 rax rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405602:
	r12 = rax_51
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405421:
	word64 r15_232 = Mem57[rdx + 0xFFFFFFFFFFFFDF98:word64]
	word64 r13_233 = r15_232 + rax_51
	branch r15_232 >=u r13_233 l0000000000405612
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r9:<invalid> r15:<invalid> r12:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405612:
	rbx_304 = 0x0000000000000000
	r12 = 0x0000000000000000
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r9:<invalid> r12:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405435:
	word64 rbx_236 = r15_232
	r12 = 0x0000000000000000
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r9:<invalid> r12:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405440:
	word32 eax_270 = (word32) Mem57[rdi_255:byte]
	rax_229 = DPB(rax_229, eax_270, 0) (alias)
	byte al_272 = (byte) eax_270
	branch al_272 > 0x3F l0000000000405520
// DataOut: al fs r10 r11 r12 r13 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405520:
	branch al_272 < 0x41 l0000000000405460
// DataOut: al fs r10 r11 r12 r13 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405528:
	branch al_272 <= 0x5F l0000000000405538
// DataOut: al fs r10 r11 r12 r13 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040552C:
	branch (byte) (rax_229 - 0x0000000000000061) >u 0x1D l0000000000405460
// DataOut: al fs r10 r11 r12 r13 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040544C:
	branch al_272 >= 0x25 l0000000000405538
// DataOut: al fs r10 r11 r12 r13 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405454:
	branch (byte) (rax_229 - 0x0000000000000020) <=u 0x03 l0000000000405538
// DataOut: al fs r10 r11 r12 r13 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405538:
	Mem446[rbx_236:byte] = al_272
	r15_232 = r15_232 + 0x0000000000000001
	r12 = r12 + 0x0000000000000001
	rbx_236 = rbx_236 + 0x0000000000000001
	branch r15_232 <u r13_233 l0000000000405440
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040554F:
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405460:
	Mem313[fp + 0xFFFFFFFFFFFFDFA8:word64] = 0x0000000000000000
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405470:
	rax_229 = DPB(rax_229, mbrtowc(fp + 0xFFFFFFFFFFFFDFA4, r15_232, r13_233 - r15_232, fp + 0xFFFFFFFFFFFFDFA8), 0) (alias)
	rdi_255 = fp + 0xFFFFFFFFFFFFDFA4
	*rdiOut = rdi_255
	word64 rsi_334 = r15_232
	*rsiOut = rsi_334
	word64 r14_342 = rax_229
	branch rax_229 == 0xFFFFFFFFFFFFFFFF l0000000000405551
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405551:
	Mem432[rbx_236:byte] = 0x3F
	r15_232 = r15_232 + 0x0000000000000001
	r12 = r12 + 0x0000000000000001
	rbx_236 = rbx_236 + 0x0000000000000001
	branch r15_232 <u r13_233 l0000000000405440
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405569:
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405499:
	branch rax_229 == 0xFFFFFFFFFFFFFFFE l000000000040556B
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040556B:
	Mem423[rbx_236:byte] = 0x3F
	r15_232 = r13_233
	r12 = r12 + 0x0000000000000001
	rbx_236 = rbx_236 + 0x0000000000000001
	branch r13_233 <u r13_233 l0000000000405440
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405582:
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004054A3:
	word64 rdi_346 = (uint64) Mem313[fp + 0xFFFFFFFFFFFFDFA4:word32]
	branch rax_229 != 0x0000000000000000 l00000000004054B5
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004054B1_1:
	r14_342 = 0x0000000000000001
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:0x0000000000000001 rbx:<invalid> eax:0x00000001 r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:0x0001 r11:<invalid> al:0x01 cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004054B5:
	word32 eax_354 = wcwidth(rdi_346)
	rax_229 = DPB(0x0000000000000001, eax_354, 0) (alias)
	byte al_356 = (byte) eax_354
	branch eax_354 < 0x00000000 l0000000000405510
// DataOut: al fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:0x0000000000000001 rbx:<invalid> eax:0x00000001 r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:0x0001 r11:<invalid> al:0x01 cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405510:
	Mem412[rbx_236:byte] = 0x3F
	r15_232 = r15_232 + r14_342
	r12 = r12 + 0x0000000000000001
	rbx_236 = rbx_236 + 0x0000000000000001
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004054BE:
	word64 rsi_386 = r15_232 + r14_342
	*rsiOut = rsi_386
	word64 rdx_388 = rbx_236
// DataOut: al fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004054C8:
	rdx_388 = rdx_388 + 0x0000000000000001
	Mem403[rdx_388 - 0x0000000000000001:byte] = (byte) (word32) Mem313[rdi_346 - 0x0000000000000001:byte]
	r15_232 = r15_232 + 0x0000000000000001
	branch r15_232 != rsi_386 l00000000004054C8
// DataOut: al fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> ecx:<invalid> r9:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004054DD:
	rax_229 = DPB(rax_229, (int16) al_356, 0) (alias)
	rbx_236 = rbx_236 + r14_342
	r12 = r12 + rax_229
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> ecx:<invalid> r9:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004054E5:
	rdi_255 = fp + 0xFFFFFFFFFFFFDFA8
	*rdiOut = rdi_255
	branch mbsinit(fp + 0xFFFFFFFFFFFFDFA8) == 0x00000000 l0000000000405470
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> ecx:<invalid> ax:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004054F9:
	branch r15_232 <u r13_233 l0000000000405440
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> ecx:<invalid> ax:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405502:
	rbx_304 = rbx_236 - Mem57[fp + 0xFFFFFFFFFFFFDF90:word64]
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r15:<invalid> r12:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405350:
	branch Mem57[fp + 0xFFFFFFFFFFFFDF88:word64] == 0x0000000000000000 l0000000000405379
// DataOut: fs r10 r11 r12 r13 r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040535A:
	branch DPB(rax_54, __ctype_get_mb_cur_max(), 0) <=u 0x0000000000000001 l00000000004053CD
// DataOut: fs r10 r11 r13 r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004053CD:
	word64 r14_186 = Mem57[rdx + 0xFFFFFFFFFFFFDF98:word64]
	word64 r13_188 = r14_186 + rax_51
	branch r14_186 >=u r13_188 l000000000040560A
// DataOut: fs r10 r11 r13 r14 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r9:<invalid> r15:<invalid> r12:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040560A:
	r12 = 0x0000000000000000
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r9:<invalid> r15:<invalid> r12:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004053E1:
	r12 = 0x0000000000000000
	word64 rcx_197 = Mem57[__ctype_b_loc():word64]
	word64 rax_200 = r14_186
// DataOut: fs r10 r11 r12 r13 r8 r9 rax rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r9:<invalid> r15:<invalid> r12:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004053F0:
	rdx_204 = DPB(rdx_204, (word32) Mem57[rax_200:byte], 0) (alias)
	r12 = r12 - 0xFF - (((word16) ((word32) Mem57[rcx_197 + rdx_204 * 0x0000000000000002:word16]) & 0x4000) <u 0x0001)
	rax_200 = rax_200 + 0x0000000000000001
	branch rax_200 != r13_188 l00000000004053F0
// DataOut: fs r10 r11 r12 r13 r8 r9 rax rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> edx:<invalid> dx:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040540D:
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> edx:<invalid> dx:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405365:
	word64 rsi_179
	word64 rdi_180
	r12 = (int64) fn000000000040D240(0x00000000, rax_51, Mem57[fp + 0xFFFFFFFFFFFFDF90:word64], fs, out rsi_179, out rdi_180)
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r9:<invalid> r15:<invalid> r12:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405379:
	word64 rcx_100 = Mem57[fp + 0xFFFFFFFFFFFFDF80:word64]
	branch rcx_100 == 0x0000000000000000 l0000000000405399
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405385:
	word64 rdi_150 = Mem57[fp + 0xFFFFFFFFFFFFDF90:word64]
	*rdiOut = rdi_150
	fwrite_unlocked(rdi_150, 0x0000000000000001, rbx_304, rcx_100)
	word64 rsi_153
	*rsiOut = 0x0000000000000001
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405399:
	branch Mem57[fp + 0xFFFFFFFFFFFFDF88:word64] == 0x0000000000000000 l00000000004053A8
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004053A5:
	Mem149[r8_47:word64] = r12
// DataOut: fs r10 r11 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004053A8:
	branch (Mem57[fp - 0x0000000000000040:word64] ^ Mem57[fs:0x00000028:word64]) != 0x0000000000000000 l000000000040561C
// DataOut: fs r10 r11 r8 r9 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040561C:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004053BE:
	byte r12b_130
	*r12bOut = (byte) Mem57[fp - 0x0000000000000028:word64]
	byte r14b_135
	*r14bOut = (byte) Mem57[fp - 0x0000000000000018:word64]
	return rbx_304
// DataOut: fs r10 r11 r12b r14b r8 r9 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

fn00000000004052D0_exit:
// DataOut: r10 r11 r12b r14b r8 r9 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp



void fn0000000000405630(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: r12 rbp rbx rsp
fn0000000000405630_entry:
// DataOut: r13 r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(0)

l0000000000405630:
	word64 rax_13 = Mem0[rsi + 0x0000000000000018:word64]
	word64 rbp_15 = Mem0[rsi + 0x0000000000000010:word64]
	word64 r12_19 = (uint64) ((word32) (rax_13 - rbp_15) >>u 0x00000003)
	branch r12_19 == 0x0000000000000000 l00000000004056DB
// DataOut: r12 r13 r15 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(0)

l000000000040564F:
	branch rax_13 == rbp_15 l00000000004056E6
// DataOut: r12 r13 r15 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbp:<invalid> r12:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(0)

l00000000004056E6:
	Mem132[rsi + 0x0000000000000050:byte] = Mem0[rsi + 0x0000000000000050:byte] | 0x02
// DataOut: r12 r13 r15 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbp:<invalid> r12:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(0)

l0000000000405658:
	word64 rcx_76 = (int64) Mem0[rsi + 0x0000000000000030:word32]
	word64 rcx_81 = Mem0[rsi + 0x0000000000000020:word64]
	word64 rdx_86 = (int64) (word32) (uint64) ~(word32) (uint64) (word32) rcx_76 & rax_13 + rcx_76
	word64 rax_87 = Mem0[rsi + 0x0000000000000008:word64]
	Mem89[rsi + 0x0000000000000018:word64] = rdx_86
	branch rdx_86 - rax_87 > rcx_81 - rax_87 l00000000004056E0
// DataOut: r12 r13 r15 rbp rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbp:<invalid> r12:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(0)

l00000000004056E0:
	Mem130[rsi + 0x0000000000000018:word64] = rcx_81
// DataOut: r12 r13 r15 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(0)

l0000000000405683:
	Mem99[rsi + 0x0000000000000010:word64] = Mem89[rsi + 0x0000000000000018:word64]
	fputs_unlocked(rdi, Mem99[0x000000000061A610:word64])
	word64 rbx_102 = 0x0000000000000000
// DataOut: r12 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(0)

l00000000004056A0:
	__printf_chk(0x0000000000000001, 0x0000000000413759, tLoc20)
	rbx_102 = rbx_102 + 0x0000000000000001
	branch r12_19 >u rbx_102 l00000000004056A0
// DataOut: r12 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> rsi:<invalid> eax:<invalid> rdi:0x0000000000000001 -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(0)

l00000000004056BF:
	word64 rdi_113 = Mem99[0x000000000061A610:word64]
	word64 rax_115 = Mem99[rdi_113 + 0x0000000000000028:word64]
	branch rax_115 >=u Mem99[rdi_113 + 0x0000000000000030:word64] l00000000004056EF
// DataOut: r13 r15 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:0x0000000000000001 -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l00000000004056EF:
	__overflow(rdi_113, 0x000000000000000A)
	return
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l00000000004056D0:
	Mem120[rdi_113 + 0x0000000000000028:word64] = rax_115 + 0x0000000000000001
	Mem121[rax_115:byte] = 0x0A
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l00000000004056DB:
	return
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn0000000000405630_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rbp:rbp r12:r12 rbx:rbx rcx:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



void fn0000000000405700(word32 edx, word64 rdi, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs rdi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx esi rax rbx rcx rdi rdx rsi si sil
// Preserved: rbp rbx rsp
fn0000000000405700_entry:
// DataOut: edx fs r11 r15 r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(0)

l0000000000405700:
	word64 rbp_29
	word32 ebx_12 = (word32) (uint64) edx
	branch rdi == 0x0000000000000000 l0000000000405780
// DataOut: ebx fs r11 r15 r8 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(0)

l0000000000405780:
	__printf_chk(0x0000000000000001, 0x000000000041375E, tLoc20)
	rbp_29 = (int64) ebx_12
// DataOut: fs r11 r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:(uint64) edx -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405710:
	word64 rsi_45
	word32 eax_46 = fn000000000040D420(0x00000000, rdi, fs, out rsi_45)
	word64 rsi_47 = Mem0[0x000000000061A610:word64]
	word32 ebx_50 = (word32) (uint64) (ebx_12 - eax_46)
	branch ebx_50 >= 0x00000000 l0000000000405728
// DataOut: ebx fs r11 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:(uint64) edx -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405725_1:
	ebx_50 = 0x00000000
// DataOut: ebx fs r11 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:<invalid> rsi:<invalid> rax:0x0000000000000000 eax:0x00000000 rdx:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405728:
	fputs_unlocked(rdi, rsi_47)
	rbp_29 = (int64) ebx_50 + (uint64) strlen(rdi)
// DataOut: ebx fs r11 r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:<invalid> rsi:<invalid> rax:0x0000000000000000 ebx:<invalid> eax:0x00000000 rdx:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405740:
	word64 rdi_71 = Mem0[0x000000000061A610:word64]
	word64 rcx_73 = Mem0[rdi_71 + 0x0000000000000028:word64]
	branch rcx_73 >=u Mem0[rdi_71 + 0x0000000000000030:word64] l0000000000405799
// DataOut: ebx fs r11 r15 r8 rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405799:
	__overflow(rdi_71, 0x0000000000000020)
// DataOut: ebx fs r11 r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> edx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405751:
	Mem84[rdi_71 + 0x0000000000000028:word64] = rcx_73 + 0x0000000000000001
	Mem85[rcx_73:byte] = 0x20
// DataOut: ebx fs r11 r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> edx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040575C:
	ebx_50 = (word32) (uint64) (ebx_50 - 0x00000001) (alias)
	branch ebx_50 != 0xFFFFFFFF l0000000000405740
// DataOut: ebx fs r11 r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> edx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405764:
	Mem33[0x000000000061B018:word64] = rbp_29 + 0x0000000000000001 + Mem0[0x000000000061B018:word64]
	return
// DataOut: fs r11 r15 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> ebx:<invalid> rdx:<invalid> edx:<invalid> -16(fp):rbx -8(fp):rbp

fn0000000000405700_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rcx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> ebx:<invalid> rdx:<invalid> edx:<invalid> -16(fp):rbx -8(fp):rbp



void fn00000000004057B0(byte dl, word64 rsi, word32 edi, word64 r8, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edi esi fs r8 rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx esi rax rbx rcx rdi rdx rsi si sil
// Preserved: rbx rsp
fn00000000004057B0_entry:
// DataOut: dl edi esi fs r11 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004057B0:
	word64 rax_18 = 0x0000000000413764
	branch dl == 0x00 l00000000004057CB
// DataOut: edi esi fs r11 r15 r8 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004057C0:
	rax_18 = 0x0000000000000000
	branch Mem0[0x000000000061B145:byte] == 0x00 l00000000004057E0
// DataOut: edi esi fs r11 r15 r8 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:0x0000000000413764 rbx:(uint64) edi -8(fp):rbx
// LocalsOut: fp(64)

l00000000004057E0:
	rax_18 = fn000000000040C9B0(rsi, edi, r8)
	esi = (word32) (uint64) esi (alias)
// DataOut: esi fs r11 r15 r8 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbx:(uint64) edi -8(fp):rbx
// LocalsOut: fp(64)

l00000000004057CB:
	word32 edx_25 = (word32) (uint64) esi
// DataOut: edx fs r11 r15 r8 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbx:(uint64) edi rsi:<invalid> rdx:<invalid> rdi:<invalid> eax:<invalid> -12(fp):esi -8(fp):rbx

l00000000004057D8_thunk_fn0000000000405700:
	fn0000000000405700(edx_25, rax_18, fs)
	return
// DataOut: fs r11 r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rbx:rbx rdx:(uint64) esi rsi:(uint64) edi rdi:<invalid> eax:<invalid> -12(fp):esi -8(fp):rbx

fn00000000004057B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rbx:rbx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> eax:<invalid> ebx:<invalid> edx:<invalid> -12(fp):esi -8(fp):rbx



word64 fn0000000000405810(word64 rdx, word64 rbp, word64 rsi, word32 edi, word64 r11, word64 r13, word64 r14, word64 r15, selector fs, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 r13 r14 r15 rbp rdx rsi
// LiveOut: r10 r11 r13 r14 r15 r15b r8 r9 rsi
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 rbp rbx rsp
fn0000000000405810_entry:
// DataOut: edi fs r11 r13 r14 r15 rbp rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405810:
	word64 r12_6 = (uint64) edi
	word64 rbp_23
	word64 r8_24
	word64 r9_25
	word64 r10_26
	word64 r11_27
	word64 r12_28
	word64 r13_29
	word64 r14_30
	word64 r15_31
	word64 rbx_32 = fn000000000040EAB0(rsi, rbp, rdx, r11, r12_6, r13, r14, r15, fs, out rbp_23, out r8_24, out r9_25, out r10_26, out r11_27, out r12_28, out r13_29, out r14_30, out r15_31)
	word64 rsi_37 = (uint64) Mem0[__errno_location():word32]
	error(0x0000000000000000, rsi_37, rbx_32, Mem0[fp - 0x0000000000000020:<unknown>])
	branch (byte) r12_6 == 0x00 l0000000000405850
// DataOut: fs r10 r11 r13 r14 r15 r15b r8 r9 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405850:
	branch (word32) (uint64) Mem0[0x000000000061B030:word32] != 0x00000000 l000000000040584A
// DataOut: fs r10 r11 r13 r14 r15 r15b r8 r9 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040585A:
	Mem84[0x000000000061B030:word32] = 0x00000001
	return rsi_37
// DataOut: fs r10 r11 r13 r14 r15 r15b r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l0000000000405840:
	Mem73[0x000000000061B030:word32] = 0x00000002
// DataOut: fs r10 r11 r13 r14 r15 r15b r8 r9 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040584A:
	return rsi_37
// DataOut: fs r10 r11 r13 r14 r15 r15b r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn0000000000405810_exit:
// DataOut: r10 r11 r13 r14 r15 r15b r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r12:r12 rdi:<invalid> rbx:rbx rbp:rbp rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word32 fn0000000000405C20(word32 edx, word32 esi, byte dil, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil edx esi
// LiveOut: al eax rsi
// Trashed: SCZO ah al ax ch cl cx eax ecx esi rax rcx rsi si sil
// Preserved: rsp
fn0000000000405C20_entry:
	*rsiOut = rsi
// DataOut: dil edx esi fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C20:
	byte cl_129
	word32 eax_107
	branch dil == 0x00 l0000000000405C40
// DataOut: dil edx esi fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C40:
	eax_107 = 0x00000000 (alias)
	branch edx == 0x00000005 l0000000000405C3E
// DataOut: al dil eax edx esi fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C47:
	cl_129 = (byte) (uint64) (DPB(ecx, edx == 0x00000009, 0) | (word32) (edx == 0x00000003)) (alias)
// DataOut: cl dil edx esi fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405C25:
	word32 eax_102 = (word32) (uint64) ((word32) (uint64) esi & 0x0000F000)
	branch eax_102 != 0x00008000 l0000000000405CA0
// DataOut: dil eax edx esi fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405CA0:
	cl_129 = eax_102 == 0x00004000
// DataOut: cl dil edx esi fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405C55:
	eax_107 = 0x0000002F (alias)
	branch cl_129 != 0x00 l0000000000405C3E
// DataOut: al dil eax edx esi fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> cl:<invalid> al:Test(EQ,Z) rcx:<invalid>

l0000000000405C5E:
	branch Mem0[0x000000000061B12C:word32] == 0x00000001 l0000000000405CF0
// DataOut: dil edx esi fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405CF0:
	return 0x00000000
// DataOut: al eax fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405C6B:
	word32 eax_53
	branch dil == 0x00 l0000000000405CC0
// DataOut: edx esi fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405CC0:
	eax_107 = 0x00000040 (alias)
	branch edx == 0x00000006 l0000000000405C3E
// DataOut: al eax edx fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405CCE:
	eax_107 = 0x0000007C (alias)
	branch edx == 0x00000001 l0000000000405C3E
// DataOut: al eax edx fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000040 cl:<invalid> al:0x40 rcx:<invalid>

l0000000000405CDC:
	eax_53 = DPB(0x0000007C, edx == 0x00000007, 0) (alias)
// DataOut: eax fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000007C cl:<invalid> al:0x7C rcx:<invalid>

l0000000000405C70:
	word64 rsi_61 = (uint64) (esi & 0x0000F000)
	*rsiOut = rsi_61
	word32 esi_62 = (word32) rsi_61
	eax_107 = 0x00000040 (alias)
	branch esi_62 == 0x0000A000 l0000000000405C3E
// DataOut: al eax esi fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405C83:
	eax_107 = 0x0000007C (alias)
	branch esi_62 == 0x00001000 l0000000000405C3E
// DataOut: al eax esi fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000040 cl:<invalid> al:0x40 rcx:<invalid> rsi:<invalid>

l0000000000405C90:
	eax_53 = DPB(0x0000007C, esi_62 == 0x0000C000, 0) (alias)
// DataOut: eax fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000007C cl:<invalid> al:0x7C rcx:<invalid> rsi:<invalid>

l0000000000405CE2:
	return (word32) (uint64) ((word32) (uint64) -eax_53 & 0x0000003D)
// DataOut: al eax fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> cl:<invalid> al:Test(EQ,Z) rcx:<invalid> rsi:<invalid>

l0000000000405C33:
	eax_107 = 0x00000000 (alias)
	branch Mem0[0x000000000061B12C:word32] == 0x00000003 l0000000000405CB0
// DataOut: al eax esi fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405CB0:
	word64 rsi_114 = (uint64) (esi & 0x00000049)
	*rsiOut = rsi_114
	return (word32) (uint64) ((word32) (uint64) ~(word32) (uint64) (0x00000000 - (bool) cond((word32) rsi_114 - 0x00000001)) & 0x0000002A)
// DataOut: al eax fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405C3E:
	return eax_107
// DataOut: al eax fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> rsi:<invalid>

fn0000000000405C20_exit:
// DataOut: al eax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid>



byte fn0000000000405D00(word32 edx, word32 esi, byte dil, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil edx esi
// LiveOut: al rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rbx rsp
fn0000000000405D00_entry:
// DataOut: dil edx esi fs r10 r11 r12 r13 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D00:
	word64 rsi_10
	word32 eax_11 = fn0000000000405C20(edx, esi, (byte) (word32) dil, out rsi_10)
	byte bl_18 = (byte) (uint64) eax_11
	branch (byte) eax_11 == 0x00 l0000000000405D33
// DataOut: bl fs r10 r11 r12 r13 r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405D10:
	word64 rdi_42 = Mem0[0x000000000061A610:word64]
	word64 rax_45 = Mem0[rdi_42 + 0x0000000000000028:word64]
	branch rax_45 >=u Mem0[rdi_42 + 0x0000000000000030:word64] l0000000000405D3A
// DataOut: bl fs r10 r11 r12 r13 r15 r8 r9 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 edi:(word32) dil rbx:(uint64) eax rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -8(fp):rbx

l0000000000405D3A:
	word64 rsi_61 = DPB(rsi_10, (word32) bl_18, 0)
	*rsiOut = rsi_61
	__overflow(rdi_42, rsi_61)
// DataOut: bl fs r10 r11 r12 r13 r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -8(fp):rbx

l0000000000405D21:
	Mem58[rdi_42 + 0x0000000000000028:word64] = rax_45 + 0x0000000000000001
	Mem59[rax_45:byte] = bl_18
// DataOut: bl fs r10 r11 r12 r13 r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -8(fp):rbx

l0000000000405D2B:
	Mem55[0x000000000061B018:word64] = Mem0[0x000000000061B018:word64] + 0x0000000000000001
// DataOut: bl fs r10 r11 r12 r13 r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rdx:<invalid> esi:(word32) bl eax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -8(fp):rbx

l0000000000405D33:
	return bl_18 != 0x00
// DataOut: al fs r10 r11 r12 r13 r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rdx:<invalid> esi:(word32) bl eax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -8(fp):rbx

fn0000000000405D00_exit:
// DataOut: al rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> rbx:rbx al:Test(NE,Z) rdi:<invalid> rax:<invalid> rdx:<invalid> esi:(word32) bl eax:<invalid> rsi:<invalid> cl:<invalid> rcx:<invalid> -8(fp):rbx



word64 fn0000000000405D50(word64 rdi, word64 r11, selector fs, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi
// LiveOut: r10 r11 r12 r12b r13 r14 r15 r8 r9 rax rdi rsi
// Trashed: SCZOP ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: rbp rbx rsp
fn0000000000405D50_entry:
	*r12Out = r12
	*r13Out = r13
	*r14Out = r14
	*r15Out = r15
// DataOut: fs r11 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D50:
	word64 rbx_10 = 0x0000000000000000
	word64 rax_17 = 0x0000000000000000
	branch Mem0[0x000000000061B114:byte] == 0x00 l0000000000405D92
// DataOut: fs r11 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D7A:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405EA0
// DataOut: fs r11 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405EA0:
	word64 rsi_215
	word64 rax_216 = fn000000000040CD70(fp - 0x00000000000002B8, Mem0[rdi + 0x0000000000000018:word64], out rsi_215)
	rax_17 = DPB(rax_216, strlen(rax_216), 0) (alias)
	rbx_10 = rax_17 + 0x0000000000000001
// DataOut: fs r11 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405D87:
	rbx_10 = (int64) Mem0[0x000000000061B178:word32] + 0x0000000000000001
// DataOut: fs r11 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405D92:
	branch Mem0[0x000000000061B144:byte] == 0x00 l0000000000405DB6
// DataOut: fs r11 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405D9B:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405E58
// DataOut: fs r11 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405E58:
	rax_17 = 0x0000000000000002
	branch Mem0[rdi + 0x00000000000000B0:byte] == 0x00 l0000000000405DB3
// DataOut: fs r11 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405E6A:
	word64 r8_194
	word64 r9_195
	word64 r10_196
	word32 r15d_198
	word64 rax_199 = fn000000000040BD70(0x0000000000000200, (word32) (uint64) Mem0[0x000000000061B140:word32], rdi, fp - 0x00000000000002B8, Mem0[rdi + 0x0000000000000050:word64], Mem0[0x000000000061B138:word64], fs, out r8_194, out r9_195, out r10_196, out r11, out r15d_198)
	rax_17 = DPB(rax_199, strlen(rax_199), 0) + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:0x0000000000000002 rdi:<invalid> rsi:<invalid> eax:0x00000002 rcx:<invalid> rdx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405DA8:
	rax_17 = (int64) Mem0[0x000000000061B174:word32] + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405DB3:
	rbx_10 = rbx_10 + rax_17
// DataOut: fs r11 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405DB6:
	branch Mem0[0x000000000061B17D:byte] == 0x00 l0000000000405DD6
// DataOut: fs r11 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405DBF:
	word64 rax_142
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405E40
// DataOut: fs r11 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405E40:
	rax_142 = DPB(rax_17, strlen(Mem0[rdi + 0x00000000000000A8:word64]), 0) + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405DC8:
	rax_142 = (int64) Mem0[0x000000000061B16C:word32] + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405DD3:
	rbx_10 = rbx_10 + rax_142
// DataOut: fs r11 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> rsi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405DD6:
	word64 rsi_68
	word64 rdi_69
	word64 r8_70
	word64 r9_71
	word64 r10_72
	word64 r11_73
	byte r12b_74
	byte r14b_75
	fn00000000004052D0(Mem0[0x000000000061B0E8:word64], Mem0[rdi:word64], r11, fs, out rsi_68, out rdi_69, out r8_70, out r9_71, out r10_72, out r11_73, out r12b_74, out r14b_75)
	word64 rax_77 = (uint64) Mem0[0x000000000061B12C:word32]
	word64 rbx_136 = rbx_10 + Mem0[fp - 0x00000000000002C0:word64]
	branch (word32) rax_77 == 0x00000000 l0000000000405E1C
// DataOut: fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l0000000000405DFC:
	word32 edi_121 = (word32) Mem0[rdi + 0x00000000000000B0:byte]
	word64 rdi_122
	*rdiOut = DPB(rdi_69, edi_121, 0)
	word64 rsi_128
	rbx_136 = rbx_136 + DPB(rax_77, (word32) ((byte) fn0000000000405C20((word32) ((uint64) Mem0[rdi + 0x00000000000000A0:word32]), (word32) ((uint64) Mem0[rdi + 0x0000000000000028:word32]), (byte) edi_121, out rsi_128) != 0x00), 0)
// DataOut: fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> edi:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l0000000000405E1C:
	branch (Mem0[fp - 0x0000000000000020:word64] ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l0000000000405EBF
// DataOut: fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r12d:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l0000000000405EBF:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r12d:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l0000000000405E36:
	return rbx_136
// DataOut: fs r10 r11 r12 r12b r13 r14 r15 r8 r9 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r12d:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

fn0000000000405D50_exit:
// DataOut: r10 r11 r12 r12b r13 r14 r15 r8 r9 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r12d:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp



word64 fn0000000000405ED0(word64 rsi, word32 edi, word64 r8, word64 r11, selector fs, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 r8 rsi
// LiveOut: r10 r11 r8 r9 rax rsi
// Trashed: SCZOP ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 rbp rbx rsp
fn0000000000405ED0_entry:
	*r11Out = r11
	*r9Out = r9
	*r10Out = r10
// DataOut: edi fs r10 r11 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405ED0:
	word64 rdx_6 = Mem0[0x000000000061B1B0:word64]
	word64 rax_8 = Mem0[0x000000000061B020:word64]
	word64 rbx_118 = rdx_6
	branch rax_8 >u rdx_6 l0000000000405EF3
// DataOut: fs r10 r11 r8 r9 rax rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405EEF_1:
	rbx_118 = rax_8
// DataOut: fs r10 r11 r8 r9 rax rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000405EF3:
	word64 rax_316
	word64 rsi_311
	word64 r8_310
	branch rbx_118 <=u Mem0[0x000000000061A660:word64] l00000000004060C8
// DataOut: fs r10 r11 r8 r9 rax rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l00000000004060C8:
	rax_316 = 0x0000000000000000
	r8_310 = rdx_6
	*r8Out = r8_310
	rsi_311 = Mem0[0x000000000061B028:word64]
	*rsiOut = rsi_311
	branch rbx_118 == 0x0000000000000000 l0000000000406004
// DataOut: fs r10 r11 r8 r9 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l00000000004060DD:
// DataOut: fs r10 r11 r8 r9 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000405F00:
	word64 rbp_381
	word64 rdi_347 = Mem0[0x000000000061B028:word64]
	word32 edi_348 = (word32) rdi_347
	branch rbx_118 <u rax_8 >>u 0x0000000000000001 l0000000000406170
// DataOut: edi fs r10 r11 r8 r9 rax rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406170:
	branch rbx_118 >u 0x0000000055555555 l000000000040619D
// DataOut: edi fs r10 r11 r8 r9 rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040617F:
	rbp_381 = rbx_118 * 0x0000000000000002
	Mem483[0x000000000061B028:word64] = fn0000000000410C90(rax_8 >>u 0x0000000000000001, rbp_381 + rbx_118 << 0x0000000000000004, rdi_347, out r8)
// DataOut: fs r10 r11 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:0x0000000055555555 r12:(uint64) edi rbx:<invalid> rdi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000405F16:
	branch rax_8 >u 0x00000000AAAAAAAA l000000000040619D
// DataOut: edi fs r10 r11 r8 r9 rax rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000405F29:
	word64 rax_468 = fn0000000000410C90(0x00000000AAAAAAAA, rax_8 * 0x0000000000000018, rdi_347, out r8)
	rbp_381 = Mem0[0x000000000061B020:word64]
	Mem471[0x000000000061B028:word64] = rax_468
// DataOut: fs r10 r11 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:0x00000000AAAAAAAA rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000405F44:
	word64 rax_382 = Mem0[0x000000000061A660:word64]
	word64 rdi_385 = rbp_381 - rax_382
	rsi = rbp_381 + 0x0000000000000001 + rax_382
	edi_348 = (word32) rdi_385 (alias)
	word64 rcx_388 = rsi *s rdi_385
	branch rbp_381 >u rsi l000000000040619D
// DataOut: edi fs r10 r11 r8 r9 rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000405F66:
	branch rsi != (uint64) ((uint128) ((uint64) rcx_388) /u rdi_385) l000000000040619D
// DataOut: edi fs r10 r11 r8 r9 rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000405F77:
	branch rcx_388 >>u 0x0000000000000001 >u 0x00000000FFFFFFFF l000000000040619D
// DataOut: edi fs r10 r11 r8 r9 rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040619D:
	fn0000000000410E50()
// DataOut: edi fs r10 r11 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// Terminates process

l00000000004061A2_thunk_fn00000000004061B0:
	word64 rsi_369
	word64 r8_370
	return fn00000000004061B0(rsi, edi_348, r8, fs, out rsi_369, out r8_370)
// DataOut: fs r10 r11 r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000405F8D:
	word64 rax_407 = fn0000000000410C40(rsi, (rcx_388 >>u 0x0000000000000001) * 0x0000000000000008)
	word64 rcx_411 = Mem0[0x000000000061A660:word64]
	branch rbp_381 <=u rcx_411 l0000000000405FE4
// DataOut: fs r10 r11 r9 rax rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:0x00000000FFFFFFFF r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000405FA6:
	word64 rsi_431 = Mem0[0x000000000061B028:word64]
	word64 rcx_434 = rcx_411 * 0x0000000000000008 + 0x00000008
	word64 rdx_436 = rsi_431 + rcx_411 * 0x0000000000000018 + 0x0000000000000010
	word64 rsi_439 = rsi_431 + rbp_381 * 0x0000000000000018
// DataOut: fs r10 r11 r9 rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000405FD0:
	Mem443[rdx_436 + 0x0000000000000000:word64] = rax_407
	rdx_436 = rdx_436 + 0x0000000000000018
	rax_407 = rax_407 + rcx_434
	rcx_434 = rcx_434 + 0x0000000000000008
	branch rdx_436 != rsi_439 l0000000000405FD0
// DataOut: fs r10 r11 r9 rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000405FE4:
	Mem428[0x000000000061A660:word64] = rbp_381
	rax_316 = 0x0000000000000000
	r8_310 = Mem428[0x000000000061B1B0:word64]
	*r8Out = r8_310
	rsi_311 = Mem428[0x000000000061B028:word64]
	*rsiOut = rsi_311
	branch rbx_118 != 0x0000000000000000 l00000000004060E0
// DataOut: fs r10 r11 r8 r9 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l00000000004060E0:
	word64 rcx_322 = Mem0[rsi_311 + 0x0000000000000010:word64]
	Mem324[rsi_311:byte] = 0x01
	word64 rdi_320 = rax_316 + 0x0000000000000001
	Mem326[rsi_311 + 0x0000000000000008:word64] = rdi_320 * 0x0000000000000003
	word64 rdx_327 = 0x0000000000000000
// DataOut: fs r10 r11 r8 r9 rax rbx rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rbp:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l00000000004060F8:
	Mem333[rcx_322 + rdx_327 * 0x0000000000000008:word64] = 0x0000000000000003
	rdx_327 = rdx_327 + 0x0000000000000001
	branch rdx_327 <=u rax_316 l00000000004060F8
// DataOut: fs r10 r11 r8 r9 rax rbx rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rbp:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406109:
	rsi_311 = rsi_311 + 0x0000000000000018
	*rsiOut = rsi_311
	branch rdi_320 == rbx_118 l0000000000406004
// DataOut: fs r10 r11 r8 r9 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rbp:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406116:
	rax_316 = rdi_320
// DataOut: fs r10 r11 r8 r9 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rbp:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406004:
	word64 rbp_173 = 0x0000000000000000
	branch r8_310 == 0x0000000000000000 l000000000040612D
// DataOut: fs r10 r11 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rbp:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040600F:
// DataOut: fs r11 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rcx:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406010:
	word64 rsi_177
	word64 rdi_178
	word64 r8_179
	word64 r10_181
	word64 r11_182
	word64 r12_183
	word64 r13_184
	word64 r14_185
	word64 r15_186
	word64 r9_180
	word64 rax_187 = fn0000000000405D50(Mem0[Mem0[0x000000000061B1A8:word64] + rbp_173 * 0x0000000000000008:word64], r11, fs, out rsi_177, out rdi_178, out r8_179, out r9_180, out r10_181, out r11_182, out r12_183, out r13_184, out r14_185, out r15_186)
	r11 = rax_187
	*r11Out = r11
	word64 r14_192 = Mem0[0x000000000061B1B0:word64]
	branch rbx_118 == 0x0000000000000000 l0000000000406120
// DataOut: fs r10 r11 r12b r14 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406033:
	word64 r13_215 = Mem0[0x000000000061B0C8:word64]
	word64 rsi_216 = Mem0[0x000000000061B028:word64] + 0x0000000000000010
	word64 rcx_217 = 0x0000000000000001
	rsi_224 = rsi_216
// DataOut: fs r10 r11 r12b r13 r14 r9 rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r13:<invalid> r9:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l00000000004060A7:
	word64 rsi_224
	r9_180 = r9_180 - 0x0000000000000001
	*r9Out = r9_180
	branch Mem0[rsi_224:byte] == 0x00 l000000000040609A
// DataOut: fs r10 r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l00000000004060B3:
	word64 r10_261
	branch r12b != 0x00 l0000000000406050
// DataOut: fs r11 r12b r13 r14 r9 rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406050:
	*r10Out = (uint64) ((uint128) (uint64) rbp_173 /u (uint64) ((uint128) ((uint64) ((rsi_216 - 0x0000000000000001) + rcx_495)) /u rcx_495))
// DataOut: fs r10 r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l00000000004060B8:
	*r10Out = (uint64) ((uint128) (uint64) rbp_173 % rcx_495)
// DataOut: fs r10 r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040606A:
	word64 rdx_267 = rax_187 + (uint64) (r9_180 != r10_261) * 0x0000000000000002
	word64 rax_270 = Mem0[rsi_224 + 0x0000000000000000:word64] + r10_261 * 0x0000000000000008
	r9_180 = Mem0[rcx_495:word64]
	*r9Out = r9_180
	branch rdx_267 <=u r9_180 l000000000040609A
// DataOut: fs r10 r11 r12b r13 r14 r8 r9 rax rbp rbx rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> r10:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406086:
	word64 r10_278 = rdx_267 - r9_180
	*r10Out = r10_278
	Mem280[r14_192 + 0x0000000000000008:word64] = Mem0[r14_192 + 0x0000000000000008:word64] + r10_278
	Mem281[rax_270:word64] = rdx_267
	Mem284[rsi_224:byte] = Mem281[r14_192 + 0x0000000000000008:word64] <u r13_215
// DataOut: fs r10 r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> r10:<invalid> al:<invalid> edi:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040609A:
	word64 r8_240
	*r8Out = rcx_495
	rsi_224 = rsi_224 + 0x0000000000000018
	*rsiOut = rsi_224
	rcx_217 = rcx_495 + 0x0000000000000001
	word64 rcx_495 = rcx_217
	branch rbx_118 <=u rcx_495 l0000000000406120
// DataOut: fs r10 r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r10:<invalid> cl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406120:
	rbp_173 = rbp_173 + 0x0000000000000001
	branch rbp_173 <u r14_192 l0000000000406010
// DataOut: fs r10 r11 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040612D:
	branch rbx_118 <=u 0x0000000000000001 l0000000000406164
// DataOut: fs r10 r11 r8 r9 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406133:
	word64 rdx_133 = Mem0[0x000000000061B028:word64]
	word64 rax_135 = rbx_118 * 0x0000000000000003
	branch Mem0[rdx_133 - 0x0000000000000018 + (rax_135 << 0x0000000000000003):byte] != 0x00 l0000000000406164
// DataOut: fs r10 r11 r8 r9 rax rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406149:
	word64 rax_142 = (rax_135 << 0x0000000000000003) + rdx_133
// DataOut: fs r10 r11 r8 r9 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040615A:
	rbx_118 = rbx_118 - 0x0000000000000001
	branch rbx_118 != 0x0000000000000001 l0000000000406150
// DataOut: fs r10 r11 r8 r9 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406150:
	rax_142 = rax_142 - 0x0000000000000018
	branch Mem0[rax_142 - 0x0000000000000018:byte] != 0x00 l0000000000406164
// DataOut: fs r10 r11 r8 r9 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406164:
	return rbx_118
// DataOut: fs r10 r11 r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> dl:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

fn0000000000405ED0_exit:
// DataOut: r10 r11 r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> rax:<invalid> r12:r12 rbx:rbx r8:<invalid> rsi:<invalid> rbp:rbp r13:r13 r14:r14 rdi:<invalid> edx:<invalid> r11:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edi:<invalid> al:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> dx:<invalid> esi:<invalid> r15:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14



word64 fn00000000004061B0(word64 rsi, word32 edi, word64 r8, selector fs, ptr64 & rsiOut, ptr64 & r8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r8 rsi
// LiveOut: eax r8 rax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r8 r8b r8d r8w rax rcx rdi rdx rsi si sil
// Preserved: rbp rbx rsp
fn00000000004061B0_entry:
// DataOut: edi fs r10 r11 r12 r14 r15 r15d r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0040(0)

l00000000004061B0:
	rsp = fp
	rsp = fp - 0x0000000000000008
	qwLoc08 = rbp
	rbp = (uint64) edi
	ebp = (word32) rbp (alias)
	rsp = fp - 0x0000000000000010
	qwLoc10 = rbx
	rsp = fp - 0x0000000000000038
	rax = Mem0[fs:0x00000028:word64]
	qwLoc20 = rax
	rax = 0x0000000000000000
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	Z = (bool) SCZO (alias)
	branch Test(EQ,Z) l0000000000406248
// DataOut: ebp edi fs r10 r11 r12 r14 r15 r15d r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(64) Local -0040(0)

l0000000000406248:
	rax = fn000000000040C9B0(rsi, edi, r8)
	SZO = cond(rax & rax)
	Z = (bool) SZO (alias)
	C = false
	rdi = rax
	edi = (word32) rdi (alias)
	branch Test(EQ,Z) l00000000004061D1
// DataOut: ebp fs r10 r11 r12 r14 r15 r15d r8 r9 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -0040(0)

l0000000000406259:
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	eax = fn000000000040D420(esi, rdi, fs, out rsi)
	rdx = 0x0000000000000000
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000406267
// DataOut: eax edx fs r10 r11 r12 r14 r15 r15d r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> rdi:<invalid> rdx:<invalid> eax:<invalid> rsi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l0000000000406264_1:
	edx = eax
// DataOut: edx fs r10 r11 r12 r14 r15 r15d r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l0000000000406267:
// DataOut: edx fs r10 r11 r12 r14 r15 r15d r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> rcx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l00000000004061D1:
	r8 = (uint64) ebp
	rcx = 0x000000000041375A
	rdx = 0x0000000000000015
	rsi = 0x0000000000000001
	rdi = fp - 0x0000000000000038
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	eax = __sprintf_chk(fp - 0x0000000000000038, 0x0000000000000001, 0x0000000000000015, 0x000000000041375A, tLoc40)
	rbx = fp - 0x0000000000000038
	rax = fp - 0x0000000000000038
// DataOut: ebx fs r10 r11 r12 r14 r15 r15d r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> rdi:<invalid> rdx:<invalid> eax:<invalid> rsi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l00000000004061F3:
	rcx = (uint64) Mem0[rax:word32]
	rax = rax + 0x0000000000000004
	edx = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rdx = (uint64) (edx & ecx)
	rdx = (uint64) (edx & 0x80808080)
	SZO = cond(edx)
	C = false
	branch Test(EQ,Z) l00000000004061F3
// DataOut: dl eax ebx edx fs r10 r11 r12 r14 r15 r15d r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:fp - 0x0000000000000038 eax:<invalid> rbx:fp - 0x0000000000000038 edx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l000000000040620B:
	rcx = (uint64) edx
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(edx & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000406219
// DataOut: cl dl eax ebx fs r10 r11 r12 r14 r15 r15d r8 r9 rax
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:fp - 0x0000000000000038 eax:<invalid> rbx:fp - 0x0000000000000038 edx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l0000000000406216_1:
	edx = ecx
// DataOut: dl eax ebx fs r10 r11 r12 r14 r15 r15d r8 r9 rax
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:fp - 0x0000000000000038 eax:<invalid> rbx:fp - 0x0000000000000038 edx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l0000000000406219:
	rcx = rax + 0x0000000000000002
	branch Test(NE,Z) l0000000000406221
// DataOut: dl eax ebx ecx fs r10 r11 r12 r14 r15 r15d r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:fp - 0x0000000000000038 eax:<invalid> rbx:fp - 0x0000000000000038 edx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l000000000040621D_1:
	rax = rcx
// DataOut: dl eax ebx fs r10 r11 r12 r14 r15 r15d r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:fp - 0x0000000000000038 eax:<invalid> rbx:fp - 0x0000000000000038 edx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l0000000000406221:
	dl = dl + dl
	SCZO = cond(dl)
	rax = rax - 0x03 - C
	rdx = (uint64) eax
	rdx = (uint64) (edx - ebx)
	SCZO = cond(edx)
// DataOut: edx fs r10 r11 r12 r14 r15 r15d r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:fp - 0x0000000000000038 eax:<invalid> rbx:fp - 0x0000000000000038 edx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l000000000040622B:
	rsi = qwLoc20
	rsi = rsi ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rsi)
	C = false
	rax = (uint64) edx
	branch Test(NE,Z) l0000000000406269
// DataOut: eax fs r10 r11 r12 r14 r15 r15d r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> r8:(uint64) ebp rcx:<invalid> rbx:fp - 0x0000000000000038 dl:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000406269:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> r8:(uint64) ebp rcx:<invalid> rbx:fp - 0x0000000000000038 dl:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040623D:
	rsp = fp - 0x0000000000000010
	SCZO = cond(fp - 0x0000000000000010)
	rbx = qwLoc10
	rsp = fp - 0x0000000000000008
	rbp = qwLoc08
	rsp = fp
	return rax
// DataOut: eax fs r10 r11 r12 r14 r15 r15d r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> r8:(uint64) ebp rcx:<invalid> rbx:fp - 0x0000000000000038 dl:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

fn00000000004061B0_exit:
	use rsi (=> rsiOut)
	use r8 (=> r8Out)
// DataOut: eax r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rbx:rbx eax:<invalid> r8:(uint64) ebp rcx:<invalid> dl:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp



void fn0000000000406400()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406400_entry:
// DataOut: fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406400:
	branch Mem0[0x000000000061A408:word64] == 0x0000000000000000 l0000000000406418
// DataOut: fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406418:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A410)
// DataOut: fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000406439_thunk_fn0000000000406440:
	fn0000000000406440(0x000000000061A3F0)
	return
// DataOut: fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:0x000000000061A3F0 rsi:<invalid> rcx:<invalid> rdx:0x0000000000000001 eax:<invalid>

l000000000040640A:
// DataOut: fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040640F_thunk_fn0000000000406440:
	fn0000000000406440(0x000000000061A400)
	return
// DataOut: fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:0x000000000061A400

fn0000000000406400_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:0x0000000000000001 eax:<invalid>



word64 fn0000000000406440(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406440_entry:
// DataOut: fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406440:
	branch Mem0[0x000000000061B128:byte] == 0x00 l0000000000406470
// DataOut: fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000406470:
	Mem18[0x000000000061B128:byte] = 0x01
	fn0000000000406400()
// DataOut: fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018

l000000000040644D:
	word64 rsi_10 = Mem0[rdi:word64]
	fwrite_unlocked(Mem0[rdi + 0x0000000000000008:word64], rsi_10, 0x0000000000000001, Mem0[0x000000000061A610:word64])
	return rsi_10
// DataOut: fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdi:rdi rsi:<invalid> rcx:<invalid> rdx:0x0000000000000001 eax:<invalid> -16(fp):rdi

fn0000000000406440_exit:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rcx:<invalid> rdx:0x0000000000000001 rdi:<invalid> eax:<invalid> -16(fp):rdi



word64 fn0000000000406490()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rbx rsp
fn0000000000406490_entry:
// DataOut: fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406490:
// DataOut: fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004064EF:
	branch (word32) (uint64) Mem0[0x000000000061B038:word32] != 0x00000000 l0000000000406503
// DataOut: fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:0x0000000000000002 rsi:fp + 0xFFFFFFFFFFFFFF78 rcx:<invalid> rdx:<invalid> eax:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l00000000004064F9:
	branch (word32) (uint64) Mem0[0x000000000061B034:word32] == 0x00000000 l0000000000406538
// DataOut: fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:0x0000000000000002 rsi:fp + 0xFFFFFFFFFFFFFF78 rcx:<invalid> rdx:<invalid> eax:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000406538:
	return rsi
// DataOut: fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:0x0000000000000002 rsi:fp + 0xFFFFFFFFFFFFFF78 rcx:<invalid> rdx:<invalid> eax:<invalid> rbx:<invalid> -8(fp):rbx

fn0000000000406490_exit:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rbx:rbx rdi:0x0000000000000002 rsi:fp + 0xFFFFFFFFFFFFFF78 rcx:<invalid> rdx:<invalid> eax:<invalid> -8(fp):rbx

l0000000000406503:
	branch Mem0[0x000000000061B128:byte] == 0x00 l00000000004064A0
// DataOut: fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:0x0000000000000002 rsi:fp + 0xFFFFFFFFFFFFFF78 rcx:<invalid> rdx:<invalid> eax:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l000000000040650C:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A3F0)
// DataOut: fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:0x0000000000000002 rsi:fp + 0xFFFFFFFFFFFFFF78 rcx:<invalid> rdx:<invalid> eax:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l00000000004064A0:
	fflush_unlocked(Mem0[0x000000000061A610:word64])
	sigprocmask(0x0000000000000000, 0x000000000061B040, fp + 0xFFFFFFFFFFFFFF78)
	word32 ebx_40 = (word32) (uint64) Mem0[0x000000000061B038:word32]
	word32 eax_42 = (word32) (uint64) Mem0[0x000000000061B034:word32]
	branch eax_42 == 0x00000000 l0000000000406528
// DataOut: eax ebx fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> eax:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000406528:
	signal((uint64) ebx_40, 0x0000000000000000)
// DataOut: ebx fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:<invalid> rsi:0x000000000061B040 rcx:<invalid> rdx:fp + 0xFFFFFFFFFFFFFF78 eax:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l00000000004064CB:
	Mem65[0x000000000061B034:word32] = (word32) (uint64) (eax_42 - 0x00000001)
	ebx_40 = 0x00000013 (alias)
// DataOut: ebx fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:<invalid> rsi:0x000000000061B040 rcx:<invalid> rdx:fp + 0xFFFFFFFFFFFFFF78 eax:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l00000000004064D9:
	raise((uint64) ebx_40)
	sigprocmask(0x0000000000000002, fp + 0xFFFFFFFFFFFFFF78, 0x0000000000000000)
	rsi = fp + 0xFFFFFFFFFFFFFF78
// DataOut: fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:fp + 0xFFFFFFFFFFFFFF78 eax:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)



word64 fn0000000000406540(word64 rcx, word64 rdx, byte sil, word64 rdi, word64 r11, word64 r15, selector fs, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r15 rcx rdi rdx sil
// LiveOut: r10 r11 r8 r9 rsi
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r14 r14b r14d r14w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rax rbp rbx rsp
fn0000000000406540_entry:
// DataOut: fs r11 r15 rcx rdi rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406540:
	byte r15b_318
	word32 r15d_317
	word32 edx_299
	byte r14b_322
	word32 r14d_320
	word64 rbp_262
	word64 rdx_33 = Mem0[rdi:word64]
	word64 r12_263 = Mem0[r15 + 0x0000000000000008:word64]
	branch sil == 0x00 l00000000004069BD
// DataOut: fs r11 r12 r13 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004069BD:
	branch Mem0[0x000000000061B129:byte] != 0x00 l00000000004069D8
// DataOut: fs r11 r13 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004069D8:
	word32 r14d_713
	branch Mem0[0x000000000061B198:byte] == 0x00 l0000000000406A08
// DataOut: fs r11 r13 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406A08:
	r14d_713 = (word32) Mem0[rcx + 0x00000000000000B1:byte]
// DataOut: fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004069E1:
	branch Mem0[rdi + 0x00000000000000B1:byte] == 0x00 l0000000000406A20
// DataOut: fs r11 r13 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406A20:
	r14d_713 = 0x00000000 (alias)
// DataOut: fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406A10:
	word64 r15_731 = (uint64) Mem0[rcx + 0x0000000000000028:word32]
	r15d_317 = (word32) r15_731 (alias)
	r15b_318 = (byte) r15_731 (alias)
// DataOut: fs r11 r14d r15b r15d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004069EA:
	word64 r15_736 = (uint64) Mem0[rcx + 0x00000000000000A4:word32]
	r15d_317 = (word32) r15_736 (alias)
	r15b_318 = (byte) r15_736 (alias)
	r14d_713 = 0x00000001 (alias)
// DataOut: fs r11 r14d r15b r15d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004069F7:
	word64 r14_717 = (uint64) (r14d_713 ^ 0x00000001)
	r14d_320 = (word32) r14_717 (alias)
	r14b_322 = (byte) r14_717 (alias)
	r12_263 = rdx_33
// DataOut: fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r14d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004069C6:
	r12_263 = rdx_33
// DataOut: fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406567:
	branch Mem0[0x000000000061B129:byte] != 0x00 l0000000000406580
// DataOut: fs r11 r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406580:
	r14d_320 = (word32) Mem0[rcx + 0x00000000000000B1:byte]
	word64 r15_683 = (uint64) Mem0[rcx + 0x00000000000000A4:word32]
	r14b_322 = (byte) r14d_320 (alias)
	r15d_317 = (word32) r15_683 (alias)
	r15b_318 = (byte) r15_683 (alias)
	branch r14b_322 != 0x00 l00000000004065B0
// DataOut: fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406594:
	word64 rsi_691
	eax = fn0000000000404CD0(0x0000000C, out rsi_691)
	edx_299 = 0x0000000C (alias)
	branch (byte) eax != 0x00 l00000000004066B0
// DataOut: edx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004065AB:
// DataOut: fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:0x000000000000000C r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004065B0:
	word64 rax_347
	branch Mem0[rdi + 0x00000000000000B0:byte] != 0x00 l0000000000406628
// DataOut: fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406628:
	rax_347 = (uint64) ((word32) (uint64) r15d_317 & 0x0000F000)
	word32 eax_467 = (word32) rax_347
	branch eax_467 == 0x00008000 l0000000000406868
// DataOut: eax fs r11 r12 r14b r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406868:
	branch (r15d_317 & 0x00000800) == 0x00000000 l00000000004068B8
// DataOut: fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406871:
	word64 rsi_657
	branch (byte) fn0000000000404CD0(0x00000010, out rsi_657) == 0x00 l00000000004068B8
// DataOut: fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004068B8:
	branch (r15d_317 & 0x00000400) == 0x00000000 l000000000040693B
// DataOut: fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004068C1:
	word64 rsi_645
	branch (byte) fn0000000000404CD0(0x00000011, out rsi_645) == 0x00 l000000000040693B
// DataOut: fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040693B:
	word64 rsi_591
	branch (byte) fn0000000000404CD0(0x00000015, out rsi_591) == 0x00 l000000000040695C
// DataOut: fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406949:
	branch Mem0[rdi + 0x00000000000000B8:byte] == 0x00 l000000000040695C
// DataOut: fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040695C:
	branch (word32) (uint64) (r15d_317 & 0x00000049) == 0x00000000 l000000000040697A
// DataOut: fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406962:
	word64 rsi_627
	branch (byte) fn0000000000404CD0(0x0000000E, out rsi_627) == 0x00 l000000000040697A
// DataOut: fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040697A:
	branch Mem0[rdi + 0x0000000000000020:word64] <=u 0x0000000000000001 l00000000004065CF
// DataOut: fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406985:
	word64 rsi_615
	branch (byte) fn0000000000404CD0(0x00000016, out rsi_615) == 0x00 l00000000004065CF
// DataOut: fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406997:
	edx_299 = 0x00000016 (alias)
// DataOut: edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406970:
	edx_299 = 0x0000000E (alias)
// DataOut: edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406952:
	edx_299 = 0x00000015 (alias)
// DataOut: edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004068CF:
	edx_299 = 0x00000011 (alias)
// DataOut: edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040687F:
	edx_299 = 0x00000010 (alias)
// DataOut: edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040663B:
	branch eax_467 == 0x00004000 l00000000004068E0
// DataOut: eax fs r11 r12 r14b r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004068E0:
	branch (word32) (uint64) ((word32) (uint64) r15d_317 & 0x00000202) == 0x00000202 l00000000004069A1
// DataOut: fs r11 r12 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004069A1:
	edx_299 = 0x00000014 (alias)
	word64 rsi_568
	branch (byte) fn0000000000404CD0(0x00000014, out rsi_568) != 0x00 l00000000004066B0
// DataOut: edx fs r11 r12 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004069B8:
// DataOut: fs r11 r12 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:0x0000000000000014 r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004068F3:
	branch (r15b_318 & 0x02) == 0x00 l0000000000406910
// DataOut: fs r11 r12 r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004068F9:
	edx_299 = 0x00000013 (alias)
	word64 rsi_556
	branch (byte) fn0000000000404CD0(0x00000013, out rsi_556) != 0x00 l00000000004066B0
// DataOut: edx fs r11 r12 r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406910:
	edx_299 = 0x00000006 (alias)
	branch (word32) (uint64) (r15d_317 & 0x00000200) == 0x00000000 l00000000004066B0
// DataOut: edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406922:
	word64 rsi_540
	edx_299 = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond((byte) fn0000000000404CD0(0x00000012, out rsi_540) - 0x01)) & 0xFFFFFFF4) + 0x00000012) (alias)
// DataOut: edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:0x0000000000000006 r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406646:
	branch eax_467 == 0x0000A000 l0000000000406859
// DataOut: eax fs r11 r12 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406859:
	edx_299 = 0x00000007 (alias)
// DataOut: edx fs r11 r12 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406651:
	edx_299 = 0x00000008 (alias)
	branch eax_467 == 0x00001000 l00000000004066B0
// DataOut: eax edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040665D:
	edx_299 = 0x00000009 (alias)
	branch eax_467 == 0x0000C000 l00000000004066B0
// DataOut: eax edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:0x0000000000000008 r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406666:
	edx_299 = 0x0000000A (alias)
	branch eax_467 == 0x00006000 l00000000004066B0
// DataOut: eax edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> dl:0x09 rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040666F:
	word64 rdx_497 = (uint64) (eax_467 != 0x00002000)
	edx_299 = rdx_497 + 0x000000000000000B + rdx_497
// DataOut: edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> dl:0x0A rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004065B9:
	rax_347 = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	edx_299 = (word32) (uint64) Mem0[rax_347 * 0x0000000000000004 + 0x00412C60:word32] (alias)
	branch edx_299 != 0x00000005 l0000000000406680
// DataOut: edx fs r11 r12 r14b r14d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406680:
	r14b_322 = (byte) (uint64) (r14d_320 & DPB(eax, edx_299 == 0x00000007, 0)) (alias)
// DataOut: edx fs r11 r12 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406689:
	branch r14b_322 == 0x00 l00000000004066B0
// DataOut: edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> al:<invalid> r14:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040668E:
	edx_299 = 0x0000000D (alias)
	branch Mem0[0x000000000061B198:byte] != 0x00 l00000000004066B0
// DataOut: edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> al:<invalid> r14:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040669C:
	word64 rsi_432
	edx_299 = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond((byte) fn0000000000404CD0(0x0000000D, out rsi_432) - 0x01)) & 0xFFFFFFFA) + 0x0000000D) (alias)
// DataOut: edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:0x000000000000000D r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> al:<invalid> r14:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004065CF:
	word64 rax_350 = DPB(rax_347, strlen(r12_263), 0)
	word64 rbp_351 = Mem0[0x000000000061B120:word64]
	word64 r15_356 = r12_263 + rax_350
	branch rbp_351 == 0x0000000000000000 l0000000000406619
// DataOut: fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004065EA:
// DataOut: fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004065F0:
	word64 rdx_382 = Mem0[rbp_351:word64]
	branch rax_350 <u rdx_382 l0000000000406610
// DataOut: fs r11 r12 r14 r15 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004065F9:
	branch strncmp(r15_356 - rdx_382, Mem0[rbp_351 + 0x0000000000000008:word64], rdx_382) == 0x00000000 l00000000004068A0
// DataOut: fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004068A0:
	branch rbp_351 == 0x0000000000000000 l0000000000406619
// DataOut: fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004068A9:
	rbp_262 = rbp_351 + 0x0000000000000010
// DataOut: fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406610:
	rbp_351 = Mem0[rbp_351 + 0x0000000000000020:word64]
	branch rbp_351 != 0x0000000000000000 l00000000004065F0
// DataOut: fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406619:
	edx_299 = 0x00000005 (alias)
// DataOut: edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004066B0:
	rbp_262 = ((uint64) edx_299 << 0x0000000000000004) + 6398944
// DataOut: fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004066C0:
	branch Mem0[rbp_262 + 0x0000000000000008:word64] == 0x0000000000000000 l0000000000406890
// DataOut: edi fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406890:
	word64 rsi_287
	fn0000000000404CD0(0x00000004, out rsi_287)
// DataOut: fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:0x0000000000000004 rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004066D0:
	word64 rsi_270
	branch (byte) fn0000000000404CD0(0x00000004, out rsi_270) != 0x00 l0000000000406840
// DataOut: fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:0x0000000000000004 rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406840:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A3F0)
// DataOut: fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> r14:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004066DD:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(rbp_262)
	fn0000000000406440(0x000000000061A3F0)
// DataOut: fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> r14:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406570:
// DataOut: fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004066FF:
	word64 rbp_168
	byte r14b_159
	branch rdx == 0x0000000000000000 l00000000004067D8
// DataOut: fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004067D8:
	word64 rsi_231
	word64 rdi_232
	word64 r8_233
	word64 r9_234
	word64 r10_235
	word64 r11_236
	byte r12b_237
	word64 rax_239 = fn00000000004052D0(Mem0[0x000000000061B0E8:word64], r12_263, r11, fs, out rsi_231, out rdi_232, out r8_233, out r9_234, out r10_235, out r11_236, out r12b_237, out r14b_159)
	Mem243[0x000000000061B018:word64] = Mem0[0x000000000061B018:word64] + rax_239
	rbp_168 = rax_239
// DataOut: fs r10 r11 r13 r14b r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406708:
	branch Mem0[0x000000000061B130:byte] == 0x00 l0000000000406732
// DataOut: fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406711:
	word64 rax_200 = Mem0[rdx + 0x0000000000000018:word64]
	branch Mem0[rdx + 0x0000000000000020:word64] <u rax_200 + 0x0000000000000008 l0000000000406820
// DataOut: fs r11 r12 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406820:
	_obstack_newchunk(rdx, 0x0000000000000008)
	rax_200 = Mem0[rdx + 0x0000000000000018:word64]
// DataOut: fs r11 r12 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rax:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406723:
	Mem214[rax_200:word64] = Mem0[0x000000000061B018:word64]
	Mem216[rdx + 0x0000000000000018:word64] = Mem214[rdx + 0x0000000000000018:word64] + 0x0000000000000008
// DataOut: fs r11 r12
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406732:
	word64 rsi_152
	word64 rdi_153
	word64 r8_154
	word64 r9_155
	word64 r10_156
	word64 r11_157
	byte r12b_158
	word64 rax_160 = fn00000000004052D0(Mem0[0x000000000061B0E8:word64], r12_263, r11, fs, out rsi_152, out rdi_153, out r8_154, out r9_155, out r10_156, out r11_157, out r12b_158, out r14b_159)
	word64 rdx_162 = rax_160 + Mem0[0x000000000061B018:word64]
	Mem170[0x000000000061B018:word64] = rdx_162
	rbp_168 = rax_160
	branch Mem0[0x000000000061B130:byte] == 0x00 l0000000000406781
// DataOut: fs r10 r11 r13 r14b r8 r9 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406767:
	word64 rax_171 = Mem170[rdx + 0x0000000000000018:word64]
	branch Mem170[rdx + 0x0000000000000020:word64] <u rax_171 + 0x0000000000000008 l0000000000406800
// DataOut: fs r10 r11 r13 r14b r8 r9 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> dl:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406800:
	_obstack_newchunk(rdx, 0x0000000000000008)
	rax_171 = Mem170[rdx + 0x0000000000000018:word64]
	rdx_162 = Mem170[0x000000000061B018:word64]
// DataOut: fs r10 r11 r13 r14b r8 r9 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> dl:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406779:
	Mem187[rax_171:word64] = rdx_162
	Mem189[rdx + 0x0000000000000018:word64] = Mem187[rdx + 0x0000000000000018:word64] + 0x0000000000000008
// DataOut: fs r10 r11 r13 r14b r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> dl:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406781:
	word64 rsi_125 = fn0000000000406490()
	branch r14b_159 != 0x00 l00000000004067A0
// DataOut: fs r10 r11 r13 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004067A0:
	fn0000000000406400()
	word64 rcx_117 = Mem0[0x000000000061B0C8:word64]
	word64 rax_123 = (uint64) ((uint128) (uint64) rcx /u rcx_117)
	rsi_125 = rax_123
	branch rax_123 == (uint64) ((uint128) ((uint64) ((rbp_168 - 0x0000000000000001) + rcx)) /u rcx_117) l000000000040678B
// DataOut: fs r10 r11 r8 r9 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004067C6:
	rsi_125 = fn0000000000406440(0x000000000061A550)
// DataOut: fs r10 r11 r8 r9 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040678B:
	return rsi_125
// DataOut: fs r10 r11 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000406540_exit:
// DataOut: r10 r11 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r13:r13 rbp:rbp rbx:rbx rdx:<invalid> r12:r12 r14:r14 rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r15:r15 eax:<invalid> r8:<invalid> r14d:<invalid> al:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



void fn0000000000406A30()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406A30_entry:
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A30:
	branch Mem0[0x000000000061B129:byte] == 0x00 l0000000000406A4F
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A39:
	word64 rsi_36
	branch (byte) fn0000000000404CD0(0x00000004, out rsi_36) != 0x00 l0000000000406A58
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000406A58:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A420)
// DataOut: fs r11 r13 r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

l0000000000406A75_thunk_fn0000000000406440:
	fn0000000000406440(0x000000000061A3F0)
	return
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:0x000000000061A3F0 rsi:<invalid> rcx:<invalid> rdx:0x0000000000000001 eax:<invalid> rax:<invalid> al:<invalid>

l0000000000406A4B:
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

l0000000000406A4F:
	return
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

fn0000000000406A30_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> eax:<invalid> rax:<invalid> al:<invalid>



word64 fn0000000000406A80(word32 ecx, word64 rdx, word64 rsi, word64 rdi, selector fs, ptr64 & r8Out, ptr64 & r11Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ecx fs rdi rdx rsi
// LiveOut: r11 r15 r8 rax
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 rbp rbx rsp
fn0000000000406A80_entry:
// DataOut: ecx fs rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A80:
	word64 rbx_25 = rsi
	word64 rax_104 = 0x0000000000000000
	branch Mem0[0x000000000061A748:word64] == 0x0000000000000000 l0000000000406ADB
// DataOut: fs r12 r13d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406AB8:
	rax_104 = strstr(rsi, 0x0000000000413766)
	branch rax_104 == 0x0000000000000000 l0000000000406ADB
// DataOut: fs r12 r13d r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000138 r13:(uint64) ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406ACD:
	rax_104 = DPB(rax_104, strlen(rsi), 0) (alias)
	branch rax_104 <=u 0x0000000000000065 l0000000000406B20
// DataOut: fs r12 r13d r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000138 r13:(uint64) ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> rsi:0x0000000000413766 rdi:0x0000000000413766 r14:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406B20:
	word64 rax_94 = __mempcpy_chk(fp - 0x0000000000000138, rsi, rax_104 - rsi, 0x0000000000000105)
	word64 rcx_95 = (int64) Mem0[rdx + 0x0000000000000010:word32]
	word64 rsi_100 = rcx_95 + 0x000000000061A760 + rcx_95 * 0x00000000000000A0
	rbx_25 = fp - 0x0000000000000138
	rax_104 = strcpy(stpcpy(rax_94, rsi_100), rsi_100 + 0x0000000000000002)
// DataOut: fs r12 r13d rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000138 r13:(uint64) ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> rsi:0x0000000000413766 rdi:0x0000000000413766 r14:<invalid> eax:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406ADB:
	word64 r8_50
	word64 r11_51
	word64 r15_52
	word64 rax_53 = fn0000000000410600(rax_104, rbx_25, 0x00000000000003E9, rdi, 0x00000000, fs, out r8_50, out r11_51, out r15_52)
	branch (Mem0[fp - 0x0000000000000030:word64] ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l0000000000406B66
// DataOut: fs r11 r15 r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000138 r13:(uint64) ecx r12:rdi rbp:rdx rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406B66:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> eax:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> ax:<invalid> r15:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406B07:
	return rax_53
// DataOut: fs r11 r15 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> eax:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> ax:<invalid> r15:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

fn0000000000406A80_exit:
// DataOut: r11 r15 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp r13:r13 r12:r12 rbp:rbp rbx:rbx rax:<invalid> rsi:<invalid> rdi:<invalid> r14:r14 r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> eax:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> ax:<invalid> r15:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14



word64 fn0000000000406B70(word64 rbp, word64 rdi, word64 r11, word64 r15, selector fs, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r15 rbp rdi
// LiveOut: r10 r11 r8 r9 rsi
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn0000000000406B70_entry:
// DataOut: fs r11 r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406B70:
	rsp = fp
	rsp = fp - 0x0000000000000008
	qwLoc08 = r15
	rsp = fp - 0x0000000000000010
	qwLoc10 = r14
	rsp = fp - 0x0000000000000018
	qwLoc18 = r13
	rsp = fp - 0x0000000000000020
	qwLoc20 = r12
	rsp = fp - 0x0000000000000028
	qwLoc28 = rbp
	rsp = fp - 0x0000000000000030
	qwLoc30 = rbx
	rbx = rdi
	rsp = fp - 0x00000000000012E8
	rax = Mem0[fs:0x00000028:word64]
	qwLoc40 = rax
	rax = 0x0000000000000000
	SCZO = cond(Mem0[rdi + 0x00000000000000B0:byte] - 0x00)
	Z = (bool) SCZO (alias)
	branch Test(EQ,Z) l0000000000406E00
// DataOut: fs r11 r15 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406E00:
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	SCZO = cond(Mem0[0x000000000061B17C:byte] - 0x00)
	r13 = fp - 0x00000000000012A8
	rcx = 0x0000000000003F3F
	eax = (word32) Mem0[rax + 0x0000000000413728:byte]
	bLoc12A8 = al
	rax = 0x000000003F3F3F3F
	qwLoc12A7 = 0x000000003F3F3F3F
	Mem0[rbp + 0x0000000000000009:word16] = cx
	bLoc129D = 0x00
	branch Test(EQ,Z) l0000000000406BC2
// DataOut: fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406BA4:
	r13 = fp - 0x00000000000012A8
	rdi = rdi + 0x0000000000000010
	rsi = fp - 0x00000000000012A8
	fn000000000040A600(rsi, rdi)
	SCZO = cond(Mem0[0x000000000061B17C:byte] - 0x00)
	branch Test(NE,Z) l0000000000406E41
// DataOut: fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406E41:
	rax = (uint64) Mem0[rbx + 0x00000000000000B4:word32]
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l0000000000407138
// DataOut: eax fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:0x3F3F3F3F rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000407138:
	bLoc129E = 0x2E
// DataOut: fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406E50:
	SCZO = cond(eax - 0x00000002)
	branch Test(NE,Z) l0000000000406BC7
// DataOut: fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406E59:
	rax = (uint64) Mem0[0x000000000061B14C:word32]
	bLoc129E = 0x2B
	SCZO = cond(eax - 0x00000001)
	branch Test(NE,Z) l0000000000406BD6
// DataOut: eax fs r11 r15 rbx rsp
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406E6D:
// DataOut: fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):0x2B -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406BC2:
	bLoc129E = 0x00
// DataOut: fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:0x3F3F3F3F rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406BC7:
	rax = (uint64) Mem0[0x000000000061B14C:word32]
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l0000000000406E70
// DataOut: eax fs r11 r15 rbx rsp
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406E70:
	rax = Mem0[rbx + 0x0000000000000080:word64]
	rdx = Mem0[rbx + 0x0000000000000078:word64]
	qwLoc12B0 = rax
	qwLoc12B8 = rdx
// DataOut: fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406BD6:
	branch Test(ULT,C) l0000000000407040
// DataOut: eax fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000407040:
	rax = Mem0[rbx + 0x0000000000000070:word64]
	rdx = Mem0[rbx + 0x0000000000000068:word64]
	qwLoc12B0 = rax
	qwLoc12B8 = rdx
// DataOut: fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406BDC:
	SCZO = cond(eax - 0x00000002)
	branch Test(NE,Z) l0000000000406E90
// DataOut: fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406E90:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406BE5:
	rax = Mem0[rbx + 0x0000000000000060:word64]
	rdx = Mem0[rbx + 0x0000000000000058:word64]
	qwLoc12B0 = rax
	qwLoc12B8 = rdx
// DataOut: fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406BF7:
	SCZO = cond(Mem0[0x000000000061B114:byte] - 0x00)
	r12 = fp - 0x0000000000000E88
	rbp = fp - 0x0000000000000E88
	branch Test(NE,Z) l0000000000407060
// DataOut: fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000407060:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	r9 = 0x0000000000413764
	branch Test(EQ,Z) l0000000000407085
// DataOut: fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:fp - 0x0000000000000E88 edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l000000000040706F:
	rdi = Mem0[rbx + 0x0000000000000018:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000000407085
// DataOut: dil fs r11 r15 rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:fp - 0x0000000000000E88 r9:0x0000000000413764 edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000407078:
	rsi = fp - 0x0000000000001278
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	r9 = rax
// DataOut: fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:fp - 0x0000000000000E88 r9:0x0000000000413764 edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000407085:
	r12 = fp - 0x0000000000000E88
	r8 = (uint64) Mem0[0x000000000061B178:word32]
	rdx = 0x0000000000000E3B
	rcx = 0x0000000000413779
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = fp - 0x0000000000000E88
	eax = __sprintf_chk(fp - 0x0000000000000E88, 0x0000000000000001, 0x0000000000000E3B, 0x0000000000413779, tLoc12F0)
	rdx = fp - 0x0000000000000E88
// DataOut: fs r11 r15 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:fp - 0x0000000000000E88 r9:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l00000000004070B0:
	rcx = (uint64) Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l00000000004070B0
// DataOut: al eax fs r11 r15 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:fp - 0x0000000000000E88 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:fp - 0x0000000000000E88 r9:<invalid> r8:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l00000000004070C7:
	rcx = (uint64) eax
	rbp = rdx + 0x0000000000000002
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l00000000004070D8
// DataOut: al cl fs r11 r15 rbp rbx rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:fp - 0x0000000000000E88 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:fp - 0x0000000000000E88 r9:<invalid> r8:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l00000000004070D5_1:
	eax = ecx
// DataOut: al fs r11 r15 rbp rbx rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:fp - 0x0000000000000E88 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l00000000004070D8:
	branch Test(EQ,Z) l00000000004070DC
// DataOut: al fs r11 r15 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:fp - 0x0000000000000E88 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l00000000004070D8_1:
	rbp = rdx
// DataOut: al fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:fp - 0x0000000000000E88 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l00000000004070DC:
	al = al + al
	SCZO = cond(al)
	rbp = rbp - 0x03 - C
	SCZO = cond(rbp)
// DataOut: fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:fp - 0x0000000000000E88 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406C0F:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406C8F
// DataOut: fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> al:al * 0x02 edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406C18:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	r14 = 0x0000000000413764
	branch Test(NE,Z) l0000000000407288
// DataOut: fs r11 r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> al:al * 0x02 edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000407288:
	rdi = Mem0[rbx + 0x0000000000000050:word64]
	r8 = Mem0[0x000000000061B138:word64]
	rsi = fp - 0x0000000000001278
	rdx = (uint64) Mem0[0x000000000061B140:word32]
	rcx = 0x0000000000000200
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out r8, out r9, out r10, out r11, out r15d)
	r14 = rax
// DataOut: fs r11 r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:0x0000000000413764 r9:<invalid> r8:<invalid> al:al * 0x02 edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406C2B:
	r15 = (uint64) Mem0[0x000000000061B174:word32]
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rdi = r14
	eax = fn000000000040D420(esi, rdi, fs, out rsi)
	r15 = (uint64) (r15d - eax)
	SZO = cond(r15d & r15d)
	C = false
	rax = (uint64) r15d
	branch Test(LE,SZO) l0000000000406F50
// DataOut: eax fs r11 r14 r15 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r8:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406C4B:
	rax = (uint64) (eax - 0x00000001)
	SCZO = cond(eax)
	rdx = (uint64) eax
	rcx = rbp + 0x0000000000000001 + rdx
	rdx = rbp
// DataOut: al fs r11 r14 r15 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406C60:
	rdx = rdx + 0x0000000000000001
	Mem0[rdx - 0x0000000000000001:byte] = 0x20
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l0000000000406C60
// DataOut: al fs r11 r14 r15 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):0x20 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406C6D:
	ax = (int16) al
	rdx = rbp + 0x0000000000000001 + rax
// DataOut: fs r11 r14 r15 rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):0x20 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406C74:
	r14 = r14 + 0x0000000000000001
	eax = (word32) Mem0[rsi - 0x0000000000000001:byte]
	rbp = rdx + 0x0000000000000001
	SZO = cond(al & al)
	C = false
	Mem0[rbp - 0x0000000000000001:byte] = al
	branch Test(NE,Z) l0000000000406F50
// DataOut: fs r11 r14 r15 rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406F50:
	rdx = rbp
// DataOut: fs r11 r14 r15 rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406C8C:
	Mem0[rdx:byte] = 0x20
// DataOut: fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406C8F:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	rax = 0x0000000000413764
	branch Test(NE,Z) l0000000000407120
// DataOut: fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:<invalid> r9:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000407120:
	rdi = Mem0[rbx + 0x0000000000000020:word64]
	rsi = fp - 0x0000000000001278
	rax = fn000000000040CD70(rsi, rdi, out rsi)
// DataOut: fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:0x0000000000413764 r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:0x00413764 rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:0x3764 r9:<invalid> al:0x64 edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:0x37 r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -12F0(0)

l0000000000406CA1:
	r9 = (uint64) Mem0[0x000000000061B170:word32]
	rdi = rbp
	qwLoc12E8 = rax
	r8 = fp - 0x00000000000012A8
	rcx = 0x0000000000413769
	rdx = 0xFFFFFFFFFFFFFFFF
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000413769, tLoc12F0)
	rdi = rbp
	eax = strlen(rdi)
	rbp = rbp + rax
	SCZO = cond(Mem0[0x000000000061B130:byte] - 0x00)
	branch Test(NE,Z) l00000000004070F0
// DataOut: fs r11 r15 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:0x00413764 rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:0x3764 r9:<invalid> al:0x64 edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:0x37 r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004070F0:
	rcx = Mem0[0x000000000061A610:word64]
	rdx = 0x0000000000000002
	rsi = 0x0000000000000001
	rdi = 0x0000000000413771
	eax = fwrite_unlocked(0x0000000000413771, 0x0000000000000001, 0x0000000000000002, rcx)
	v35 = Mem0[0x000000000061B018:word64] + 0x0000000000000002
	Mem0[0x000000000061B018:word64] = v35
	SCZO = cond(v35)
// DataOut: fs r11 r15 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:0x0000000000000001 rcx:0x0000000000413769 eax:<invalid> rdx:0xFFFFFFFFFFFFFFFF r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:0xFFFFFFFF r11:<invalid> r10:<invalid> cl:0x69 ah:<invalid> r15d:<invalid> ecx:0x00413769 r14d:<invalid> dl:0xFF sil:0x01 edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406CE2:
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000406D08
// DataOut: fs r11 r15 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x01 edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406CEB:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000406D08
// DataOut: fs r11 r15 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x01 edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406CF4:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(EQ,Z) l0000000000407148
// DataOut: fs r11 r15 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x01 edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407148:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406D58
// DataOut: fs r11 r15 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x01 edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407155:
// DataOut: fs r11 r15 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x01 edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406D01:
// DataOut: fs r11 r15 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x01 edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406D08:
	rsi = Mem0[0x000000000061A610:word64]
	rdi = fp - 0x0000000000000E88
	rbp = rbp - (fp - 0x0000000000000E88)
	eax = fputs_unlocked(fp - 0x0000000000000E88, rsi)
	v33 = Mem0[0x000000000061B018:word64] + rbp
	Mem0[0x000000000061B018:word64] = v33
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000407248
// DataOut: fs r11 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x01 edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407248:
	edx = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	rdi = (uint64) Mem0[rbx + 0x000000000000002C:word32]
	rsi = (uint64) Mem0[0x000000000061B168:word32]
	fn00000000004057B0(dl, rsi, edi, r8, fs)
	rsp = fp - 0x00000000000012F0
// DataOut: fs r11 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:fp - 0x0000000000000E88 rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406D2E:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000407210
// DataOut: fs r11 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407210:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	rax = (uint64) Mem0[rbx + 0x0000000000000030:word32]
	rdi = 0x0000000000413764
	rdx = (uint64) Mem0[0x000000000061B164:word32]
	rsi = (uint64) eax
	branch Test(EQ,Z) l0000000000407238
// DataOut: eax edx fs r11 r15 r8 rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407229:
	rdi = 0x0000000000000000
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	branch Test(EQ,Z) l0000000000407415
// DataOut: eax edx fs r11 r15 r8 rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:0x0000000000413764 rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00413764 -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407415:
	rdi = (uint64) eax
	Mem0[rsp + 0x0000000000000018:word64] = rsi
	Mem0[rsp + 0x0000000000000010:word32] = edx
	rax = fn000000000040CB40(rsi, edi, r8)
	rsi = Mem0[rsp + 0x0000000000000018:word64]
	rdi = rax
	rdx = (uint64) Mem0[rsp + 0x0000000000000010:word32]
// DataOut: edx fs r11 r15 r8 rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407238:
	fn0000000000405700(edx, rdi, fs)
// DataOut: fs r11 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406D3B:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(NE,Z) l00000000004071D0
// DataOut: fs r11 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004071D0:
	edx = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	rdi = (uint64) Mem0[rbx + 0x000000000000002C:word32]
	rbp = fp - 0x0000000000000E88
	rsi = (uint64) Mem0[0x000000000061B160:word32]
	fn00000000004057B0(dl, rsi, edi, r8, fs)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406D58
// DataOut: fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406D48:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	rbp = fp - 0x0000000000000E88
	branch Test(NE,Z) l00000000004071F5
// DataOut: fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004071F5:
	rdi = Mem0[rbx + 0x00000000000000A8:word64]
	rdx = (uint64) Mem0[0x000000000061B16C:word32]
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	fn0000000000405700(edx, rdi, fs)
// DataOut: fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:fp - 0x0000000000000E88 r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406D58:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F60
// DataOut: fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F60:
	r14 = 0x0000000000413764
// DataOut: fs r11 r14 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406D65:
	rax = (uint64) Mem0[rbx + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000B000)
	SCZO = cond(eax - 0x00002000)
	branch Test(EQ,Z) l00000000004072B0
// DataOut: fs r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004072B0:
	rax = Mem0[rbx + 0x0000000000000038:word64]
	rsi = rsp + 0x0000000000000070
	r13 = 0x00000000FFFFFFFE
	r13 = (uint64) (r13d - Mem0[0x000000000061B15C:word32])
	r13 = (uint64) (r13d - Mem0[0x000000000061B158:word32])
	rdi = rax
	eax = (word32) al
	r13 = (uint64) (r13d + Mem0[0x000000000061B154:word32])
	rdi = rdi >>u 0x000000000000000C
	dil = dil & 0x00
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	rdx = Mem0[rbx + 0x0000000000000038:word64]
	r15 = rax
	rsi = rsp + 0x0000000000000050
	r14 = (uint64) Mem0[0x000000000061B158:word32]
	rdi = rdx
	rdx = rdx >>u 0x0000000000000008
	rax = (uint64) edx
	rdi = rdi >>u 0x0000000000000020
	rax = (uint64) (eax & 0x00000FFF)
	rdi = (uint64) (edi & 0xFFFFF000)
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	r8 = 0x0000000000000000
	SZO = cond(r13d & r13d)
	C = false
	r9 = rax
	branch Test(SG,S) l0000000000407328
// DataOut: fs r11 r13d r14d r15 r8d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407324_1:
	r8d = r13d
// DataOut: fs r11 r14d r15 r8d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:0x00000000CCCCCCCD rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407328:
	r8 = (uint64) (r8d + Mem0[0x000000000061B15C:word32])
	Mem0[rsp + 0x0000000000000008:word64] = r15
	Mem0[rsp:word32] = r14d
	rcx = 0x0000000000413774
	rdx = 0xFFFFFFFFFFFFFFFF
	rsi = 0x0000000000000001
	rdi = rbp
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000413774, Mem0[rsp + -8:<unknown>])
	rax = (int64) Mem0[0x000000000061B154:word32]
	r13 = rbp + 0x0000000000000001 + rax
// DataOut: fs r11 r13 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:0x00000000CCCCCCCD rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:r13d edx:<invalid> ebx:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406D78:
	rdi = Mem0[rbx + 0x0000000000000040:word64]
	r8 = Mem0[0x000000000061A560:word64]
	rsi = rsp + 0x0000000000000070
	rdx = (uint64) Mem0[0x000000000061B134:word32]
	rcx = 0x0000000000000001
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out r8, out r9, out r10, out r11, out r15d)
	r14 = rax
// DataOut: fs r11 r14 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406D9B:
	r13 = (uint64) Mem0[0x000000000061B154:word32]
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rdi = r14
	eax = fn000000000040D420(esi, rdi, fs, out rsi)
	r13 = (uint64) (r13d - eax)
	SZO = cond(r13d & r13d)
	C = false
	rax = (uint64) r13d
	branch Test(LE,SZO) l0000000000406DDC
// DataOut: eax fs r11 r13 r14 r15 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r15:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406DB7:
	rax = (uint64) (eax - 0x00000001)
	SCZO = cond(eax)
	rdx = (uint64) eax
	rcx = rbp + 0x0000000000000001 + rdx
	rdx = rbp
// DataOut: al fs r11 r13 r14 r15 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:(uint64) r13d r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r15:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406DC8:
	rdx = rdx + 0x0000000000000001
	Mem0[rdx - 0x0000000000000001:byte] = 0x20
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l0000000000406DC8
// DataOut: al fs r11 r13 r14 r15 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r15:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406DD5:
	ax = (int16) al
	rbp = rbp + 0x0000000000000001 + rax
// DataOut: fs r11 r13 r14 r15 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r15:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406DDC:
	r14 = r14 + 0x0000000000000001
	eax = (word32) Mem0[rsi - 0x0000000000000001:byte]
	r13 = r13 + 0x0000000000000001
	SZO = cond(al & al)
	C = false
	Mem0[rbp - 0x0000000000000001:byte] = al
	branch Test(EQ,Z) l0000000000406E98
// DataOut: fs r11 r13 r14 r15 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r15:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406E98:
	Mem0[rbp + 0x0000000000000000:byte] = 0x20
// DataOut: fs r11 r13 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r15:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406E9C:
	rdi = rsp + 0x0000000000000030
	rax = localtime(rdi)
	Mem0[rbp + 0x0000000000000000:byte] = 0x01
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F80
// DataOut: fs r11 r13 r15 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406EB8:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000407364
// DataOut: fs r11 r13 r15 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406EC1:
	rdx = Mem0[0x000000000061B180:word64]
	rsi = Mem0[rsp + 0x0000000000000030:word64]
	rdi = Mem0[0x000000000061B188:word64]
	rcx = Mem0[rsp + 0x0000000000000038:word64]
	SCZO = cond(rsi - rdx)
	branch Test(GT,SZO) l0000000000407380
// DataOut: ecx edi fs r13 rax rbx rdx rsi rsp
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406EE2:
	branch Test(LT,SO) l0000000000406EEC
// DataOut: ecx edi fs r13 rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406EE4:
	SCZO = cond(edi - ecx)
	branch Test(SG,S) l0000000000407380
// DataOut: ecx edi fs r13 rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407380:
	rdi = 0x000000000061B180
	Mem0[rsp + 0x0000000000000010:word64] = rax
	fn000000000040AB30(rdi)
	rdx = Mem0[0x000000000061B180:word64]
	r8 = Mem0[0x000000000061B188:word64]
	rsi = Mem0[rsp + 0x0000000000000030:word64]
	rcx = Mem0[rsp + 0x0000000000000038:word64]
	rax = Mem0[rsp + 0x0000000000000010:word64]
// DataOut: ecx fs r13 r8d rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406EEC:
	r8 = rdi
// DataOut: ecx fs r13 r8d rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406EEF:
	rdi = rdx + 0xFFFFFFFFFF0F3D54
	SCZO = cond(rdi - rsi)
	branch Test(GE,SO) l0000000000407268
// DataOut: ecx fs r13 r8d rax rbx rdx rsi rsp
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407268:
	rdi = 0x0000000000000000
	branch Test(GT,SZO) l0000000000406F20
// DataOut: ecx edi fs r13 r8d rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407273:
	SCZO = cond(r8d - ecx)
	branch Test(NS,S) l0000000000406F20
// DataOut: ecx edi fs r13 r8d rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:0x0000000000000000 rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:0x00 r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000000 -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l000000000040727C:
// DataOut: ecx fs r13 r8d rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:0x0000000000000000 rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:0x00 r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000000 -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406EFF:
	SCZO = cond(rdx - rsi)
	rdi = 0x0000000000000001
	branch Test(GT,SZO) l0000000000406F20
// DataOut: ecx edi fs r13 r8d rax rbx rsp
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F09:
	dil = 0x00
	branch Test(LT,SO) l0000000000406F20
// DataOut: ecx edi fs r13 r8d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:0x0000000000000001 rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:0x01 r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000001 -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F0E:
	rdi = (uint64) ecx
	rdi = (uint64) (edi - r8d)
	rdi = (uint64) (edi >>u 0x0000001F)
	SCZO = cond(edi)
// DataOut: ecx edi fs r13 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:0x00 r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F20:
	rdi = (int64) edi
	rdx = rax
	rsi = Mem0[0x0061A3D0 + rdi * 0x0000000000000008:word64]
	rdi = r13
	rax = fn0000000000406A80(ecx, rdx, rsi, rdi, fs, out r8, out r11, out r15)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000406F6B
// DataOut: fs r11 r13 r15 r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F6B:
	SCZO = cond(Mem0[rbp + 0x0000000000000000:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F3B
// DataOut: fs r11 r13 r15 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ebx:<invalid> ax:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F72:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(NE,Z) l0000000000407364
// DataOut: fs r11 r13 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ebx:<invalid> ax:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407364:
	rdi = Mem0[rsp + 0x0000000000000030:word64]
	rsi = rsp + 0x0000000000000050
	rax = fn000000000040CCD0(rsi, rdi)
	r9 = rax
// DataOut: fs r11 r13 r15 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> r9d:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F7F:
// DataOut: fs r11 r13 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ebx:<invalid> ax:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F80:
	r9 = 0x0000000000413764
// DataOut: fs r11 r13 r15 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> r9d:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F86:
	r8 = (uint64) Mem0[0x000000000061A3C4:word32]
	SZO = cond(r8d & r8d)
	C = false
	branch Test(SG,S) l00000000004073B1
// DataOut: fs r11 r13 r15 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> r9d:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004073B1:
	rdi = rsp + 0x0000000000000028
	Mem0[rsp + 0x0000000000000010:word64] = r9
	Mem0[rsp + 0x0000000000000028:word64] = 0x0000000000000000
	rax = localtime(rdi)
	SZO = cond(rax & rax)
	C = false
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	branch Test(EQ,Z) l0000000000407403
// DataOut: fs r11 r13 r15 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> r9d:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004073D3:
	rsi = Mem0[0x000000000061A3D0:word64]
	rdi = rsp + 0x0000000000000070
	rcx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = rax
	rax = fn0000000000406A80(ecx, rdx, rsi, rdi, fs, out r8, out r11, out r15)
	SZO = cond(rax & rax)
	C = false
	r8 = (uint64) Mem0[0x000000000061A3C4:word32]
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	branch Test(NE,Z) l0000000000407436
// DataOut: fs r11 r13 r15 r8d r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> r9d:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407436:
	rdi = rsp + 0x0000000000000070
	rdx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rsi = rax
	Mem0[rsp + 0x0000000000000010:word64] = r9
	eax = fn000000000040D240(edx, rsi, rdi, fs, out rsi, out rdi)
	rsp = rsp + 0x0000000000000008
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	Mem0[0x000000000061A3C4:word32] = eax
	r8 = (uint64) eax
// DataOut: fs r11 r13 r15 r8d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> ebx:<invalid> r11d:<invalid> ax:<invalid> al:<invalid> ebp:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004073FA:
	SZO = cond(r8d & r8d)
	C = false
	branch Test(NS,S) l0000000000406F96
// DataOut: fs r11 r13 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> ebx:<invalid> r11d:<invalid> ax:<invalid> al:<invalid> ebp:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407403:
	Mem0[0x000000000061A3C4:word32] = 0x00000000
	r8 = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: fs r11 r13 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ax:<invalid> al:<invalid> cl:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F96:
	rdi = r13
	rcx = 0x0000000000413779
	rdx = 0xFFFFFFFFFFFFFFFF
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000413779, Mem0[rsp + -8:<unknown>])
	rdi = r13
	eax = strlen(rdi)
	r13 = r13 + rax
	SCZO = cond(r13)
// DataOut: fs r11 r13 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ax:<invalid> al:<invalid> cl:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F3B:
	rax = rax + r13
	SCZO = cond(rax)
	r13 = r8 + 0x0000000000000001
	Mem0[rax:byte] = 0x20
	Mem0[rax + 0x0000000000000001:byte] = 0x00
// DataOut: fs r11 r13 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ebx:<invalid> ax:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406FBC:
	rsi = Mem0[0x000000000061A610:word64]
	r13 = r13 - (fp - 0x0000000000000E88)
	rdi = fp - 0x0000000000000E88
	eax = fputs_unlocked(fp - 0x0000000000000E88, rsi)
	rdx = 0x000000000061AFC0
	rsi = 0x0000000000000000
	rcx = r13
	rdi = rbx
	v39 = Mem0[0x000000000061B018:word64] + r13
	Mem0[0x000000000061B018:word64] = v39
	SCZO = cond(v39)
	rsi = fn0000000000406540(rcx, rdx, sil, rdi, r11, r15, fs, out r8, out r9, out r10, out r11)
	rdx = (uint64) Mem0[rbx + 0x00000000000000A0:word32]
	rbp = rax
	SCZO = cond(edx - 0x00000006)
	branch Test(EQ,Z) l0000000000407160
// DataOut: edx fs r10 r11 r13 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ax:<invalid> al:<invalid> cl:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407160:
	SCZO = cond(Mem0[rbx + 0x0000000000000008:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l0000000000407012
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> ecx:<invalid> r11d:<invalid> cl:<invalid> r12d:<invalid> ax:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040716B:
	rcx = Mem0[0x000000000061A610:word64]
	rdx = 0x0000000000000004
	rsi = 0x0000000000000001
	rdi = 0x000000000041377E
	eax = fwrite_unlocked(0x000000000041377E, 0x0000000000000001, 0x0000000000000004, rcx)
	rcx = r13 + 0x0000000000000004 + rbp
	rdx = 0x0000000000000000
	rsi = 0x0000000000000001
	rdi = rbx
	v40 = Mem0[0x000000000061B018:word64] + 0x0000000000000004
	Mem0[0x000000000061B018:word64] = v40
	SCZO = cond(v40)
	rsi = fn0000000000406540(rcx, rdx, sil, rdi, r11, r15, fs, out r8, out r9, out r10, out r11)
	rdx = (uint64) Mem0[0x000000000061B12C:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000407012
// DataOut: fs r10 r11 r8 r9 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> ecx:<invalid> r11d:<invalid> cl:<invalid> r12d:<invalid> ax:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004071B0:
	rsi = (uint64) Mem0[rbx + 0x00000000000000A4:word32]
	rdx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = 0x0000000000000001
	al = fn0000000000405D00(edx, esi, dil, out rsi)
// DataOut: fs r10 r11 r8 r9 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:0x7E r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> r10:<invalid> r9d:<invalid> edi:<invalid> ecx:<invalid> r11d:<invalid> ax:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406FF9:
	rax = (uint64) Mem0[0x000000000061B12C:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000407012
// DataOut: edx fs r10 r11 r8 r9 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> ecx:<invalid> r11d:<invalid> cl:<invalid> r12d:<invalid> ax:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407003:
	edi = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	rsi = (uint64) Mem0[rbx + 0x0000000000000028:word32]
	al = fn0000000000405D00(edx, esi, dil, out rsi)
// DataOut: fs r10 r11 r8 r9 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> ecx:<invalid> r11d:<invalid> cl:<invalid> r12d:<invalid> ax:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407012:
	rax = Mem0[rsp + 0x00000000000012A8:word64]
	rax = rax ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rax)
	C = false
	branch Test(NE,Z) l000000000040745A
// DataOut: fs r10 r11 r8 r9 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> ax:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040745A:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> ax:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407029:
	rsp = rsp + 4792
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r13 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r14 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r15 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rsi
// DataOut: fs r10 r11 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> ax:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000406B70_exit:
	use r8 (=> r8Out)
	use r9 (=> r9Out)
	use r10 (=> r10Out)
	use r11 (=> r11Out)
// DataOut: r10 r11 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rax:<invalid> r13:r13 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:r12 rbp:rbp r9:<invalid> r8:<invalid> dil:<invalid> r15:r15 r14:r14 r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> ax:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406DF5:
	rbp = r13
// DataOut: fs r11 r13 r14 r15 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r15:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)



word64 fn0000000000407870(word64 rsi, word64 rdi, word64 r11, word64 r15, selector fs, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r15 rdi rsi
// LiveOut: r10 r11 r12 r15 r8 r9 rsi
// Trashed: SCZOP ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: rbp rbx rsp
fn0000000000407870_entry:
	*r15Out = r15
	*r12Out = r12
// DataOut: fs r11 r13 r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -02C0(0)

l0000000000407870:
	word64 rax_15 = Mem0[fs:0x00000028:word64]
	fn0000000000406A30()
	branch Mem0[0x000000000061B114:byte] != 0x00 l0000000000407970
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l0000000000407970:
	branch Mem0[rdi + 0x00000000000000B0:byte] == 0x00 l0000000000407992
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> eax:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l000000000040797E:
	word64 rdi_197 = Mem0[rdi + 0x0000000000000018:word64]
	branch rdi_197 == 0x0000000000000000 l0000000000407992
// DataOut: dil fs r11 r13 r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:0x0000000000413764 rdi:<invalid> rsi:<invalid> rdx:<invalid> eax:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l0000000000407987:
	word64 rsi_204
	fn000000000040CD70(fp - 0x00000000000002B8, rdi_197, out rsi_204)
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:0x0000000000413764 rdi:<invalid> rsi:<invalid> rdx:<invalid> eax:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l0000000000407992:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l00000000004079A7
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> eax:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l00000000004079A0_1:
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:0x0000000000413779 eax:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l00000000004079A7:
	__printf_chk(0x0000000000000001, 0x0000000000413779, tLoc02C0)
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:0x0000000000413779 edx:<invalid> eax:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l00000000004078A4:
	branch Mem0[0x000000000061B144:byte] == 0x00 l00000000004078E0
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l00000000004078AD:
	branch Mem0[rdi + 0x00000000000000B0:byte] != 0x00 l00000000004079C0
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l00000000004079C0:
	word64 r8_169
	word64 r9_170
	word64 r10_171
	word32 r15d_173
	fn000000000040BD70(0x0000000000000200, (word32) (uint64) Mem0[0x000000000061B140:word32], rsi, fp - 0x00000000000002B8, Mem0[rdi + 0x0000000000000050:word64], Mem0[0x000000000061B138:word64], fs, out r8_169, out r9_170, out r10_171, out r11, out r15d_173)
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:0x0000000000413764 rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l00000000004078BF:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l00000000004078D4
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> r8:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l00000000004078CD_1:
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:0x0000000000413779 rdi:<invalid> r8:<invalid> edx:<invalid> eax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l00000000004078D4:
	__printf_chk(0x0000000000000001, 0x0000000000413779, tLoc02C0)
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:0x0000000000413779 edx:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l00000000004078E0:
	branch Mem0[0x000000000061B17D:byte] == 0x00 l0000000000407911
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l00000000004078E9:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000407900
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l00000000004078F9_1:
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(0)

l0000000000407900:
	__printf_chk(0x0000000000000001, 0x0000000000413779, tLoc02C0)
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l0000000000407911:
	word64 r8_74
	word64 r9_75
	word64 r10_76
	word64 r11_77
	fn0000000000406540(rsi, 0x0000000000000000, 0x00, rdi, r11, r15, fs, out r8_74, out r9_75, out r10_76, out r11_77)
	branch (word32) (uint64) Mem0[0x000000000061B12C:word32] == 0x00000000 l0000000000407948
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l000000000040792D:
	word64 rsi_121
	fn0000000000405D00((word32) (uint64) Mem0[rdi + 0x00000000000000A0:word32], (word32) (uint64) Mem0[rdi + 0x0000000000000028:word32], (byte) (word32) Mem0[rdi + 0x00000000000000B0:byte], out rsi_121)
// DataOut: fs r10 r11 r12 r13 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edx:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> r12d:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> edi:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l0000000000407948:
	word64 rsi_95 = rax_15 ^ Mem0[fs:0x00000028:word64]
	branch rsi_95 != 0x0000000000000000 l00000000004079E6
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> r12d:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l00000000004079E6:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> r12d:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l0000000000407962:
	return rsi_95
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> r12d:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

fn0000000000407870_exit:
// DataOut: r10 r11 r12 r15 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> r12d:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp



word64 fn00000000004079F0(word64 rbp, word64 rsi, word64 r8, word64 r11, word64 r15, selector fs, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r15 r8 rbp rsi
// LiveOut: r10 r11 r8 r9 rsi
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn00000000004079F0_entry:
	*r8Out = r8
	*r9Out = r9
	*r10Out = r10
	*r11Out = r11
// DataOut: fs r10 r11 r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004079F0:
	branch Mem0[0x000000000061B150:word32] >u 0x00000004 l0000000000407A46
// DataOut: fs r10 r11 r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004079F9:
	switch (Mem0[0x000000000061B150:word32]) { l0000000000407C01 l0000000000407C75 l0000000000407CDA l0000000000407A48 l0000000000407B31 }
// DataOut: fs r10 r11 r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407B31:
	branch Mem0[0x000000000061B1B0:word64] == 0x0000000000000000 l0000000000407A18
// DataOut: fs r10 r11 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407B3F:
	word64 rsi_652
	word64 rdi_653
	word64 r8_654
	word64 r9_655
	word64 r10_656
	word64 r14_660
	word64 r11_657
	word64 r13_659
	word64 r12_658
	word64 r15_661
	fn0000000000405D50(Mem0[r8:word64], r11, fs, out rsi_652, out rdi_653, out r8_654, out r9_655, out r10_656, out r11_657, out r12_658, out r13_659, out r14_660, out r15_661)
	word64 rbx_644 = 0x0000000000000000
// DataOut: fs r11 r12 r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407B60:
	rbx_644 = rbx_644 + 0x0000000000000001
	word64 r8_687
	word64 r9_688
	word64 r10_689
	word64 r11_690
	word64 r12_691
	word64 r15_692
	rsi = fn0000000000407870(r12_658, r13_659, r11_657, r15_661, fs, out r8_687, out r9_688, out r10_689, out r11_690, out r12_691, out r15_692)
	branch rbx_644 >=u Mem0[0x000000000061B1B0:word64] l0000000000407A18
// DataOut: fs r10 r11 r8 r9 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> r14:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407B7F:
	word64 rsi_701
	word64 rdi_702
	word64 r8_703
	word64 r9_704
	word64 r10_705
	word64 r14_709
	word64 rax_711 = fn0000000000405D50(Mem0[Mem0[0x000000000061B1A8:word64] + rbx_644 * 0x0000000000000008:word64], r11_690, fs, out rsi_701, out rdi_702, out r8_703, out r9_704, out r10_705, out r11_657, out r12_658, out r13_659, out r14_709, out r15_661)
	branch rbx_644 == 0x0000000000000000 l0000000000407E00
// DataOut: fs r11 r12 r13 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r8:<invalid> r15:<invalid> r14:<invalid> r14d:<invalid> r9:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407E00:
// DataOut: fs r11 r12 r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r8:<invalid> r15:<invalid> r14:<invalid> r14d:<invalid> r9:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407B9B:
	word32 r15d_724
	byte r14b_723
	r12_658 = r13_659 + 0x0000000000000002
	branch rax_711 >=u Mem0[0x000000000061B0C8:word64] l0000000000407E10
// DataOut: fs r11 r12 r13 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r8:<invalid> r15:<invalid> r14:<invalid> r14d:<invalid> r9:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407E10:
	r15_661 = 0x000000000000000A
	r15d_724 = 0x0000000A (alias)
	r14b_723 = 0x0A (alias)
	r12_658 = 0x0000000000000000
// DataOut: fs r11 r12 r13 r14b r15 r15d r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r8:<invalid> r15:<invalid> r14:<invalid> r14d:<invalid> r9:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407BB0:
	r15_661 = 0x0000000000000020
	r15d_724 = 0x00000020 (alias)
	r14b_723 = 0x20 (alias)
// DataOut: fs r11 r12 r13 r14b r15 r15d r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r8:<invalid> r15:<invalid> r14:<invalid> r14d:<invalid> r9:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407BBC:
	word64 rdi_731 = Mem0[0x000000000061A610:word64]
	word64 rax_733 = Mem0[rdi_731 + 0x0000000000000028:word64]
	branch rax_733 >=u Mem0[rdi_731 + 0x0000000000000030:word64] l0000000000407E8B
// DataOut: fs r11 r12 r13 r14b r15 r15d r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> rsi:<invalid> r15:<invalid> r14:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r8:<invalid> r14d:<invalid> r9:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407E8B:
	__overflow(rdi_731, 0x000000000000002C)
// DataOut: fs r11 r12 r13 r14b r15 r15d r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> rsi:<invalid> r15:<invalid> r14:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r8:<invalid> r14d:<invalid> r9:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407BD1:
	Mem753[rdi_731 + 0x0000000000000028:word64] = rax_733 + 0x0000000000000001
	Mem754[rax_733:byte] = 0x2C
// DataOut: fs r11 r12 r13 r14b r15 r15d r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> rsi:<invalid> r15:<invalid> r14:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r8:<invalid> r14d:<invalid> r9:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407BDC:
	word64 rdi_740 = Mem0[0x000000000061A610:word64]
	word64 rax_742 = Mem0[rdi_740 + 0x0000000000000028:word64]
	branch rax_742 >=u Mem0[rdi_740 + 0x0000000000000030:word64] l0000000000407E7E
// DataOut: fs r11 r12 r13 r14b r15 r15d r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> rsi:<invalid> r15:<invalid> r14:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r8:<invalid> r14d:<invalid> r9:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407E7E:
	__overflow(rdi_740, (uint64) r15d_724)
// DataOut: fs r11 r12 r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> rsi:<invalid> r15:<invalid> r14:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r8:<invalid> r14d:<invalid> r9:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407BF1:
	Mem748[rdi_740 + 0x0000000000000028:word64] = rax_742 + 0x0000000000000001
	Mem749[r8_703:byte] = r14b_723
// DataOut: fs r11 r12 r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> rsi:<invalid> r15:<invalid> r14:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r8:<invalid> r14d:<invalid> r9:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407A48:
	word64 rsi_502
	word64 r8_503
	word64 r9_504
	word64 r10_505
	word64 r11_506
	fn0000000000405ED0(rsi, 0x00000000, r8, r11, fs, out rsi_502, out r8_503, out r9_504, out r10_505, out r11_506)
	word64 rbx_513 = Mem0[Mem0[0x000000000061B1A8:word64]:word64]
	word64 rsi_515
	word64 rdi_516
	word64 r8_517
	word64 r9_518
	word64 r10_519
	word64 r11_520
	word64 r12_521
	word64 r14_523
	word64 r15_524
	word64 r13_522
	word64 rax_525 = fn0000000000405D50(rbx_513, r11_506, fs, out rsi_515, out rdi_516, out r8_517, out r9_518, out r10_519, out r11_520, out r12_521, out r13_522, out r14_523, out r15_524)
	word64 rbx_532 = 0x0000000000000001
	word64 r8_536
	word64 r9_537
	word64 r10_538
	word64 r11_539
	word64 r12_540
	word64 r15_541
	rsi = fn0000000000407870(0x0000000000000000, rbx_513, r11_520, r15_524, fs, out r8_536, out r9_537, out r10_538, out r11_539, out r12_540, out r15_541)
	word64 rcx_546 = rax_525
	branch Mem0[0x000000000061B1B0:word64] >u 0x0000000000000001 l0000000000407B0D
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407B0D:
	word64 r15_581
	word64 rdx_570 = (uint64) ((uint128) (uint64) rbx_532 % r13_522)
	branch rdx_570 == 0x0000000000000000 l0000000000407AB0
// DataOut: fs r11 r12 r15 rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> r15:<invalid> rdx:<invalid> r13:<invalid> r14:<invalid> rbx:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rbp:<invalid> eax:<invalid> edi:<invalid> al:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> r11:<invalid> cl:<invalid> dl:<invalid> r9:<invalid> r10:<invalid> r14d:<invalid> dx:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407AB0:
	word64 rdi_621 = Mem0[0x000000000061A610:word64]
	word64 rax_623 = Mem0[rdi_621 + 0x0000000000000028:word64]
	branch rax_623 >=u Mem0[rdi_621 + 0x0000000000000030:word64] l0000000000407E27
// DataOut: fs r11 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> r15:<invalid> rdx:<invalid> r13:<invalid> r14:<invalid> rbx:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rbp:<invalid> eax:<invalid> edi:<invalid> al:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> r11:<invalid> cl:<invalid> dl:<invalid> r9:<invalid> r10:<invalid> r14d:<invalid> dx:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407E27:
	__overflow(rdi_621, 0x000000000000000A)
	r15_581 = 0x0000000000000000
// DataOut: fs r11 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> r15:<invalid> rdx:<invalid> r13:<invalid> r14:<invalid> rbx:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rbp:<invalid> eax:<invalid> edi:<invalid> al:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> r11:<invalid> cl:<invalid> dl:<invalid> r9:<invalid> r10:<invalid> r14d:<invalid> dx:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407AC5:
	Mem633[rdi_621 + 0x0000000000000028:word64] = rax_623 + 0x0000000000000001
	Mem634[rax_623:byte] = 0x0A
	r15_581 = 0x0000000000000000
// DataOut: fs r11 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> r15:<invalid> rdx:<invalid> r13:<invalid> r14:<invalid> rbx:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rbp:<invalid> eax:<invalid> edi:<invalid> al:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> r11:<invalid> cl:<invalid> dl:<invalid> r9:<invalid> r10:<invalid> r14d:<invalid> dx:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407B1D:
	word64 r12_615 = r12_540 + r15_541
	fn0000000000405200(r12_615, rcx_546 + r15_541)
	r15_581 = r12_615
// DataOut: fs r11 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> r15:<invalid> rdx:<invalid> r13:<invalid> r14:<invalid> rbx:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rbp:<invalid> eax:<invalid> edi:<invalid> al:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> r11:<invalid> cl:<invalid> dl:<invalid> r9:<invalid> r10:<invalid> r14d:<invalid> dx:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407AD3:
	word64 r8_589
	word64 r9_590
	word64 r10_591
	word64 r11_592
	word64 r12_593
	word64 r15_594
	fn0000000000407870(r15_581, Mem0[Mem0[0x000000000061B1A8:word64] + rbx_532 * 0x0000000000000008:word64], r11_539, r15_581, fs, out r8_589, out r9_590, out r10_591, out r11_592, out r12_593, out r15_594)
	word64 rdi_599
	word64 r8_600
	word64 r9_601
	word64 r10_602
	word64 r12_604
	word64 r14_606
	rcx_546 = fn0000000000405D50(r12_593, r11_592, fs, out rsi, out rdi_599, out r8_600, out r9_601, out r10_602, out r11_539, out r12_604, out r13_522, out r14_606, out r15_541)
	rbx_532 = rbx_532 + 0x0000000000000001
	r12_540 = Mem0[Mem0[rsi + 0x0000000000000010:word64] + rdx_570 * 0x0000000000000008:word64]
	branch rbx_532 >=u Mem0[0x000000000061B1B0:word64] l0000000000407A18
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> r15:<invalid> rdx:<invalid> r13:<invalid> r14:<invalid> rbx:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rbp:<invalid> eax:<invalid> edi:<invalid> al:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> r11:<invalid> cl:<invalid> dl:<invalid> r9:<invalid> r10:<invalid> r14d:<invalid> dx:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407AA1:
// DataOut: fs r10 r11 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> r15:<invalid> rdx:<invalid> r13:<invalid> r14:<invalid> rbx:0x0000000000000001 rsi:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> r11:<invalid> cl:<invalid> esi:<invalid> dl:<invalid> r9:<invalid> r10:<invalid> r14d:<invalid> dx:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407A18:
	word64 rdi_469 = Mem0[0x000000000061A610:word64]
	word64 rax_471 = Mem0[rdi_469 + 0x0000000000000028:word64]
	branch rax_471 >=u Mem0[rdi_469 + 0x0000000000000030:word64] l0000000000407E39
// DataOut: fs r10 r11 r8 r9 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> r15:<invalid> rdx:<invalid> r13:<invalid> r14:<invalid> rbx:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rbp:<invalid> eax:<invalid> edi:<invalid> al:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r11:<invalid> dl:<invalid> r9:<invalid> r14d:<invalid> r10:<invalid> dx:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407E39:
	__overflow(rdi_469, 0x000000000000000A)
	return 0x000000000000000A
// DataOut: fs r10 r11 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> r15:<invalid> rdx:<invalid> r13:<invalid> r14:<invalid> rbx:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rbp:<invalid> eax:<invalid> edi:<invalid> al:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r11:<invalid> dl:<invalid> r9:<invalid> r14d:<invalid> r10:<invalid> dx:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407A2D:
	Mem477[rdi_469 + 0x0000000000000028:word64] = rax_471 + 0x0000000000000001
	Mem478[rax_471:byte] = 0x0A
// DataOut: fs r10 r11 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> r15:<invalid> rdx:<invalid> r13:<invalid> r14:<invalid> rbx:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rbp:<invalid> eax:<invalid> edi:<invalid> al:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> r11:<invalid> dl:<invalid> r9:<invalid> r14d:<invalid> r10:<invalid> dx:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407CDA:
	word64 r8_306
	word64 r9_307
	word64 r10_308
	word64 r11_309
	word64 rax_310 = fn0000000000405ED0(rsi, 0x00000001, r8, r11, fs, out rsi, out r8_306, out r9_307, out r10_308, out r11_309)
	word128 rdx_rax_317 = (uint128) (uint64) Mem0[0x000000000061B1B0:word64]
	word64 rdx_319 = (uint64) (rdx_rax_317 % rax_310)
	word64 rdx_326 = DPB(rdx_319, (word32) (rdx_319 != 0x0000000000000000), 0) + (uint64) (rdx_rax_317 /u rax_310)
	branch rdx_326 == 0x0000000000000000 l0000000000407A38
// DataOut: fs r10 r11 r8 r9 rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0050(64)

l0000000000407D1A:
	word64 qwLoc40_334 = 0x0000000000000000
// DataOut: fs r11
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r15:<invalid> dl:<invalid> edx:<invalid> r8:<invalid> rsi:<invalid> r11:<invalid> eax:<invalid> edi:<invalid> al:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> dx:<invalid> esi:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0048(64) Local -0050(64)

l0000000000407D30:
	word64 rbp_356 = 0x0000000000000000
	word64 rbx_357 = 0x0000000000000000
	word64 r13_361 = qwLoc40_334 * 0x0000000000000008
// DataOut: fs r11 r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r15:<invalid> dl:<invalid> edx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> eax:<invalid> edi:<invalid> al:<invalid> r11:<invalid> esi:<invalid> cl:<invalid> r9:<invalid> r10:<invalid> r14d:<invalid> dx:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0048(64) Local -0050(64)

l0000000000407D6B:
	word64 rsi_371
	word64 rdi_372
	word64 r8_373
	word64 r9_374
	word64 r10_375
	word64 r11_376
	word64 r12_377
	word64 r13_378
	word64 r14_379
	word64 r15_380
	word64 rax_381 = fn0000000000405D50(Mem0[Mem0[0x000000000061B1A8:word64] + r13_361:word64], r11_309, fs, out rsi_371, out rdi_372, out r8_373, out r9_374, out r10_375, out r11_376, out r12_377, out r13_378, out r14_379, out r15_380)
	word64 rcx_386 = Mem0[Mem0[rdi_372 + 0x0000000000000010:word64] + rbp_356:word64]
	rbp_356 = rbp_356 + 0x0000000000000008
	word64 r8_390
	word64 r9_391
	word64 r10_392
	word64 r12_394
	word64 r15_395
	rsi = fn0000000000407870(rbx_357, r14_379, r11_376, r15_380, fs, out r8_390, out r9_391, out r10_392, out r11_309, out r12_394, out r15_395)
	r13_361 = r13_378 + rdx_326 * 0x0000000000000008
	branch r12_394 + rdx_326 <u Mem0[0x000000000061B1B0:word64] l0000000000407D50
// DataOut: fs r10 r11 r13 r8 r9 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r15:<invalid> dl:<invalid> edx:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r8:<invalid> esi:<invalid> cl:<invalid> r11:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0048(64) Local -0050(64) Local -0058(64) Local -0060(64)

l0000000000407D50:
	word64 r14_440 = rcx_386 + rbx_357
	fn0000000000405200(r14_440, rax_381 + rbx_357)
	rbx_357 = r14_440
// DataOut: fs r11 r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r15:<invalid> dl:<invalid> edx:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r11:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0048(64) Local -0050(64)

l0000000000407DB2:
	word64 rdi_402 = Mem0[0x000000000061A610:word64]
	word64 rax_404 = Mem0[rdi_402 + 0x0000000000000028:word64]
	branch rax_404 >=u Mem0[rdi_402 + 0x0000000000000030:word64] l0000000000407E51
// DataOut: fs r10 r11 r8 r9 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r15:<invalid> dl:<invalid> edx:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r11:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0048(64) Local -0050(64)

l0000000000407E51:
	__overflow(rdi_402, 0x000000000000000A)
	rsi = 0x000000000000000A
// DataOut: fs r10 r11 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r15:<invalid> dl:<invalid> edx:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r11:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0048(64) Local -0050(64)

l0000000000407DC7:
	Mem433[rdi_402 + 0x0000000000000028:word64] = rax_404 + 0x0000000000000001
	Mem434[rax_404:byte] = 0x0A
// DataOut: fs r10 r11 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r15:<invalid> dl:<invalid> edx:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r11:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0048(64) Local -0050(64)

l0000000000407DD2:
	word64 v33_413 = qwLoc40_334 + 0x0000000000000001
	qwLoc40_334 = v33_413
	branch v33_413 != rdx_326 l0000000000407D30
// DataOut: fs r10 r11 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r15:<invalid> dl:<invalid> edx:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> rsi:<invalid> eax:<invalid> edi:<invalid> al:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r11:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -0048(64) Local -0050(64)

l0000000000407DE8:
// DataOut: fs r10 r11 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r15:<invalid> dl:<invalid> edx:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> rsi:<invalid> eax:<invalid> edi:<invalid> al:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r11:<invalid> r9:<invalid> r14d:<invalid> dx:<invalid> r10:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407C75:
	word64 rbx_245 = 0x0000000000000000
	branch Mem0[0x000000000061B1B0:word64] == 0x0000000000000000 l0000000000407A38
// DataOut: fs r10 r11 r15 r8 r9 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407C85:
// DataOut: fs r11 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407C88:
	word64 r8_260
	word64 r9_261
	word64 r10_262
	word64 r12_264
	rsi = fn0000000000407870(0x0000000000000000, Mem0[Mem0[0x000000000061B1A8:word64] + rbx_245 * 0x0000000000000008:word64], r11, r15, fs, out r8_260, out r9_261, out r10_262, out r11, out r12_264, out r15)
	word64 rdi_268 = Mem0[0x000000000061A610:word64]
	word64 rax_270 = Mem0[rdi_268 + 0x0000000000000028:word64]
	branch rax_270 >=u Mem0[rdi_268 + 0x0000000000000030:word64] l0000000000407E60
// DataOut: fs r10 r11 r15 r8 r9 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> r12d:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407E60:
	__overflow(rdi_268, 0x000000000000000A)
	rsi = 0x000000000000000A
// DataOut: fs r10 r11 r15 r8 r9 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> r12d:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407CAF:
	Mem298[rdi_268 + 0x0000000000000028:word64] = rax_270 + 0x0000000000000001
	Mem299[rax_270:byte] = 0x0A
// DataOut: fs r10 r11 r15 r8 r9 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> r12d:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407CBA:
	rbx_245 = rbx_245 + 0x0000000000000001
	branch Mem0[0x000000000061B1B0:word64] >u rbx_245 l0000000000407C88
// DataOut: fs r10 r11 r15 r8 r9 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> r12d:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407CC7:
// DataOut: fs r10 r11 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> r12d:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407C01:
	word64 rbx_190 = 0x0000000000000000
	branch Mem0[0x000000000061B1B0:word64] == 0x0000000000000000 l0000000000407A38
// DataOut: fs r10 r11 r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407A38:
// DataOut: fs r10 r11 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r15:<invalid> dl:<invalid> edx:<invalid> r13:<invalid> r14:<invalid> rsi:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> eax:<invalid> edi:<invalid> al:<invalid> r11:<invalid> esi:<invalid> cl:<invalid> r9:<invalid> r10:<invalid> r14d:<invalid> dx:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> ebp:<invalid> r11d:<invalid> -96(fp):<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407C11:
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407C18:
	fn0000000000406A30()
	word64 r8_202
	word64 r9_203
	word64 r10_204
	rsi = fn0000000000406B70(rbp, Mem0[Mem0[0x000000000061B1A8:word64] + rbx_190 * 0x0000000000000008:word64], r11, r15, fs, out r8_202, out r9_203, out r10_204, out r11)
	word64 rdi_208 = Mem0[0x000000000061A610:word64]
	word64 rax_210 = Mem0[rdi_208 + 0x0000000000000028:word64]
	branch rax_210 >=u Mem0[rdi_208 + 0x0000000000000030:word64] l0000000000407E6F
// DataOut: fs r10 r11 r15 r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> eax:<invalid> al:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r8d:<invalid> r14d:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> ax:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407E6F:
	__overflow(rdi_208, 0x000000000000000A)
	rsi = 0x000000000000000A
// DataOut: fs r10 r11 r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> eax:<invalid> al:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r8d:<invalid> r14d:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> ax:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407C42:
	Mem240[rdi_208 + 0x0000000000000028:word64] = rax_210 + 0x0000000000000001
	Mem241[rax_210:byte] = 0x0A
// DataOut: fs r10 r11 r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> eax:<invalid> al:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r8d:<invalid> r14d:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> ax:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407C4D:
	Mem220[0x000000000061B018:word64] = Mem0[0x000000000061B018:word64] + 0x0000000000000001
	rbx_190 = rbx_190 + 0x0000000000000001
	branch Mem220[0x000000000061B1B0:word64] >u rbx_190 l0000000000407C18
// DataOut: fs r10 r11 r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> eax:<invalid> al:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r8d:<invalid> r14d:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> ax:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407C62:
// DataOut: fs r10 r11 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rax:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> eax:<invalid> al:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r8d:<invalid> r14d:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r10:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> ax:<invalid> ebp:<invalid> ah:<invalid> r15d:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407A46:
	return rsi
// DataOut: fs r10 r11 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rbx:rbx rdi:<invalid> rdx:<invalid> rcx:<invalid> r15:r15 dl:<invalid> edx:<invalid> rbp:rbp r12:r12 r13:r13 r14:r14 rsi:<invalid> eax:<invalid> r8:<invalid> edi:<invalid> al:<invalid> r11:<invalid> esi:<invalid> cl:<invalid> r9:<invalid> r10:<invalid> r14d:<invalid> dx:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> dil:<invalid> r8d:<invalid> ebx:<invalid> r9d:<invalid> r11d:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> sil:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn00000000004079F0_exit:
// DataOut: r10 r11 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rbx:rbx rdi:<invalid> rdx:<invalid> rcx:<invalid> r15:r15 dl:<invalid> edx:<invalid> rbp:rbp r12:r12 r13:r13 r14:r14 rsi:<invalid> eax:<invalid> r8:<invalid> edi:<invalid> al:<invalid> esi:<invalid> r11:<invalid> cl:<invalid> r9:<invalid> r14d:<invalid> r10:<invalid> dx:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> dil:<invalid> r8d:<invalid> ah:<invalid> ebx:<invalid> r15d:<invalid> r9d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn0000000000407EA0(word64 rcx, word32 edx, word64 rsi, word64 rdi, word64 r8, word64 r10, word64 r11, word64 r14, word64 r15, selector fs, ptr64 & ebxOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12dOut, ptr64 & r13dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx esi fs r10 r11 r14 r15 r8 rcx rdi rsi
// LiveOut: ebx r10 r11 r12d r13d r8 r9 rax rsi
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn0000000000407EA0_entry:
// DataOut: edi edx esi fs r10 r11 r12d r14 r15 r8 rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407EA0:
	rsp = fp
	rsp = fp - 0x0000000000000008
	qwLoc08 = rbp
	rbp = fp - 0x0000000000000008
	rsp = fp - 0x0000000000000010
	qwLoc10 = r15
	rsp = fp - 0x0000000000000018
	qwLoc18 = r14
	rsp = fp - 0x0000000000000020
	qwLoc20 = r13
	r13 = (uint64) esi
	rsp = fp - 0x0000000000000028
	qwLoc28 = r12
	rsp = fp - 0x0000000000000030
	qwLoc30 = rbx
	rbx = rdi
	rsp = fp - 0x00000000000003A8
	dwLoc038C = edx
	rdx = rcx
	rax = Mem0[fs:0x00000028:word64]
	qwLoc40 = rax
	rax = 0x0000000000000000
	rcx = Mem0[0x000000000061B1B0:word64]
	ecx = (word32) rcx (alias)
	cl = (byte) rcx (alias)
	SCZO = cond(rcx - Mem0[0x000000000061B1B8:word64])
	Z = (bool) SCZO (alias)
	r9 = Mem0[0x000000000061B1C0:word64]
	r9d = (word32) r9 (alias)
	r9w = (word16) r9 (alias)
	branch Test(EQ,Z) l0000000000408400
// DataOut: cl ebx fs r10 r11 r12d r13 r13d r14 r15 r8 r9 r9b rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -038C(0)

l0000000000408400:
	rax = 0x00000000AAAAAAAA
	rdi = Mem0[0x000000000061B1C0:word64]
	SCZO = cond(rcx - 0x00000000AAAAAAAA)
	branch Test(UGT,CZ) l0000000000408C7B
// DataOut: ebx fs r10 r11 r12d r13 r13d r14 r15 r9 rbp rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000408C7B:
	fn0000000000410E50()
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	r8 = (uint64) Mem0[r14 + 0x00000000000000A0:word32]
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000009)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000003)
	r8b = Test(EQ,Z)
	rdx = (uint64) (edx | r8d)
	al = al | cl
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l0000000000408CE8
// DataOut: al dl ebx fs r10 r11 r12d r13d r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:0x00000000AAAAAAAA rcx:<invalid> r9:<invalid> rdi:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// Terminates process

l0000000000408CE8:
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l0000000000408CAF
// DataOut: al dl ebx fs r10 r11 r12d r13d r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CEC:
// DataOut: ebx fs r10 r11 r12d r13d r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CAF:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000408CC0
// DataOut: dl ebx fs r10 r11 r12d r13d r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CB3:
	SZO = cond(dl & dl)
	C = false
	rax = 0x0000000000000001
	branch Test(EQ,Z) l0000000000408CC0
// DataOut: ebx fs r10 r11 r12d r13d r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CC0:
	rcx = Mem0[rsi + 0x0000000000000068:word64]
	SCZO = cond(Mem0[rdi + 0x0000000000000068:word64] - rcx)
	rax = Mem0[rdi + 0x0000000000000070:word64]
	rdx = Mem0[rsi + 0x0000000000000070:word64]
	branch Test(GT,SZO) l0000000000408CF0
// DataOut: eax ebx edx fs r10 r11 r12d r13d r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): SO
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CF0:
	rax = 0x00000000FFFFFFFF
	return rax
// DataOut: ebx fs r10 r11 r12d r13d r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CD2:
	branch Test(LT,SO) l0000000000408D00
// DataOut: eax ebx edx fs r10 r11 r12d r13d r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408D00:
	rax = 0x0000000000000001
	return rax
// DataOut: ebx fs r10 r11 r12d r13d r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CD4:
	rdx = (uint64) (edx - eax)
	SCZO = cond(edx)
	branch Test(NE,Z) l0000000000408D06
// DataOut: ebx edx fs r10 r11 r12d r13d r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408D06:
	rax = (uint64) edx
	return rax
// DataOut: ebx fs r10 r11 r12d r13d r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CD8:
	rsi = Mem0[rsi:word64]
	rdi = Mem0[rdi:word64]
// DataOut: fs r10 r11 r12d r13d r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405020:
	rsp = rsp - 0x0000000000000008
	Mem0[rsp:word64] = rbp
	rbp = rsi
	rsp = rsp - 0x0000000000000008
	Mem0[rsp:word64] = rbx
	rbx = rdi
	rsp = rsp - 0x0000000000000008
	rax = __errno_location()
	Mem0[rax:word32] = 0x00000000
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	rdi = rbx
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	eax = strcoll(rdi, rsi)
	return rax
// DataOut: ebx fs r10 r11 r12d r13d r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CBC:
	return rax
// DataOut: ebx fs r10 r11 r12d r13d r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rax:0x0000000000000001 r8:<invalid> cl:Test(EQ,Z) al:0x01 dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040841A:
	rsi = rcx + rcx * 0x0000000000000002
	qwLoc0398 = rdx
	rsi = rsi << 0x0000000000000007
	SCZO = cond(rsi)
	rax = fn0000000000410C90(rdx, rsi, rdi, out r8)
	v29 = Mem0[0x000000000061B1B8:word64] << 0x0000000000000001
	Mem0[0x000000000061B1B8:word64] = v29
	SCZO = cond(v29)
	Mem0[0x000000000061B1C0:word64] = rax
	r9 = rax
	rcx = Mem0[0x000000000061B1B0:word64]
	rdx = qwLoc0398
// DataOut: cl fs r10 r11 r13 r13d r15 r8 r9 r9b rbp rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:0x00000000AAAAAAAA rcx:<invalid> r9:<invalid> rdi:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000407EED:
	rcx = rcx + rcx * 0x0000000000000002
	rsi = 0x00000000000000C0
	rcx = rcx << 0x0000000000000006
	r14 = r9 + rcx
	SZO = cond(r14b & 0x01)
	C = false
	rdi = r14
	branch Test(NE,Z) l0000000000408A18
// DataOut: dil esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rdi:<invalid> rsi:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000408A18:
	Mem0[0x00000000000000C0:byte] = 0x00
	rdi = 0x00000000000000C1
	sil = 0xBF
// DataOut: dil esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000000000C0 r14:<invalid> rdi:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000407F0B:
	SZO = cond(dil & 0x02)
	C = false
	branch Test(NE,Z) l00000000004089E0
// DataOut: dil esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l00000000004089E0:
	r9 = 0x0000000000000000
	rdi = rdi + 0x0000000000000002
	rsi = (uint64) (esi - 0x00000002)
	Mem0[r15 - 0x0000000000000002:word16] = r9w
	SZO = cond(dil & 0x04)
	C = false
	branch Test(EQ,Z) l0000000000407F1F
// DataOut: esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l00000000004089F9:
// DataOut: esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000407F15:
	SZO = cond(dil & 0x04)
	C = false
	branch Test(NE,Z) l0000000000408A00
// DataOut: esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000408A00:
	Mem0[rdi:word32] = 0x00000000
	rsi = (uint64) (esi - 0x00000004)
	rdi = rdi + 0x0000000000000004
	SCZO = cond(rdi)
// DataOut: esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000407F1F:
	rcx = (uint64) esi
	rax = 0x0000000000000000
	rcx = (uint64) (ecx >>u 0x00000003)
	SZO = cond(sil & 0x04)
	C = false
// DataOut: esi fs r10 r11 r13 r13d r14 r15 r8 r9 rax rbp rbx rcx rdi rdx rsp sil
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000407F2A:
	branch rcx == 0x0000000000000000 l0000000000407F2D
// DataOut: esi fs r10 r11 r13 r13d r14 r15 r8 r9 rax rbp rbx rcx rdi rdx rsp sil
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000407F2D:
	branch Test(NE,Z) l0000000000408360
// DataOut: esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000408360:
	Mem0[rdi:word32] = 0x00000000
	rdi = rdi + 0x0000000000000004
	SZO = cond(sil & 0x02)
	C = false
	branch Test(EQ,Z) l0000000000407F3D
// DataOut: esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000408374:
// DataOut: esi fs r10 r11 r13 r13d r14 r15 r9 rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000407F33:
	SZO = cond(sil & 0x02)
	C = false
	branch Test(NE,Z) l0000000000408340
// DataOut: esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000408340:
	r8 = 0x0000000000000000
	rdi = rdi + 0x0000000000000002
	Mem0[r15 - 0x0000000000000002:word16] = r8w
	rsi = (uint64) (esi & 0x00000001)
	SZO = cond(esi)
	C = false
	branch Test(EQ,Z) l0000000000407F46
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000408355:
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000407F3D:
	rsi = (uint64) (esi & 0x00000001)
	SZO = cond(esi)
	C = false
	branch Test(NE,Z) l0000000000408338
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000408338:
	Mem0[rdi:byte] = 0x00
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000407F46:
	SCZO = cond(bLoc038C - 0x00)
	Mem0[rsi + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[r14 + 0x00000000000000A0:word32] = r13d
	branch Test(EQ,Z) l0000000000408220
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000408220:
	SCZO = cond(Mem0[0x000000000061B0C1:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l000000000040822D:
	SCZO = cond(r13d - 0x00000003)
	branch Test(EQ,Z) l0000000000408910
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000408910:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408237
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l000000000040891D:
	rdi = 0x0000000000000013
	qwLoc0398 = rdx
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0) Local -0398(64)

l000000000040893D:
	rdi = 0x0000000000000012
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0) Local -0398(64)

l0000000000408956:
	rdi = 0x0000000000000014
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l000000000040896F:
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000408237:
	eax = (word32) Mem0[0x000000000061B114:byte]
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000408818
// DataOut: al fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000408818:
	SCZO = cond(Mem0[0x000000000061B0C0:byte] - 0x00)
	branch Test(NE,Z) l0000000000408246
// DataOut: al fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000408246:
	SZO = cond(r13d & r13d)
	C = false
	sil = Test(EQ,Z)
	branch Test(EQ,Z) l0000000000408255
// DataOut: al fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l000000000040824F:
	SCZO = cond(r13d - 0x00000006)
	branch Test(NE,Z) l0000000000408280
// DataOut: al fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000408255:
	rcx = (uint64) Mem0[0x000000000061B110:word32]
	SCZO = cond(ecx - 0x00000005)
	branch Test(EQ,Z) l0000000000408BD0
// DataOut: al ecx fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000408BD0:
	rcx = 0x0000000000000005
// DataOut: ecx fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000408264:
	SCZO = cond(Mem0[0x000000000061B198:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F68
// DataOut: al ecx fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000408271:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F68
// DataOut: al ecx fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l000000000040827E:
// DataOut: al fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000408280:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000408288:
	SCZO = cond(Mem0[0x000000000061B0C0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408825
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000408825:
	r12 = 0x0000000000000000
	SZO = cond(r12d)
	C = false
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408295:
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l000000000040829E:
	r12 = 0x0000000000000000
	SCZO = cond(r13d - 0x00000005)
	branch Test(NE,Z) l00000000004081E1
// DataOut: fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l00000000004082AB:
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000003)
	branch Test(EQ,Z) l0000000000407F62
// DataOut: fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l00000000004082B8:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081E1
// DataOut: fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l00000000004082C5:
	rdi = 0x000000000000000E
	qwLoc0398 = rdx
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0) Local -0398(64)

l00000000004082E5:
	rdi = 0x0000000000000010
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0) Local -0398(64)

l00000000004082FE:
	rdi = 0x0000000000000011
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0) Local -0398(64)

l0000000000408317:
	rdi = 0x0000000000000015
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000408330:
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000407F62:
	rcx = (uint64) Mem0[0x000000000061B110:word32]
// DataOut: ecx fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r12:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000407F68:
	esi = (word32) Mem0[rbx:byte]
	r12 = rbx
	SCZO = cond(sil - 0x2F)
	branch Test(EQ,Z) l0000000000407F81
// DataOut: ecx esi fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r12:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000407F74:
	r15d = (word32) Mem0[r10:byte]
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l0000000000408670
// DataOut: ecx esi fs r10 r11 r12 r13 r13d r14 r15b r8 r9 rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:rdi sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)

l0000000000408670:
	rdi = rbx
	dwLoc039C = ecx
	dwLoc0390 = esi
	qwLoc0398 = rdx
	eax = strlen(rdi)
	rdx = qwLoc0398
	r12 = rax
	rdi = rdx
	eax = strlen(rdi)
	rax = r12 + 0x0000000000000020 + rax
	rdx = qwLoc0398
	rsi = (uint64) dwLoc0390
	rcx = (uint64) dwLoc039C
	rax = rax & 0xFFFFFFFFFFFFFFF0
	rsp = fp - 0x00000000000003A8 - rax
	rax = rsp + 0x000000000000000F
	rax = rax & 0xFFFFFFFFFFFFFFF0
	SCZO = cond(r15b - 0x2E)
	r12 = rax
	branch Test(EQ,Z) l0000000000408B30
// DataOut: ecx fs r10 r11 r12 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:rdi r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408B30:
	SCZO = cond(Mem0[rdx + 0x0000000000000001:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408705
// DataOut: ecx fs r10 r11 r12 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408B3A:
// DataOut: ecx fs r10 r11 r12 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l00000000004086D2:
	rsi = rdx
// DataOut: ecx fs r10 r11 r12 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l00000000004086D8:
	rax = rax + 0x0000000000000001
	rsi = rsi + 0x0000000000000001
	Mem0[r8 - 0x0000000000000001:byte] = r15b
	r15d = (word32) Mem0[r14:byte]
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l00000000004086D8
// DataOut: ecx fs r10 r11 r12 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l00000000004086ED:
	SCZO = cond(rdx - rsi)
	rdi = rax
	branch Test(UGE,C) l0000000000408702
// DataOut: ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l00000000004086F5:
	SCZO = cond(Mem0[rsi - 0x0000000000000001:byte] - 0x2F)
	branch Test(EQ,Z) l0000000000408702
// DataOut: ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rax rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l00000000004086FB:
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	Mem0[rdi:byte] = 0x2F
// DataOut: ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408702:
	esi = (word32) Mem0[rbx:byte]
// DataOut: ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rax rbp rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408705:
	SZO = cond(sil & sil)
	C = false
	branch Test(EQ,Z) l0000000000408724
// DataOut: ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rax rbp rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l000000000040870A:
	rdx = rbx
// DataOut: ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408710:
	rax = rax + 0x0000000000000001
	rdx = rdx + 0x0000000000000001
	Mem0[rax - 0x0000000000000001:byte] = sil
	esi = (word32) Mem0[rdx:byte]
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l0000000000408710
// DataOut: ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408724:
	Mem0[rax:byte] = 0x00
// DataOut: ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407F81:
	SCZO = cond(ecx - 0x00000003)
	branch Test(ULT,C) l0000000000407FFD
// DataOut: ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407F86:
	SCZO = cond(ecx - 0x00000004)
	branch Test(ULE,CZ) l0000000000407FF0
// DataOut: ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407FF0:
	SCZO = cond(bLoc038C - 0x00)
	branch Test(NE,Z) l00000000004088B0
// DataOut: ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004088B0:
	r15 = r14 + 0x0000000000000010
	rsi = r12
	rdi = 0x0000000000000001
	dwLoc0398 = ecx
	rdx = r15
	eax = __xstat(0x0000000000000001, rsi, rdx)
	rcx = (uint64) dwLoc0398
	rdx = (uint64) eax
	rsi = 0x0000000000000001
	SCZO = cond(ecx - 0x00000003)
	branch Test(EQ,Z) l0000000000408015
// DataOut: eax edx esi fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004088E0:
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000408B5E
// DataOut: eax edx fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:0x01 al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):ecx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408B5E:
	dwLoc0398 = eax
	rax = __errno_location()
	SCZO = cond(Mem0[rax:word32] - 0x00000002)
	rdx = (uint64) dwLoc0398
	al = Test(EQ,Z)
// DataOut: al edx fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:0x01 al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):ecx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004088E8:
	rax = (uint64) Mem0[0x0000000000000029:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x00004000)
	al = Test(NE,Z)
// DataOut: al edx fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:0x01 al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):ecx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004088F9:
	SZO = cond(al & al)
	C = false
	rsi = 0x0000000000000001
	branch Test(EQ,Z) l0000000000408015
// DataOut: edx esi fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:0x01 cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408906:
// DataOut: fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:0x01 cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000407F8B:
	SCZO = cond(ecx - 0x00000005)
	branch Test(NE,Z) l0000000000407FFD
// DataOut: fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000407FFD:
	r15 = r14 + 0x0000000000000010
// DataOut: fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408001:
	rdx = r15
	rsi = r12
	rdi = 0x0000000000000001
	eax = __lxstat(0x0000000000000001, rsi, rdx)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = (uint64) eax
// DataOut: edx esi fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408015:
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l0000000000407FB1
// DataOut: edx esi fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000407F92:
	r15 = r14 + 0x0000000000000010
	rsi = r12
	rdi = 0x0000000000000001
	rdx = r15
	eax = __xstat(0x0000000000000001, rsi, rdx)
	rdx = (uint64) eax
	rsi = 0x0000000000000001
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000408019
// DataOut: edx esi fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408019:
	SCZO = cond(r13d - 0x00000005)
	Mem0[rsi + 0x00000000000000B0:byte] = 0x01
	branch Test(EQ,Z) l0000000000408380
// DataOut: edx esi fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040802B:
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x00008000)
	branch Test(EQ,Z) l0000000000408380
// DataOut: edx esi fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408380:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l000000000040803F
// DataOut: edx esi fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040838D:
	rdi = 0x0000000000000015
	dwLoc0390 = esi
	dwLoc0398 = edx
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = (uint64) dwLoc0398
	rsi = (uint64) dwLoc0390
	branch Test(EQ,Z) l000000000040803F
// DataOut: edx esi fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -0390(64) Local -0398(64)

l00000000004083B7:
	r13 = Mem0[r14 + 0x0000000000000010:word64]
	SCZO = cond(r13 - Mem0[0x000000000061A678:word64])
	branch Test(EQ,Z) l0000000000408C1F
// DataOut: edx esi fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -0390(64) Local -0398(64)

l0000000000408C1F:
	rax = __errno_location()
	rdx = (uint64) dwLoc0398
	Mem0[rax:word32] = 0x0000005F
	rsi = (uint64) dwLoc0390
// DataOut: edx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004083C8:
	dwLoc0390 = esi
	dwLoc0398 = edx
	rax = __errno_location()
	rsi = (uint64) dwLoc0390
	rdx = (uint64) dwLoc0398
	Mem0[rax:word32] = 0x0000005F
	Mem0[0x000000000061A678:word64] = r13
// DataOut: edx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004083F2:
	Mem0[rsi + 0x00000000000000B8:byte] = 0x00
// DataOut: edx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040803F:
	rcx = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l0000000000408056
// DataOut: edx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408049:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l00000000004080EF
// DataOut: edx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408056:
	rax = Mem0[0x000000000061A670:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000010:word64] - rax)
	dwLoc0398 = edx
	branch Test(EQ,Z) l0000000000408C52
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -0398(64)

l0000000000408C52:
	rax = __errno_location()
	r13 = 0x0000000000000000
	SZO = cond(r13d)
	C = false
	Mem0[rax:word32] = 0x0000005F
	rdx = (uint64) dwLoc0398
	Mem0[rsi + 0x00000000000000A8:word64] = 0x000000000061A56A
// DataOut: edx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040806D:
	SZO = cond(sil & sil)
	C = false
	rdi = r12
	rsi = rsi + 0x00000000000000A8
	branch Test(EQ,Z) l0000000000408458
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -0398(64)

l0000000000408458:
	eax = fn0000000000411840(rsi, rdi)
	SZO = cond(eax & eax)
	C = false
	rdx = (uint64) dwLoc0398
	branch Test(NS,S) l0000000000408093
// DataOut: edx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408080:
	eax = fn0000000000411820(rsi, rdi)
	SZO = cond(eax & eax)
	C = false
	rdx = (uint64) dwLoc0398
	branch Test(SG,S) l000000000040846B
// DataOut: edx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040846B:
	dwLoc0398 = edx
	rax = __errno_location()
	rax = (uint64) Mem0[rax:word32]
	rdx = (uint64) dwLoc0398
	SCZO = cond(eax - 0x00000016)
	branch Test(EQ,Z) l000000000040848C
// DataOut: eax edx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408483:
	SCZO = cond(eax - 0x00000026)
	branch Test(NE,Z) l00000000004089C0
// DataOut: eax edx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004089C0:
	SCZO = cond(eax - 0x0000005F)
	branch Test(NE,Z) l0000000000408497
// DataOut: eax edx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004089C9:
// DataOut: eax edx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040848C:
	rcx = Mem0[rsi + 0x0000000000000010:word64]
	Mem0[0x000000000061A670:word64] = rcx
// DataOut: eax edx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408497:
	SCZO = cond(eax - 0x0000005F)
	Mem0[rsi + 0x00000000000000A8:word64] = 0x000000000061A56A
	branch Test(EQ,Z) l00000000004089D0
// DataOut: eax edx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004084AB:
	SCZO = cond(eax - 0x0000003D)
	branch Test(EQ,Z) l00000000004089D0
// DataOut: edx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004089D0:
	r13 = 0x0000000000000000
	SZO = cond(r13d)
	C = false
// DataOut: edx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004084B4:
	Mem0[rsi + 0x00000000000000B4:word32] = 0x00000000
// DataOut: fs r11 r12 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408093:
	rdi = Mem0[rsi + 0x00000000000000A8:word64]
	rsi = 0x00000000004137B1
	rcx = 0x000000000000000A
// DataOut: edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080A4:
	branch rcx == 0x0000000000000000 l00000000004080A6
// DataOut: edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080A4_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 0x0000000000000001
	rdi = rdi + 0x0000000000000001
	rcx = rcx - 0x0000000000000001
	branch Test(NE,Z) l00000000004080A4
// DataOut: edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080A6:
	r13b = Test(NE,Z)
// DataOut: edx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080AA:
	rax = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000408830
// DataOut: edx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408830:
	rax = Mem0[0x000000000061A668:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000010:word64] - rax)
	branch Test(EQ,Z) l0000000000408B40
// DataOut: edx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408B40:
	dwLoc0398 = edx
	rax = __errno_location()
	rcx = 0x0000000000000000
	SZO = cond(ecx)
	C = false
	Mem0[rax:word32] = 0x0000005F
	rdx = (uint64) dwLoc0398
// DataOut: cl edx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408841:
	dwLoc0390 = edx
	rax = __errno_location()
	rsi = r15
	Mem0[rax:word32] = 0x00000000
	rdi = r12
	qwLoc0398 = rax
	rax = fn0000000000409CC0(rsi, rdi)
	SZO = cond(eax & eax)
	C = false
	rcx = 0x0000000000000001
	r8 = Mem0[r13 - 0x0000000000000390:word64]
	rdx = (uint64) dwLoc0390
	branch Test(GT,SZO) l00000000004080BA
// DataOut: cl eax edx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040887E:
	rdx = (uint64) Mem0[rax:word32]
	SCZO = cond(edx - 0x00000016)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax edx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 -924(fp):ecx -920(fp):<invalid> -912(fp):edx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040888A:
	SCZO = cond(edx - 0x00000026)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax edx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 -924(fp):ecx -920(fp):<invalid> -912(fp):edx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408893:
	SCZO = cond(edx - 0x0000005F)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 -924(fp):ecx -920(fp):<invalid> -912(fp):edx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408C3B:
	rdx = Mem0[rsi + 0x0000000000000010:word64]
	rax = (uint64) (eax >>u 0x0000001F)
	rcx = 0x0000000000000000
	SZO = cond(ecx)
	C = false
	Mem0[0x000000000061A668:word64] = rdx
	rdx = (uint64) eax
// DataOut: cl edx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 -924(fp):ecx -920(fp):<invalid> -912(fp):edx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040889C:
	rax = (uint64) (eax >>u 0x0000001F)
	SCZO = cond(eax)
	rdx = (uint64) eax
// DataOut: edx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 -924(fp):ecx -920(fp):<invalid> -912(fp):edx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080B8:
	rcx = 0x0000000000000000
	SZO = cond(ecx)
	C = false
// DataOut: cl edx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080BA:
	rsi = (uint64) ecx
	rax = 0x0000000000000000
	sil = sil | r13b
	SZO = cond(sil)
	C = false
	branch Test(EQ,Z) l00000000004080D9
// DataOut: cl eax edx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080C3:
	rcx = (uint64) (ecx ^ 0x00000001)
	r13b = r13b & cl
	SZO = cond(r13b)
	C = false
	rax = (uint64) r13d
	branch Test(EQ,Z) l00000000004080D0
// DataOut: eax edx fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> al:<invalid> r13b:Test(NE,Z) cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080CC_2:
	esi = r13d
// DataOut: eax edx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:(uint64) r13d rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> r13b:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080D0:
	rax = (uint64) (eax << 0x0000001F)
	rax = (uint64) (eax >> 0x0000001F)
	rax = (uint64) (eax + 0x00000002)
	SCZO = cond(eax)
// DataOut: eax edx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:(uint64) r13d rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> r13b:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080D9:
	v45 = Mem0[0x000000000061B17C:byte] | sil
	Mem0[0x000000000061B17C:byte] = v45
	SZO = cond(Mem0[0x000000000061B17C:byte])
	SZO = cond(edx & edx)
	C = false
	Mem0[rsi + 0x00000000000000B4:word32] = eax
	branch Test(NE,Z) l00000000004084BF
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> al:<invalid> r13b:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004084BF:
	rdi = r12
	rbx = fn000000000040EAB0(rbx, rbp, rdi, r11, r12, r13, r14, r15, fs, out rbp, out r8, out r9, out r10, out r11, out r12, out r13, out r14, out r15)
	r13 = rax
	rax = __errno_location()
	rsi = (uint64) Mem0[rax:word32]
	rdi = 0x0000000000000000
	rax = 0x0000000000000000
	rcx = r13
	rdx = 0x0000000000415E54
	error(0x0000000000000000, rsi, 0x0000000000415E54, Mem0[rsp + -8:<unknown>])
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x0000A000)
	branch Test(NE,Z) l0000000000408103
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> al:<invalid> r13b:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004084F6:
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:0x0000000000415E54 rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:0x00415E54 dx:0x5E54 dl:0x54 edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080EF:
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x0000A000)
	branch Test(EQ,Z) l0000000000408500
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r13b:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408500:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l0000000000408519
// DataOut: fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> edx:0x00415E54 dx:0x5E54 dl:0x54 edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040850C:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(EQ,Z) l000000000040862A
// DataOut: fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> edx:0x00415E54 dx:0x5E54 dl:0x54 edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408519:
	rsi = Mem0[rsi + 0x0000000000000040:word64]
	rdi = r12
	rax = fn0000000000409D20(rsi, rdi, out rsi)
	SZO = cond(rax & rax)
	C = false
	r13 = rax
	Mem0[rsi + 0x0000000000000008:word64] = rax
	branch Test(EQ,Z) l0000000000408BDA
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> edx:0x00415E54 dx:0x5E54 dl:0x54 edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408BDA:
	rdi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = 0x0000000000000005
	rsi = 0x0000000000413794
	rax = dcgettext(0x0000000000000000, 0x0000000000413794, 0x0000000000000005)
	edi = (word32) Mem0[rbp - 0x0000000000000384:byte]
	rdx = r12
	rsi = rax
	rsi = fn0000000000405810(rdx, rbp, rsi, edi, r11, r13, r14, r15, fs, out r8, out r9, out r10, out r11, out r13, out r14, out r15)
	r13 = Mem0[r14 + 0x0000000000000008:word64]
	SZO = cond(r13 & r13)
	C = false
	branch Test(NE,Z) l0000000000408535
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> edx:0x00415E54 dx:0x5E54 dl:0x54 edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408C0A:
// DataOut: fs r10 r11 r13 r14 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408535:
	SCZO = cond(Mem0[rbp + 0x0000000000000000:byte] - 0x2F)
	branch Test(EQ,Z) l0000000000408C0F
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408C0F:
	rdi = r13
	rax = fn0000000000410E30(rdi, out rsi)
	r13 = rax
// DataOut: fs r10 r11 r13 r14 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408540:
	rdi = r12
	rax = fn000000000040A2B0(rdi, out rsi)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	rdi = r13
	branch Test(EQ,Z) l0000000000408B98
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408B98:
	rax = fn0000000000410E30(rdi, out rsi)
	r13 = rax
// DataOut: fs r10 r11 r13 r14 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408557:
	eax = strlen(rdi)
	rdi = r15 + 0x0000000000000002 + rax
	rax = fn0000000000410C40(rsi, rdi)
	rcx = rax
	rax = 0x0000000000000000
	SCZO = cond(Mem0[r12 - 0x0000000000000001 + r15:byte] - 0x2F)
	rdi = rcx
	rsi = r12
	Mem0[rbp - 0x0000000000000390:word64] = rcx
	al = Test(NE,Z)
	r15 = r15 + rax
	SCZO = cond(r15)
	rdx = r15
	rax = stpncpy(rdi, rsi, rdx)
	rsi = r13
	rdi = rax
	rax = strcpy(rdi, rsi)
	rcx = Mem0[rbp - 0x0000000000000390:word64]
	r13 = rcx
// DataOut: fs r10 r11 r13 r14 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004085A1:
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l0000000000408607
// DataOut: fs r10 r11 r13 r14 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004085A6:
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000001)
	branch Test(ULE,CZ) l0000000000408B80
// DataOut: fs r10 r11 r13 r14 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408B80:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408607
// DataOut: fs r10 r11 r13 r14 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408B8D:
// DataOut: fs r10 r11 r13 r14 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004085B3:
	rdx = rbp - 0x0000000000000380
	rsi = r13
	rdi = 0x0000000000000001
	eax = __xstat(0x0000000000000001, rsi, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000408607
// DataOut: fs r10 r11 r13 r14 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004085CB:
	SCZO = cond(Mem0[rbp - 0x0000000000000384:byte] - 0x00)
	Mem0[rsi + 0x00000000000000B1:byte] = 0x01
	rax = (uint64) Mem0[rbp - 0x0000000000000368:word32]
	branch Test(EQ,Z) l0000000000408600
// DataOut: eax fs r10 r11 r13 r14 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:0x00000001 r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004085E2:
	rdx = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000408600
// DataOut: eax fs r10 r11 r13 r14 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:0x00000001 r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004085EC:
	rdx = (uint64) eax
	rdx = (uint64) (edx & 0x0000F000)
	SCZO = cond(edx - 0x00004000)
	branch Test(EQ,Z) l0000000000408607
// DataOut: eax fs r10 r11 r13 r14 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:0x00000001 r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004085FC:
// DataOut: eax fs r10 r11 r13 r14 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:0x00000001 r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408600:
	Mem0[rsi + 0x00000000000000A4:word32] = eax
// DataOut: fs r10 r11 r13 r14 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:0x00000001 r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408607:
	rdi = r13
	free(rdi)
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x0000A000)
	branch Test(NE,Z) l0000000000408103
// DataOut: eax fs r10 r11 r14 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408623:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040862A:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000006
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408103:
	SCZO = cond(eax - 0x00004000)
	branch Test(EQ,Z) l0000000000408978
// DataOut: fs r10 r11 r14 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408978:
	SCZO = cond(Mem0[rbp - 0x0000000000000384:byte] - 0x00)
	branch Test(EQ,Z) l00000000004089A8
// DataOut: fs r10 r11 r14 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408981:
	SCZO = cond(Mem0[0x000000000061B10D:byte] - 0x00)
	branch Test(NE,Z) l00000000004089A8
// DataOut: fs r10 r11 r14 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004089A8:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000003
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040898A:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000009
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040810E:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000005
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408120:
	SZO = cond(r13d & r13d)
	C = false
	r12 = Mem0[r14 + 0x0000000000000050:word64]
	branch Test(EQ,Z) l0000000000408132
// DataOut: fs r10 r11 r12 r13 r13d r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408129:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081A8
// DataOut: fs r10 r11 r12 r13 r13d r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408132:
	r8 = Mem0[0x000000000061B138:word64]
	rdx = (uint64) Mem0[0x000000000061B140:word32]
	r15 = r13 - 0x00000000000002D0
	rcx = 0x0000000000000200
	rdi = r12
	rsi = r15
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out r8, out r9, out r10, out r11, out r15d)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = rax
	eax = fn000000000040D420(esi, rdi, fs, out rsi)
	SCZO = cond(eax - Mem0[0x000000000061B174:word32])
	branch Test(LE,SZO) l000000000040816E
// DataOut: eax fs r10 r11 r12 r14 r15 r15d r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> al:<invalid> sil:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408168:
	Mem0[0x000000000061B174:word32] = eax
// DataOut: fs r10 r11 r12 r14 r15 r15d r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040816E:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(r13d & r13d)
	C = false
	branch Test(NE,Z) l00000000004081A8
// DataOut: fs r10 r11 r12 r13 r13d r14 r15 r15d r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040817A:
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000408B10
// DataOut: fs r10 r11 r12 r14 r15 r15d r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408B10:
	rdi = (uint64) Mem0[rsi + 0x000000000000002C:word32]
	rax = fn00000000004061B0(rsi, edi, r8, fs, out rsi, out r8)
	SCZO = cond(eax - Mem0[0x000000000061B168:word32])
	branch Test(LE,SZO) l0000000000408187
// DataOut: eax fs r10 r11 r12 r14 r15 r15d r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408B25:
	Mem0[0x000000000061B168:word32] = eax
// DataOut: fs r10 r11 r12 r14 r15 r15d r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408187:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000408A90
// DataOut: fs r10 r11 r12 r14 r15 r15d r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408A90:
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	r13 = (uint64) Mem0[r14 + 0x0000000000000030:word32]
	branch Test(EQ,Z) l0000000000408BA8
// DataOut: fs r10 r11 r12 r13d r15 r15d r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408BA8:
	rdi = (uint64) r13d
	rax = fn000000000040CB40(rsi, edi, r8)
	SZO = cond(rax & rax)
	C = false
	rdi = rax
	branch Test(EQ,Z) l0000000000408AA1
// DataOut: fs r10 r11 r12 r13d r15 r15d r8 r9 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408BBC:
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	eax = fn000000000040D420(esi, rdi, fs, out rsi)
	rdx = 0x0000000000000000
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000408BCA
// DataOut: eax edx fs r10 r11 r12 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408BC7_1:
	edx = eax
// DataOut: edx fs r10 r11 r12 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408BCA:
// DataOut: edx fs r10 r11 r12 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408AA1:
	rdx = 0x0000000000000015
	r8 = (uint64) r13d
	rcx = 0x000000000041375A
	rsi = 0x0000000000000001
	rdi = r15
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0x0000000000000015, 0x000000000041375A, Mem0[rsp + -8:<unknown>])
	rdx = r15
// DataOut: fs r10 r11 r12 r15d r8 r9 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408AC0:
	rcx = (uint64) Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000408AC0
// DataOut: al eax edx fs r10 r11 r12 r15d r8 r9 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408AD7:
	rcx = (uint64) eax
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000408AE4
// DataOut: al cl edx fs r10 r11 r12 r15d r8 r9 rbp rbx rdx rsi
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408AE1_1:
	eax = ecx
// DataOut: al edx fs r10 r11 r12 r15d r8 r9 rbp rbx rdx rsi
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408AE4:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000408AEC
// DataOut: al ecx edx fs r10 r11 r12 r15d r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408AE8_1:
	rdx = rcx
// DataOut: al edx fs r10 r11 r12 r15d r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408AEC:
	al = al + al
	SCZO = cond(al)
	rdx = rdx - 0x03 - C
	rdx = (uint64) (edx - r15d)
	SCZO = cond(edx)
// DataOut: edx fs r10 r11 r12 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408AF5:
	SCZO = cond(Mem0[0x000000000061B164:word32] - edx)
	branch Test(GE,SO) l0000000000408194
// DataOut: edx fs r10 r11 r12 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408B01:
	Mem0[0x000000000061B164:word32] = edx
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408194:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(NE,Z) l0000000000408A70
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408A70:
	rdi = (uint64) Mem0[rsi + 0x000000000000002C:word32]
	rax = fn00000000004061B0(rsi, edi, r8, fs, out rsi, out r8)
	SCZO = cond(eax - Mem0[0x000000000061B160:word32])
	branch Test(LE,SZO) l00000000004081A1
// DataOut: eax fs r10 r11 r12 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408A85:
	Mem0[0x000000000061B160:word32] = eax
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004081A1:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r10 r11 r12 r13 r13d r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004081A8:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081C9
// DataOut: fs r10 r11 r12 r13 r13d r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004081B1:
	rdi = Mem0[rsi + 0x00000000000000A8:word64]
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B16C:word32])
	branch Test(GT,SZO) l0000000000408730
// DataOut: eax fs r10 r11 r12 r13 r13d r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408730:
	SZO = cond(r13d & r13d)
	C = false
	Mem0[0x000000000061B16C:word32] = eax
	branch Test(NE,Z) l00000000004081D2
// DataOut: fs r10 r11 r12 r13 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004081C9:
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000040873F
// DataOut: fs r10 r11 r12 r13 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040873F:
	rdi = Mem0[rsi + 0x0000000000000020:word64]
	rsi = rbp - 0x00000000000002F0
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	rdi = rax
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B170:word32])
	branch Test(LE,SZO) l0000000000408765
// DataOut: eax fs r10 r11 r12 r13 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040875F:
	Mem0[0x000000000061B170:word32] = eax
// DataOut: fs r10 r11 r12 r13 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408765:
	rax = (uint64) Mem0[0x00000000CCCCCCF5:word32]
	rax = (uint64) (eax & 0x0000B000)
	SCZO = cond(eax - 0x00002000)
	branch Test(NE,Z) l0000000000408A30
// DataOut: fs r10 r11 r12 r13 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408A30:
	rdi = Mem0[0x00000000CCCCCD0D:word64]
	r8 = Mem0[0x000000000061A560:word64]
	rsi = rbp - 0x00000000000002D0
	rdx = (uint64) Mem0[0x000000000061B134:word32]
	rcx = 0x0000000000000001
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out r8, out r9, out r10, out r11, out r15d)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = rax
	eax = fn000000000040D420(esi, rdi, fs, out rsi)
	SCZO = cond(eax - Mem0[0x000000000061B154:word32])
	branch Test(LE,SZO) l00000000004081D2
// DataOut: eax fs r10 r11 r12 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408A68:
// DataOut: eax fs r10 r11 r12 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> sil:<invalid> dl:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408779:
	rax = Mem0[0x00000000CCCCCD05:word64]
	r15 = r13 - 0x00000000000002D0
	rsi = r15
	rdi = rax
	rax = rax >>u 0x0000000000000008
	rdi = rdi >>u 0x0000000000000020
	rax = (uint64) (eax & 0x00000FFF)
	rdi = (uint64) (edi & 0xFFFFF000)
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	rdi = rax
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B15C:word32])
	branch Test(LE,SZO) l00000000004087BA
// DataOut: eax fs r10 r11 r12 r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004087B4:
	Mem0[0x000000000061B15C:word32] = eax
// DataOut: fs r10 r11 r12 r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004087BA:
	rax = Mem0[0x00000000CCCCCD05:word64]
	rsi = r15
	rdi = rax
	eax = (word32) al
	rdi = rdi >>u 0x000000000000000C
	dil = dil & 0x00
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	rdi = rax
	eax = strlen(rdi)
	rdx = (uint64) Mem0[0x000000000061B158:word32]
	SCZO = cond(eax - edx)
	branch Test(LE,SZO) l00000000004087F0
// DataOut: eax edx fs r10 r11 r12 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004087E8:
	Mem0[0x000000000061B158:word32] = eax
	rdx = (uint64) eax
// DataOut: edx fs r10 r11 r12 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> dil:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004087F0:
	rax = (uint64) Mem0[0x000000000061B15C:word32]
	eax = rdx + 0x0000000000000002 + rax
	SCZO = cond(eax - Mem0[0x000000000061B154:word32])
	branch Test(LE,SZO) l00000000004081D2
// DataOut: eax fs r10 r11 r12 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> dil:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408806:
	Mem0[0x000000000061B154:word32] = eax
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> dil:<invalid> sil:<invalid> dl:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004081D2:
	eax = (word32) Mem0[0x000000000061B114:byte]
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000408640
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> dil:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408640:
	rdi = Mem0[rsi + 0x0000000000000018:word64]
	rsi = rbp - 0x00000000000002D0
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	rdi = rax
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B178:word32])
	branch Test(LE,SZO) l00000000004081E1
// DataOut: eax fs r10 r11 r12 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> dil:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408664:
	Mem0[0x000000000061B178:word32] = eax
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> r12d:<invalid> bpl:<invalid> dx:<invalid> dl:<invalid> dil:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000407FB1:
	rdi = 0x0000000000000000
	rdx = 0x0000000000000005
	rsi = 0x0000000000413783
	rax = dcgettext(0x0000000000000000, 0x0000000000413783, 0x0000000000000005)
	r15 = (uint64) Mem0[r13 - 0x0000000000000384:word32]
	rdx = r12
	rsi = rax
	r12 = 0x0000000000000000
	SZO = cond(r12d)
	C = false
	edi = (word32) r15b
	rsi = fn0000000000405810(rdx, rbp, rsi, edi, r11, r13, r14, r15, fs, out r8, out r9, out r10, out r11, out r13, out r14, out r15)
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l00000000004081F4
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:0x0000000000000001 r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000407FE4:
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:rdi rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004081E1:
	rdi = rbx
	rax = fn0000000000410E30(rdi, out rsi)
	v42 = Mem0[0x000000000061B1B0:word64] + 0x0000000000000001
	Mem0[0x000000000061B1B0:word64] = v42
	SCZO = cond(v42)
	Mem0[rsi:word64] = rax
// DataOut: fs r10 r11 r12 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> sil:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004081F4:
	rbx = Mem0[rbp - 0x0000000000000038:word64]
	rbx = rbx ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rbx)
	C = false
	rax = r12
	branch Test(NE,Z) l0000000000408C76
// DataOut: fs r10 r11 r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> r11d:<invalid> dil:<invalid> r13b:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408C76:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> r11d:<invalid> dil:<invalid> r13b:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040820A:
	rsp = rbp - 0x0000000000000028
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r13 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r14 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r15 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: ebx fs r10 r11 r12d r13d r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> r11d:<invalid> dil:<invalid> r13b:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

fn0000000000407EA0_exit:
	use ebx (=> ebxOut)
	use rsi (=> rsiOut)
	use r8 (=> r8Out)
	use r9 (=> r9Out)
	use r10 (=> r10Out)
	use r11 (=> r11Out)
	use r12d (=> r12dOut)
	use r13d (=> r13dOut)
// DataOut: ebx r10 r11 r12d r13d r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> rdx:<invalid> rsp:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> rbx:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> r14:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> r11d:<invalid> dil:<invalid> r13b:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):<invalid> -8(fp):rbp

l0000000000407F2A_1:
	Mem0[rdi:word64] = rax
	rdi = rdi + 0x0000000000000008
	rcx = rcx - 0x0000000000000001
// DataOut: esi fs r10 r11 r13 r13d r14 r15 r8 r9 rax rbp rbx rcx rdi rdx rsp sil
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -038C(0)



void fn0000000000409750(word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000409750_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000409750_entry:
// DataOut: edi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(0)

l0000000000409750:
	word32 ebx_11 = (word32) (uint64) edi
	branch edi == 0x00000000 l0000000000409794
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0020(0)

l0000000000409794:
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000413D88, 0x0000000000000005), tLoc20)
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413DB0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413E40, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413E90, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413FA0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004141E8, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414398, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414540, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414580, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414670, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414780, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414928, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414AC0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414C28, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414DA0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414F58, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415020, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004151F0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004153F0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415480, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004155E8, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415748, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415778, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004157B0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415850, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415970, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	word64 rsi_253
	fn000000000040A390(Mem0[0x000000000061B200:word64], out rsi_253)
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x00000000004137BB, 0x0000000000000005), tLoc20)
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x00000000004137E8, 0x0000000000000005), tLoc20)
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415A30, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	word64 rax_283 = setlocale(0x0000000000000005, 0x0000000000000000)
	branch rax_283 == 0x0000000000000000 l0000000000409BC8
// DataOut: ebx rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000005 rbx:(uint64) edi rbp:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: Local -0020(0)

l0000000000409BB2:
	branch strncmp(rax_283, 0x000000000041380A, 0x0000000000000003) != 0x00000000 l0000000000409BFF
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000005 rbx:(uint64) edi rbp:<invalid> rdi:0x0000000000000005 rsi:<invalid> rax:<invalid> eax:<invalid> rcx:0x0000000000415A08 edx:0x00000005 ecx:0x00415A08 -16(fp):rbx -8(fp):rbp
// LocalsOut: Local -0020(0)

l0000000000409BFF:
	word64 rsi_312
	fn000000000040A390(Mem0[0x000000000061B200:word64], out rsi_312)
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000415A70, 0x0000000000000005), tLoc20)
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000003 rbx:(uint64) edi rbp:<invalid> rdi:<invalid> rsi:0x000000000041380A rax:<invalid> eax:<invalid> rcx:0x0000000000415A08 edx:0x00000003 ecx:0x00415A08 -16(fp):rbx -8(fp):rbp
// LocalsOut: Local -0020(0)

l0000000000409BC8:
	word64 rsi_290
	fn000000000040A390(Mem0[0x000000000061B200:word64], out rsi_290)
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000415AB8, 0x0000000000000005), tLoc20)
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:<invalid> rbx:(uint64) edi rbp:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000409768:
	__fprintf_chk(Mem0[0x000000000061A650:word64], 0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000413D60, 0x0000000000000005), tLoc20)
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000005 rbx:(uint64) edi rbp:<invalid> -16(fp):rbx -8(fp):rbp

l000000000040978D:
	exit((uint64) ebx_11)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:<invalid> rbx:(uint64) edi rbp:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp



word64 fn0000000000409CC0(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: eax rax
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn0000000000409CC0_entry:
// DataOut: fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409CC0:
	word64 rax_6 = (uint64) ((word32) (uint64) Mem0[rsi + 0x0000000000000018:word32] & 0x0000F000)
	branch (word32) rax_6 == 0x0000A000 l0000000000409D10
// DataOut: fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409D10:
	return 0x0000000000000000
// DataOut: eax fs r10 r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000409CCF:
	word32 eax_21 = acl_extended_file(rdi)
	word64 rax_22 = DPB(rax_6, eax_21, 0)
	branch eax_21 < 0x00000000 l0000000000409CE8
// DataOut: eax fs r10 r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000409CE8:
	word32 eax_36 = (word32) (uint64) Mem0[__errno_location():word32]
	branch eax_36 == 0x0000005F l0000000000409D18
// DataOut: eax fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> eax:<invalid>

l0000000000409CF4:
	branch eax_36 == 0x00000026 l0000000000409D18
// DataOut: eax fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> eax:<invalid>

l0000000000409CF9:
	branch eax_36 == 0x00000016 l0000000000409D18
// DataOut: eax fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> eax:<invalid>

l0000000000409D18:
	return 0x0000000000000000
// DataOut: eax fs r10 r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> eax:<invalid>

l0000000000409CFE:
	rax_22 = (uint64) -(word32) (eax_36 != 0x00000010)
// DataOut: eax fs r10 r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> eax:<invalid>

l0000000000409CDC:
	return rax_22
// DataOut: eax fs r10 r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> eax:<invalid> al:<invalid>

fn0000000000409CC0_exit:
// DataOut: eax rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> eax:<invalid> al:<invalid>



word64 fn0000000000409D20(word64 rsi, word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: rax rsi
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn0000000000409D20_entry:
	*rsiOut = rsi
// DataOut: fs r10 r11 r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409D20:
	word64 rbx_135 = 0x0000000000000401
	branch rsi >u 0x0000000000000400 l0000000000409D59
// DataOut: fs r10 r11 r13 r8 r9 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409D55_1:
	rbx_135 = rsi + 0x0000000000000001
// DataOut: fs r10 r11 r13 r8 r9 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:rsi + 0x0000000000000001 r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:0x0000000000000401 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409D59:
// DataOut: fs r10 r11 r13 r8 r9 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:rsi + 0x0000000000000001 r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409D60:
	word64 rax_131 = malloc(rbx_135)
	byte al_132 = (byte) rax_131
	word64 rbp_136 = rax_131
	branch rax_131 == 0x0000000000000000 l0000000000409DAB
// DataOut: fs r10 r11 r13 r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409D70:
	word64 rsi_138 = rax_131
	*rsiOut = rsi_138
	word64 rax_141 = DPB(rax_131, DPB(al_132, readlink(rdi, rax_131, rbx_135), 0), 0)
	branch rax_141 < 0x0000000000000000 l0000000000409DD8
// DataOut: fs r10 r11 r12 r13 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409DD8:
	word64 rax_209 = __errno_location()
	word32 edx_214 = (word32) (uint64) Mem0[rax_209:word32]
	branch edx_214 == 0x00000022 l0000000000409D86
// DataOut: edx fs r10 r11 r12 r13 r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:rdi rbp:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409DE4:
	free(rbp_136)
	Mem223[rax_209:word32] = (word32) (uint64) edx_214
// DataOut: fs r10 r11 r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:rdi rbp:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409D86:
	branch rbx_135 >u rax_141 l0000000000409E08
// DataOut: fs r10 r11 r13 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:rdi rbp:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409E08:
	Mem191[rbp_136:byte] = 0x00
	return rbp_136
// DataOut: fs r10 r11 r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:rdi rbp:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000409D8B:
	free(rbp_136)
	branch rbx_135 >u 0x00000000FFFFFFFF l0000000000409DC0
// DataOut: fs r10 r11 r13 r8 r9 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:rdi rbp:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409DC0:
	branch rbx_135 >u 0x00000000FFFFFFFE l0000000000409E20
// DataOut: fs r10 r11 r13 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409E20:
	Mem172[__errno_location():word32] = 0x0000000C
	return 0x0000000000000000
// DataOut: fs r10 r11 r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000409DC5:
	rbx_135 = 0x00000000FFFFFFFF
// DataOut: fs r10 r11 r13 r8 r9 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409D98:
	rbx_135 = rbx_135 * 0x0000000000000002
	rax_131 = malloc(rbx_135)
	al_132 = (byte) rax_131 (alias)
	rbp_136 = rax_131
	branch rax_131 != 0x0000000000000000 l0000000000409D70
// DataOut: fs r10 r11 r13 r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409DAB:
// DataOut: fs r10 r11 r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409DAD:
	return 0x0000000000000000
// DataOut: fs r10 r11 r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> r12:<invalid> -72(fp):<invalid> -60(fp):edx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000409D20_exit:
// DataOut: rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> r15:r15 r14:r14 r13:r13 rbx:rbx rdi:<invalid> rbp:rbp r12:r12 rdx:<invalid> rsi:<invalid> al:<invalid> -72(fp):<invalid> -60(fp):edx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn0000000000409E50(word64 rcx, word64 rdx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx rdi rdx rsi
// LiveOut: al eax rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn0000000000409E50_entry:
// DataOut: ebp ebx fs r10 r11 r14b r8 r9 rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409E50:
	word64 qwLoc50_109
	word64 rax_105
	word64 rax_32 = DPB(rax, strlen(rdi), 0)
	word64 rbp_126 = rdx
	word64 r14_127 = Mem0[rsi:word64]
	branch r14_127 == 0x0000000000000000 l0000000000409F72
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0058(64)

l0000000000409F72:
	qwLoc50_109 = 0xFFFFFFFFFFFFFFFF
// DataOut: fs r10 r11 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:rdx eax:<invalid> r14:<invalid> -88(fp):rdi -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0050(64)

l0000000000409E81:
	byte bLoc41_108 = 0x00
	qwLoc50_109 = 0xFFFFFFFFFFFFFFFF
	word64 rbx_110 = 0x0000000000000000
	rax_122 = rax_32
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:rdx eax:<invalid> r14:<invalid> -88(fp):rdi -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(0) Local -0050(0) Local -0058(64)

l0000000000409EE8:
	word64 rax_122
	branch strncmp(r14_127, rdi, rax_32) != 0x00000000 l0000000000409ED8
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(0) Local -0050(0) Local -0058(64)

l0000000000409EFB:
	rax_122 = DPB(rax_122, strlen(r14_127), 0) (alias)
	branch rax_122 == rax_32 l0000000000409F60
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(32) Local -0050(0) Local -0058(64)

l0000000000409F60:
	return rbx_110
// DataOut: al eax ebp ebx fs r10 r11 r14b r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000409F08:
	branch qwLoc50_109 != 0xFFFFFFFFFFFFFFFF l0000000000409EA0
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(32) Local -0050(64) Local -0058(64)

l0000000000409EA0:
	rax_122 = rdx
	branch rdx == 0x0000000000000000 l0000000000409F50
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(32) Local -0050(64) Local -0058(64)

l0000000000409F50:
	bLoc41_108 = 0x01
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:rdx ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(0) Local -0050(0) Local -0058(64)

l0000000000409EAE:
	byte cl_198 = (byte) (word32) bLoc41_108
	rax_122 = 0x0000000000000001
	branch memcmp(qwLoc50_109 *s rcx + rdx, rbp_126, rcx) == 0x00000000 l0000000000409ED4
// DataOut: cl fs r10 r11 r12 r13 r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:rdx ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0050(0) Local -0058(64)

l0000000000409ED1_1:
	cl_198 = 0x01 (alias)
// DataOut: cl fs r10 r11 r12 r13 r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:0x00000001 r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:rcx rdi:<invalid> rax:0x0000000000000001 ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0050(0) Local -0058(64)

l0000000000409ED4:
	bLoc41_108 = cl_198
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:0x00000001 r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:rcx rdi:<invalid> rax:0x0000000000000001 ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(0) Local -0050(0) Local -0058(64)

l0000000000409ED8:
	rbx_110 = rbx_110 + 0x0000000000000001
	rbp_126 = rbp_126 + rcx
	r14_127 = Mem0[rsi + rbx_110 * 0x0000000000000008:word64]
	branch r14_127 == 0x0000000000000000 l0000000000409F28
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(0) Local -0050(0) Local -0058(64)

l0000000000409F10:
	rbx_110 = rbx_110 + 0x0000000000000001
	qwLoc50_109 = rbx_110
	rbp_126 = rbp_126 + rcx
	r14_127 = Mem0[rsi + rbx_110 * 0x0000000000000008:word64]
	branch r14_127 != 0x0000000000000000 l0000000000409EE8
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(0) Local -0050(0) Local -0058(64)

l0000000000409F25:
// DataOut: fs r10 r11 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0041(0) Local -0050(64)

l0000000000409F28:
	rax_105 = 0xFFFFFFFFFFFFFFFE
	branch bLoc41_108 != 0x00 l0000000000409F3B
// DataOut: al eax fs r10 r11 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0050(64)

l0000000000409F36:
	rax_105 = qwLoc50_109
// DataOut: al eax fs r10 r11 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:0xFFFFFFFFFFFFFFFE ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32)

l0000000000409F3B:
	return rax_105
// DataOut: al eax ebp ebx fs r10 r11 r14b r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> rax:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000409E50_exit:
// DataOut: al eax rax
// DataOut (flags): 
// SymbolicIn: rsp:fp r15:r15 r12:r12 rbp:rbp eax:<invalid> r14:r14 rax:<invalid> rbx:rbx r13:r13 rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn0000000000409F80(word64 rdx, word64 rsi, word64 rdi, word64 r11, word64 r13, word64 r14, word64 r15, selector fs, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r13 r14 r15 rdi rdx rsi
// LiveOut: r10 r11 r13 r14 r15 r9
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 rbp rbx rsp
fn0000000000409F80_entry:
// DataOut: fs r11 r13 r14 r15 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409F80:
	word64 r12_19
	branch rdx == 0xFFFFFFFFFFFFFFFF l0000000000409FE0
// DataOut: fs r11 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000409FE0:
	r12_19 = dcgettext(0x0000000000000000, 0x0000000000415DFD, 0x0000000000000005)
// DataOut: fs r11 r12 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000005 rbp:rdi rbx:rsi -24(fp):rbx -16(fp):rbp -8(fp):r12

l0000000000409F95:
	r12_19 = dcgettext(0x0000000000000000, 0x0000000000415E18, 0x0000000000000005)
// DataOut: fs r11 r12 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000005 rbp:rdi rbx:rsi -24(fp):rbx -16(fp):rbp -8(fp):r12

l0000000000409FA4:
	word64 r11_29
	word64 r12_30
	word64 r13_31
	word64 r14_32
	word64 r15_33
	word64 rbx_34 = fn000000000040EBF0(rsi, rdi, rdi, 0x00000001, r11, r12_19, r13, r14, r15, fs, out r11_29, out r12_30, out r13_31, out r14_32, out r15_33)
	word64 r10_43
	word64 r11_44
	word64 r12_45
	word64 r13_46
	word64 r14_47
	word64 r15_48
	word64 r9_49 = fn000000000040E970(rbx_34, 0x00000006, 0x00000000, r11_29, r12_30, r13_31, r14_32, r15_33, fs, out r10_43, out r11_44, out r12_45, out r13_46, out r14_47, out r15_48)
	error(0x0000000000000000, 0x0000000000000000, r12_45, Mem0[fp + -8:<unknown>])
	return r9_49
// DataOut: fs r10 r11 r13 r14 r15 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000005 rbp:rdi rbx:rsi rsi:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn0000000000409F80_exit:
// DataOut: r10 r11 r13 r14 r15 r9
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040A000(word64 rdx, word64 rsi, word64 rdi, word64 r11, selector fs, ptr64 & r10Out, ptr64 & r11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi rdx rsi
// LiveOut: r10 r11 r9
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040A000_entry:
	*r10Out = r10
	*r11Out = r11
// DataOut: fs r10 r11 r9 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A000:
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415E35, 0x0000000000000005), Mem0[0x000000000061A650:word64])
	word64 r15_137 = rdi
	word64 r14_11 = 0x0000000000000000
	word64 r13_135 = rdx
	word64 rbp_133 = rsi
	word64 rbx_132 = 0x0000000000000000
	word64 r12_134 = Mem0[rdi:word64]
	branch r12_134 != 0x0000000000000000 l000000000040A086
// DataOut: fs r10 r11 r12 r13 r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A086:
	branch rbx_132 == 0x0000000000000000 l000000000040A050
// DataOut: fs r11 r12 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040A08B:
	branch memcmp(r14_11, rbp_133, r13_135) != 0x00000000 l000000000040A050
// DataOut: fs r11 r12 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040A050:
	word64 rbp_149
	word64 r8_150
	word64 r10_152
	word64 r12_154
	fn000000000040EC10(rbx_132 + 0x0000000000000001, rbp_133, r12_134, r11, r12_134, r13_135, rbp_133, r15_137, fs, out rbx_132, out rbp_149, out r8_150, out r9, out r10_152, out r11, out r12_154, out r13_135, out r14_11, out r15_137)
	__fprintf_chk(Mem0[0x000000000061A650:word64], 0x0000000000000001, 0x0000000000415E4A, Mem0[fp - 0x0000000000000040:<unknown>])
	rbp_133 = rbp_149 + r13_135
	r12_134 = Mem0[r15_137 + rbx_132 * 0x0000000000000008:word64]
	branch r12_134 == 0x0000000000000000 l000000000040A0D0
// DataOut: fs r10 r11 r12 r13 r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040A09D:
	word64 r8_184
	word64 r10_186
	word64 r12_188
	fn000000000040EC10(rbx_132 + 0x0000000000000001, rbp_133 + r13_135, r12_134, r11, r12_134, r13_135, r14_11, r15_137, fs, out rbx_132, out rbp_133, out r8_184, out r9, out r10_186, out r11, out r12_188, out r13_135, out r14_11, out r15_137)
	__fprintf_chk(Mem0[0x000000000061A650:word64], 0x0000000000000001, 0x0000000000415E52, Mem0[fp - 0x0000000000000040:<unknown>])
	r12_134 = Mem0[r15_137 + rbx_132 * 0x0000000000000008:word64]
	branch r12_134 != 0x0000000000000000 l000000000040A086
// DataOut: fs r10 r11 r12 r13 r14 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040A047:
// DataOut: fs r10 r11 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:rdi rdi:<invalid> r14:<invalid> r13:rdx rdx:0x0000000000000005 rbp:rsi rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040A0D0:
	word64 rdi_67 = Mem0[0x000000000061A650:word64]
	word64 rax_69 = Mem0[rdi_67 + 0x0000000000000028:word64]
	branch rax_69 >=u Mem0[rdi_67 + 0x0000000000000030:word64] l000000000040A0FB
// DataOut: fs r10 r11 r9 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040A0FB:
	__overflow(rdi_67, 0x000000000000000A)
	return r9
// DataOut: fs r10 r11 r9
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040A0E1:
	Mem87[rdi_67 + 0x0000000000000028:word64] = rax_69 + 0x0000000000000001
	Mem88[rax_69:byte] = 0x0A
	return r9
// DataOut: fs r10 r11 r9
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040A000_exit:
// DataOut: r10 r11 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp r15:r15 rdi:<invalid> r14:r14 r13:r13 rdx:<invalid> rbp:rbp rsi:<invalid> rbx:rbx rax:<invalid> eax:<invalid> r12:r12 rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040A120(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 r8, word64 r9, word64 r11, selector fs, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r8 r9 rcx rdi rdx rsi
// LiveOut: r10 r11 r9 rax
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040A120_entry:
	*r9Out = r9
	*r10Out = r10
	*r11Out = r11
// DataOut: fs r10 r11 r8 r9 rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A120:
	word64 rax_113 = fn0000000000409E50(r8, rcx, rdx, rsi)
	branch rax_113 < 0x0000000000000000 l000000000040A165
// DataOut: fs r10 r11 r12 r13 r14 r15 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A165:
	word64 r10_80
	word64 r11_81
	word64 r13_82
	word64 r14_83
	word64 r15_84
	fn0000000000409F80(rax_113, rsi, rdi, r11, r9, rdi, r8, fs, out r10_80, out r11_81, out r13_82, out r14_83, out r15_84)
	word64 r10_89
	word64 r11_90
	word64 r9_91 = fn000000000040A000(r15_84, rcx, rdx, r11_81, fs, out r10_89, out r11_90)
	word64 rsp_92
	word64 r15_93
	word64 r8_94
	word64 r14_95
	word64 rdi_96
	word64 r13_97
	word64 r9_98
	word64 r12_99
	word64 rsi_100
	word64 rbp_101
	word64 rcx_102
	word64 rbx_103
	word64 rdx_104
	byte SCZO_105
	word64 rax_106
	byte SZO_107
	bool C_108
	bool S_109
	word64 r11_110
	selector fs_111
	word64 r10_112
	call r13_82 (retsize: 8; depth: 8)
		uses: C_41,fs,qwLoc08_4,qwLoc10_9,qwLoc18_14,qwLoc20_19,qwLoc28_25,qwLoc30_31,r10_89,r11_90,r12_21,r13_82,r14_83,r15_84,r8,r9_91,rax_38,rbp_27,rbx_33,rcx_28,rdi_88,rdx_86,rsi_87,rsp_36,S_40,SCZO_37,SZO_39
		defs: C_108,fs_111,r10_112,r11_110,r12_99,r13_97,r14_95,r15_93,r8_94,r9_98,rax_106,rbp_101,rbx_103,rcx_102,rdi_96,rdx_104,rsi_100,rsp_92,S_109,SCZO_105,SZO_107
	rax_113 = 0xFFFFFFFFFFFFFFFF
// DataOut: fs r10 r11 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:r8 r14:rdi r13:r9 r12:rsi rdi:<invalid> rbp:rcx rcx:r8 rbx:rdx rdx:<invalid> rsi:<invalid> eax:<invalid> rax:<invalid> ecx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040A156:
	return rax_113
// DataOut: ebx fs r10 r11 r13b r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> al:0xFF cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040A120_exit:
// DataOut: r10 r11 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp r15:r15 r14:r14 r13:r13 r12:r12 rdi:<invalid> rbp:rbp rcx:<invalid> rbx:rbx rdx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> al:0xFF cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040A2B0(word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax rsi
// Trashed: SCZO ah al ax bp bpl ch cl cx dh dl dx eax ebp ecx edx esi rax rbp rcx rdx rsi si sil
// Preserved: rbp rbx rsp
fn000000000040A2B0_entry:
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A2B0:
	word64 rdx_27
	word64 rbp_16 = (uint64) (Mem0[rdi:byte] == 0x2F)
	word64 rsi_19
	word64 rax_20 = fn000000000040A390(rdi, out rsi_19)
	word64 rcx_22 = rax_20 - rdi
	branch rcx_22 <=u rbp_16 l000000000040A2FD
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A2D2:
	rdx_27 = rcx_22 - 0x0000000000000001
	branch Mem0[rax_20 - 0x0000000000000001:byte] == 0x2F l000000000040A2EE
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040A2EE:
	branch rbp_16 <u rdx_27 l000000000040A2E0
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040A2E0:
	word64 rax_50 = rdx_27 - 0x0000000000000001
	branch Mem0[rdi - 0x0000000000000001 + rdx_27:byte] != 0x2F l000000000040A2F3
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040A2EB:
	rdx_27 = rax_50
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040A2DC:
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040A2FD:
	rdx_27 = rcx_22
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040A2F3:
	return rdx_27
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp

fn000000000040A2B0_exit:
// DataOut: rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx bpl:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp



word64 fn000000000040A390(word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax rsi
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx esi rax rcx rdx rsi si sil
// Preserved: rsp
fn000000000040A390_entry:
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A390:
	word32 edx_107 = (word32) Mem0[rdi:byte]
	word64 rax_104 = rdi
	branch (byte) edx_107 != 0x2F l000000000040A3AC
// DataOut: dl ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A39B:
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:rdi

l000000000040A3A0:
	rax_104 = rax_104 + 0x0000000000000001
	edx_107 = (word32) Mem0[rax_104:byte]
	branch (byte) edx_107 == 0x2F l000000000040A3A0
// DataOut: dl ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid>

l000000000040A3AC:
	word64 rsi_16 = 0x0000000000000000
	*rsiOut = rsi_16
	byte sil_102 = 0x00
	word64 rdx_19 = rax_104
	branch (byte) (uint64) edx_107 == 0x00 l000000000040A3F7
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid>

l000000000040A3F7:
	return rax_104
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid>

l000000000040A3B7:
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid>

l000000000040A3C0:
	rdx_19 = rdx_19 + 0x0000000000000001
	byte cl_52 = (byte) (word32) Mem0[rdx_19:byte]
	branch cl_52 == 0x00 l000000000040A3E5
// DataOut: cl ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3CB:
	branch cl_52 == 0x2F l000000000040A3F0
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3F0:
	word64 rsi_100
	*rsiOut = 0x0000000000000001
	sil_102 = 0x01 (alias)
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3D0:
	branch sil_102 == 0x00 l000000000040A3C0
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3D5:
	rdx_19 = rdx_19 + 0x0000000000000001
	rax_104 = rdx_19
	cl_52 = (byte) (word32) Mem0[rdx_19:byte] (alias)
	word64 rsi_94 = 0x0000000000000000
	*rsiOut = rsi_94
	sil_102 = 0x00 (alias)
	branch cl_52 != 0x00 l000000000040A3CB
// DataOut: cl ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3E5:
	return rax_104
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

fn000000000040A390_exit:
// DataOut: rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>



word64 fn000000000040A400(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax
// Trashed: SCZO ah al ax dh dl dx eax edx rax rdx
// Preserved: rbx rsp
fn000000000040A400_entry:
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A400:
	word64 rax_24 = DPB(rax, strlen(rdi), 0)
	branch rax_24 <=u 0x0000000000000001 l000000000040A41A
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A40F:
	word64 rdx_33 = rax_24 - 0x0000000000000001
	branch Mem0[rdi - 0x0000000000000001 + rax_24:byte] == 0x2F l000000000040A420
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx

l000000000040A420:
	rax_24 = rdx_33
	branch rdx_33 != 0x0000000000000001 l000000000040A40F
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx

l000000000040A429:
	return rdx_33
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx

l000000000040A41A:
	return rax_24
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx

fn000000000040A400_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx eax:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx



void fn000000000040A600(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx rax rdi rdx
// Preserved: rsp
fn000000000040A600_entry:
// DataOut: fs r11 r15 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A600:
	word32 edi_5 = (word32) (uint64) Mem0[rdi + 0x0000000000000018:word32]
// DataOut: edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A430:
	byte dl_15
	word32 eax_9 = (word32) (uint64) ((word32) (uint64) edi_5 & 0x0000F000)
	branch eax_9 == 0x00008000 l000000000040A5B0
// DataOut: eax edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid>

l000000000040A5B0:
	dl_15 = 0x2D (alias)
// DataOut: dl edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A442:
	branch eax_9 == 0x00004000 l000000000040A5C0
// DataOut: eax edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5C0:
	dl_15 = 0x64 (alias)
// DataOut: dl edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A44D:
	branch eax_9 == 0x00006000 l000000000040A5D0
// DataOut: eax edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5D0:
	dl_15 = 0x62 (alias)
// DataOut: dl edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A458:
	branch eax_9 == 0x00002000 l000000000040A5A0
// DataOut: eax edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5A0:
	dl_15 = 0x63 (alias)
// DataOut: dl edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A463:
	branch eax_9 == 0x0000A000 l000000000040A5E0
// DataOut: eax edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5E0:
	dl_15 = 0x6C (alias)
// DataOut: dl edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A46E:
	branch eax_9 == 0x00001000 l000000000040A5F0
// DataOut: eax edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5F0:
	dl_15 = 0x70 (alias)
// DataOut: dl edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A479:
	dl_15 = 0x73 (alias)
	branch eax_9 == 0x0000C000 l000000000040A48B
// DataOut: al dl edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A488_1:
	dl_15 = 0x3F (alias)
// DataOut: dl edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x000000000000003F rdx:0x0000000000000073

l000000000040A48B:
	byte al_180
	Mem18[rsi:byte] = dl_15
	Mem30[rsi + 0x0000000000000001:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000100)) - 0x00000001)) & 0xFFFFFFBB) + 0x00000072)
	Mem43[rsi + 0x0000000000000002:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000080)) - 0x00000001)) & 0xFFFFFFB6) + 0x00000077)
	word32 eax_51 = (word32) (uint64) (0x00000000 - (bool) cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000040)) - 0x00000001))
	branch (edi_5 & 0x00000800) == 0x00000000 l000000000040A590
// DataOut: al eax edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A590:
	al_180 = (byte) (uint64) ((word32) (uint64) (eax_51 & 0xFFFFFFB5) + 0x00000078) (alias)
// DataOut: al edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A4CD:
	al_180 = (byte) (uint64) ((word32) (uint64) (eax_51 & 0xFFFFFFE0) + 0x00000073) (alias)
// DataOut: al edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A4D3:
	byte al_168
	Mem57[rsi + 0x0000000000000003:byte] = al_180
	Mem70[rsi + 0x0000000000000004:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000020)) - 0x00000001)) & 0xFFFFFFBB) + 0x00000072)
	Mem83[rsi + 0x0000000000000005:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000010)) - 0x00000001)) & 0xFFFFFFB6) + 0x00000077)
	word32 eax_91 = (word32) (uint64) (0x00000000 - (bool) cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000008)) - 0x00000001))
	branch (edi_5 & 0x00000400) == 0x00000000 l000000000040A580
// DataOut: al eax edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A580:
	al_168 = (byte) (uint64) ((word32) (uint64) (eax_91 & 0xFFFFFFB5) + 0x00000078) (alias)
// DataOut: al edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A50E:
	al_168 = (byte) (uint64) ((word32) (uint64) (eax_91 & 0xFFFFFFE0) + 0x00000073) (alias)
// DataOut: al edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A514:
	Mem97[rsi + 0x0000000000000006:byte] = al_168
	Mem110[rsi + 0x0000000000000007:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000004)) - 0x00000001)) & 0xFFFFFFBB) + 0x00000072)
	Mem126[rsi + 0x0000000000000008:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000002)) - 0x00000001)) & 0xFFFFFFB6) + 0x00000077)
	branch (edi_5 & 0x00000200) == 0x00000000 l000000000040A560
// DataOut: edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A560:
	Mem151[rsi + 0x000000000000000A:byte] = 0x20
	Mem152[rsi + 0x000000000000000B:byte] = 0x00
	Mem163[rsi + 0x0000000000000009:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond((word32) ((uint64) (edi_5 & 0x00000001)) - 0x00000001)) & 0xFFFFFFB5) + 0x00000078)
	return
// DataOut: fs r11 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A545:
	Mem136[rsi + 0x000000000000000A:byte] = 0x20
	Mem137[rsi + 0x000000000000000B:byte] = 0x00
	Mem148[rsi + 0x0000000000000009:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - (bool) cond((word32) ((uint64) (edi_5 & 0x00000001)) - 0x00000001)) & 0xFFFFFFE0) + 0x00000074)
	return
// DataOut: fs r11 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

fn000000000040A600_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax



word64 fn000000000040A610(word64 rdx, word64 rsi, word64 rdi, ptr64 & r14dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: r14d rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r14 r14b r14d r14w rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040A610_entry:
// DataOut: fs r10 r11 r12 r13 r8 r9 rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A610:
	word64 rdx_7
	word64 rsi_8
	word64 rdi_9
	word32 r14d_10
	word64 rax_11 = fn000000000040A630(rdx, rsi, rdi, out rdx_7, out rsi_8, out rdi_9, out r14d_10)
	branch rax_11 == 0x0000000000000000 l000000000040A623
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rax rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A623:
	fn0000000000410E50()
// DataOut: fs r10 r11 r12 r13 r8 r9 rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> eax:<invalid> rcx:<invalid> rax:<invalid> al:<invalid> edx:<invalid> ecx:<invalid>
// Terminates process

l000000000040A628_thunk_fn000000000040A630:
	word64 rdx_25
	word64 rsi_26
	word64 rdi_27
	word32 r14d_28
	return fn000000000040A630(rdx_7, rsi_8, rdi_9, out rdx_25, out rsi_26, out rdi_27, out r14d_28)
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn:

l000000000040A61E:
	return rax_11
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> eax:<invalid> rcx:<invalid> rax:<invalid> al:<invalid> edx:<invalid> ecx:<invalid>

fn000000000040A610_exit:
// DataOut: r14d rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> eax:<invalid> rcx:<invalid> rax:<invalid> al:<invalid> edx:<invalid> ecx:<invalid>



word64 fn000000000040A630(word64 rdx, word64 rsi, word64 rdi, ptr64 & rdxOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r14dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: r14d rax rdi rdx rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r14 r14b r14d r14w rax rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040A630_entry:
// DataOut: fs r10 r11 r14d r8 r9 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A630:
	word64 rsi_31
	word64 rax_32 = fn000000000040A390(rdi, out rsi_31)
	word64 rax_35 = fn000000000040A400(rax_32)
	word64 rdx_39 = rax_32 - rdi
	*rdxOut = rdx_39
	word64 r14_10 = 0x0000000000000000
	word64 rsi_43 = rdx_39 + rax_35
	*rsiOut = rsi_43
	branch rax_35 == 0x0000000000000000 l000000000040A679
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(32) Local -0048(64)

l000000000040A66D:
	r14_10 = (uint64) (Mem0[rax_32 - 0x0000000000000001 + rax_35:byte] != 0x2F) (alias)
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -72(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0048(64)

l000000000040A679:
	word64 rbx_131 = rsi + 0x0000000000000001
	branch Mem0[rsi:byte] == 0x2F l000000000040A700
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -72(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0048(64)

l000000000040A700:
	rbx_131 = rbx_131 + 0x0000000000000000
	branch Mem0[rbx_131:byte] != 0x2F l000000000040A682
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -72(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0048(64)

l000000000040A70D:
	rbx_131 = rbx_131 + 0x0000000000000001
	branch Mem0[rbx_131 + 0x0000000000000001:byte] != 0x2F l000000000040A682
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -72(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0048(64)

l000000000040A71A:
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -72(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0048(64)

l000000000040A682:
	word64 rax_114
	word64 rax_56 = DPB(rax_35, strlen(rbx_131), 0)
	word64 rdi_60 = rsi_43 + 0x0000000000000001 + r14_10 + rax_56
	*rdiOut = rdi_60
	word64 rax_61 = malloc(rdi_60)
	branch rax_61 == 0x0000000000000000 l000000000040A720
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -72(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0040(64) Local -0048(64)

l000000000040A720:
	rax_114 = 0x0000000000000000
// DataOut: fs r10 r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32)

l000000000040A6A8:
	word64 rax_101 = mempcpy(rax_61, rdi, rsi_43)
	Mem105[rax_101:byte] = 0x2F
	word64 rdi_106 = rax_101 + r14_10
	*rdiOut = rdi_106
	branch rdx == 0x0000000000000000 l000000000040A6D5
// DataOut: fs r10 r11 r13 r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0040(64)

l000000000040A6C3:
	Mem125[rdi_106:word64] = rdi_106 - (uint64) (Mem105[rsi:byte] == 0x2F)
// DataOut: fs r10 r11 r13 r8 r9 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:rdi r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0040(64)

l000000000040A6D5:
	Mem113[mempcpy(rdi_106, rbx_131, rax_56):byte] = 0x00
	word64 rdx_110
	*rdxOut = rax_56
	word64 rsi_111
	*rsiOut = rbx_131
	rax_114 = rax_61
// DataOut: fs r10 r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:rdi r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> al:Test(EQ,Z) edx:<invalid> ecx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32)

l000000000040A6E8:
	word32 r14d_89
	*r14dOut = (word32) r14
	return rax_114
// DataOut: fs r10 r11 r14d r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> al:<invalid> edx:<invalid> ecx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040A630_exit:
// DataOut: r14d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r15:r15 r14:r14 r12:r12 rbp:rbp rbx:rbx rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> eax:<invalid> rcx:<invalid> rax:<invalid> r13:r13 al:<invalid> edx:<invalid> ecx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



void fn000000000040A730(word64 rdi, word32 r14d)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r14d rdi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx esi r10 r10b r10d r10w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdx rsi si sil
// Preserved: rsp
fn000000000040A730_entry:
// DataOut: r14d rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A730:
	word64 rdx_116 = Mem0[rdi:word64]
	byte cl_119 = (byte) (word32) Mem0[rdx_116:byte]
	branch cl_119 == 0x00 l000000000040A7CD
// DataOut: cl r14d rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A7CD:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid>

l000000000040A73E:
	byte r8b_130 = 0x00
	word64 rax_100 = 0x0000000000000000
// DataOut: cl r10 r14d r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid>

l000000000040A776:
	branch r8b_130 != 0x00 l000000000040A750
// DataOut: cl r10 r14d r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A750:
	r8b_130 = 0x00 (alias)
	branch (word32) (uint64) ((word32) (uint64) ((int32) cl_119 & 0xFFFFFFDF) - 0x00000041) <=u 0x00000019 l000000000040A768
// DataOut: cl r10 r14d r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A77B:
	branch cl_119 == 0x2E l000000000040A7B8
// DataOut: cl r10 r14d r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A7B8:
	branch rax_100 == 0x0000000000000000 l000000000040A7C8
// DataOut: r10 r14d rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A7C8:
	rax_100 = rdx_116
// DataOut: r10 r14d rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A7BD:
	r8b_130 = 0x01 (alias)
// DataOut: r10 r14d r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A780:
	word32 esi_104 = (int32) cl_119
	branch r14 <=u 0x0000000000000039 l000000000040A768
// DataOut: cl esi r10 r14d r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A78D:
	branch (word32) (uint64) ((word32) (uint64) (esi_104 & 0xFFFFFFDF) - 0x00000041) >u 0x00000019 l000000000040A761
// DataOut: cl r10 r14d r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:(int32) cl r9d:r14 - 0x0000000000000030 rsi:<invalid>

l000000000040A761:
	branch cl_119 == 0x7E l000000000040A768
// DataOut: r10 r14d r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A764_1:
	rax_100 = 0x0000000000000000
// DataOut: r10 r14d r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A768:
	rdx_116 = rdx_116 + 0x0000000000000001
	Mem85[rdi:word64] = rdx_116
	cl_119 = (byte) (word32) Mem85[rdx_116:byte] (alias)
	branch cl_119 == 0x00 l000000000040A7B0
// DataOut: cl r10 r14d r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A798:
	rdx_116 = rdx_116 + 0x0000000000000001
	Mem117[rdi:word64] = rdx_116
	cl_119 = (byte) (word32) Mem117[rdx_116:byte] (alias)
	branch cl_119 != 0x00 l000000000040A776
// DataOut: cl r10 r14d r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> r9d:r14 - 0x0000000000000030 rsi:<invalid>

l000000000040A7A6:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> r9d:r14 - 0x0000000000000030 rsi:<invalid>

l000000000040A7B0:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

fn000000000040A730_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> rax:<invalid> r8:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030



void fn000000000040AB30(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi esi rax rdi rsi si sil
// Preserved: rbx rsp
fn000000000040AB30_entry:
// DataOut: fs r13 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(64) Local -0018(64)

l000000000040AB30:
	branch clock_gettime(0x0000000000000000, rdi) == 0x00000000 l000000000040AB67
// DataOut: fs r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(64) Local -0018(64)

l000000000040AB46:
	gettimeofday(fp - 0x0000000000000018, 0x0000000000000000)
	Mem28[rdi:word64] = qwLoc18
	Mem33[rdi + 0x0000000000000008:word64] = qwLoc10 *s 1000
// DataOut: fs r13
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rsi:rdi rbx:rdi rdi:<invalid> eax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l000000000040AB67:
	return
// DataOut: fs r13
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rsi:<invalid> rbx:rdi rdi:<invalid> eax:<invalid> rax:<invalid> -8(fp):rbx

fn000000000040AB30_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rbx:rbx rdi:<invalid> eax:<invalid> rax:<invalid> -8(fp):rbx



byte fn000000000040AB70(word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: al rsi
// Trashed: SCZO ah al ax ch cl cx di dil eax ecx edi esi rax rcx rdi rsi si sil
// Preserved: rsp
fn000000000040AB70_entry:
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AB70:
	word64 rsi_3
	*rsiOut = 0x0000000000000000
	word64 rax_6 = setlocale(rdi, 0x0000000000000000)
	branch rax_6 == 0x0000000000000000 l000000000040ABB0
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ABB0:
	return 0x01
// DataOut: al ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rax:<invalid>

l000000000040AB80:
	bool Z_30 = (bool) cond(Mem0[rax_6:byte] - 0x43)
	branch Mem0[rax_6:byte] != 0x43 l000000000040AB98
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rax:<invalid>

l000000000040AB85:
	Z_30 = (bool) cond(Mem0[rax_6 + 0x0000000000000001:byte]) (alias)
	branch Mem0[rax_6 + 0x0000000000000001:byte] != 0x00 l000000000040AB98
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rax:<invalid>

l000000000040AB98:
	word64 rsi_36
	*rsiOut = rax_6
	word64 rdi_38 = 0x0000000000415E6A
	word64 rcx_40 = 0x0000000000000006
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rax:<invalid>

l000000000040ABA5:
	branch rcx_40 == 0x0000000000000000 l000000000040ABA7
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rax:<invalid> rdi:<invalid> rcx:<invalid>

l000000000040ABA5_1:
	Z_30 = (bool) cond(Mem0[rsi_93:byte] - Mem0[rdi_94:byte]) (alias)
	*rsiOut = rsi_93 + 0x0000000000000001
	rdi_38 = rdi_94 + 0x0000000000000001
	rcx_40 = rcx_40 - 0x0000000000000001
	word64 rsi_93 = rsi_36
	word64 rdi_94 = rdi_38
	branch Mem0[rsi_93:byte] != Mem0[rdi_94:byte] l000000000040ABA5
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rax:<invalid> rdi:<invalid> rcx:<invalid>

l000000000040ABA7:
	return Z_30
// DataOut: al ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rax:<invalid> rdi:<invalid> rcx:<invalid>

l000000000040AB8B:
	return 0x00
// DataOut: al ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rax:<invalid>

fn000000000040AB70_exit:
// DataOut: al rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rax:<invalid> rdi:<invalid> rcx:<invalid> al:Test(NE,Z)



word64 fn000000000040ABC0(word64 rdi, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: r8 r9 rax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040ABC0_entry:
	*rsiOut = rsi
	*r8Out = r8
	*r9Out = r9
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ABC0:
	word64 rdi_129
	branch rdi >u 0x0000000000000009 l000000000040AC4F
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AC4F:
	rdi_129 = rdi | 0x0000000000000001
	branch (rdi | 0x0000000000000001) != 0xFFFFFFFFFFFFFFFF l000000000040ABCF
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AC5D:
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:rdi | 0x0000000000000001

l000000000040ABCA:
	rdi_129 = 0x000000000000000B
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ABCF:
	word64 r9_29
	*r9Out = 0x00000000AAAAAAAB
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid>

l000000000040ABE0:
	word64 rcx_102
	branch rdi_129 <=u 0x0000000000000009 l000000000040AC48
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040AC48:
	rcx_102 = 0x0000000000000003
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040ABE6:
	word64 rdx_rax_89 = rdi_129 *u 0x00000000AAAAAAAB
	branch rdi_129 == (rdx_rax_89 >>u 0x0000000000000001) + (rdx_rax_89 >>u 0x0000000000000001) * 0x0000000000000002 l000000000040AC3A
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040ABF8:
	word64 r8_103
	*r8Out = 0x0000000000000010
	word64 rsi_101 = 0x0000000000000009
	rcx_102 = 0x0000000000000003
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040AC21:
	rsi_101 = rsi_101 + r8_103
	*rsiOut = rsi_101
	rcx_102 = rcx_102 + 0x0000000000000002
	branch rsi_101 <u rdi_129 l000000000040AC10
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> rcx:<invalid>

l000000000040AC10:
	*r8Out = r8_103 + 0x0000000000000008
	branch (uint64) (rdi_129 % rcx_102) == 0x0000000000000000 l000000000040AC3A
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> rcx:<invalid>

l000000000040AC2D:
	branch (uint64) (rdi_129 % rcx_102) != 0x0000000000000000 l000000000040AC44
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040AC3A:
	rdi_129 = rdi_129 + 0x0000000000000002
	branch rdi_129 != 0xFFFFFFFFFFFFFFFF l000000000040ABE0
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040AC44:
	return rdi_129
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

fn000000000040ABC0_exit:
// DataOut: r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> r9:0x00000000AAAAAAAB Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>



word64 fn000000000040AC80(word64 rax, word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi
// LiveOut: al rax rsi
// Trashed: SCZO ah al ax di dil eax edi esi rax rdi rsi si sil
// Preserved: rbx rsp
fn000000000040AC80_entry:
// DataOut: fs r10 r11 r12 r13 r13b r14 r15 r15b r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AC80:
	word64 rsp_11
	word64 rbx_12
	word64 rdi_13
	word64 rsi_14
	word64 rax_15
	byte SCZO_16
	bool C_17
	call Mem0[rdi + 0x0000000000000030:word64] (retsize: 8; depth: 16)
		uses: qwLoc08_4,rbx_6,rdi_8,rsi_10,rsp_2
		defs: C_17,rax_15,rbx_12,rdi_13,rsi_14,rsp_11,SCZO_16
	branch rax_15 >=u Mem0[rbx_12 + 0x0000000000000010:word64] l000000000040AC9D
// DataOut: fs r10 r11 r12 r13 r13b r14 r15 r15b r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AC9D:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rdi:<invalid> rsi:<invalid> -8(fp):rbx

l000000000040AC94:
	return (rax_15 << 0x0000000000000004) + Mem0[rbx_12:word64]
// DataOut: al fs r10 r11 r12 r13 r13b r14 r15 r15b r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rdi:<invalid> rsi:<invalid> -8(fp):rbx

fn000000000040AC80_exit:
// DataOut: al rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rdi:<invalid> rsi:<invalid> rax:<invalid> -8(fp):rbx



word64 fn000000000040ACB0(word64 rax, word32 ecx, word64 rsi, word64 rdi, word64 r8, word64 r11, ptr64 & rsiOut, ptr64 & r9Out, ptr64 & r10Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cl ecx r11 r8 rax rdi rsi
// LiveOut: r10 r9 rax rsi
// Trashed: SCZO ah al ax ch cl cx di dil eax ecx edi esi r10 r10b r10d r10w r9 r9b r9d r9w rax rcx rdi rsi si sil
// Preserved: r12 r13 r14 rbp rbx rsp
fn000000000040ACB0_entry:
	*r9Out = r9
	*r10Out = r10
// DataOut: cl ecx fs r10 r11 r15 r8 r9 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ACB0:
	word64 r13_11 = (uint64) ecx
	word64 rsi_28
	word64 rax_29 = fn000000000040AC80(rax, rdi, out rsi_28)
	Mem31[rsi_28:word64] = rax_29
	byte r13b_13 = (byte) r13_11
	word64 rbp_143 = rdi
	word64 rsi_109 = Mem31[rax_29:word64]
	*rsiOut = rsi_109
	word64 rbx_142 = rax_29
	branch rsi_109 == 0x0000000000000000 l000000000040AD4F
// DataOut: al fs r10 r11 r12 r13b r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ACD7:
	branch rsi == rsi_109 l000000000040ACE9
// DataOut: al fs r10 r11 r12 r13b r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040ACDC:
	word64 rsp_168
	word64 r14_169
	word64 rdx_170
	word64 r13_171
	word32 r13d_172
	word32 ecx_173
	word64 rsi_175
	word64 rdi_177
	word64 rax_179
	byte SZO_180
	bool C_181
	bool Z_182
	byte SCZO_183
	byte al_184
	word32 esi_185
	word64 r9_187
	word64 r10_189
	word64 rcx_191
	word64 r12_174
	call Mem31[rdi + 0x0000000000000038:word64] (retsize: 8; depth: 48)
		uses: al_30,C_37,ecx,esi_33,qwLoc08_4,qwLoc10_9,qwLoc18_16,qwLoc20_21,qwLoc28_26,r10,r11,r12_18,r13_11,r13b_13,r13d_12,r14_6,r8,r9,rax_29,rbp_23,rbx_34,rcx,rdi_167,rdx,rsi_32,rsp_24,SCZO_99,SZO_35,Z_100
		defs: al_184,C_181,ecx_173,esi_185,r10_189,r11_190,r12_174,r13_171,r13b_186,r13d_172,r14_169,r8_188,r9_187,rax_179,rbp_176,rbx_178,rcx_191,rdi_177,rdx_170,rsi_175,rsp_168,SCZO_183,SZO_180,Z_182
	branch al_184 == 0x00 l000000000040AD46
// DataOut: fs r10 r11 r12 r13b r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD46:
	word64 rax_216 = Mem31[rbx_142 + 0x0000000000000008:word64]
	branch rax_216 != 0x0000000000000000 l000000000040AD30
// DataOut: al fs r10 r11 r12 r13b r15 r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD30:
	rsi_109 = Mem31[rax_216:word64]
	*rsiOut = rsi_109
	branch rsi_109 == r12_174 l000000000040AD67
// DataOut: al fs r10 r11 r12 r13b r15 r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD38:
	word64 rsp_268
	word64 r14_269
	word64 rdx_270
	word64 r13_271
	word32 r13d_272
	word32 ecx_273
	word64 rsi_275
	word64 rdi_277
	word64 rax_279
	byte SZO_280
	bool C_281
	bool Z_282
	byte SCZO_283
	byte al_284
	word32 esi_285
	word64 r9_287
	word64 r8_288
	word64 r10_289
	word64 r11_290
	word64 rcx_291
	call Mem31[rbp_143 + 0x0000000000000038:word64] (retsize: 8; depth: 48)
		uses: al_217,C_220,ecx_202,esi_222,qwLoc08_4,qwLoc10_9,qwLoc18_16,qwLoc20_21,qwLoc28_26,r10_208,r11_197,r12_212,r13_213,r13b_199,r13d_203,r14_214,r8_198,r9_207,rax_216,rbp_211,rbx_210,rcx_209,rdi_267,rdx_204,rsi_221,rsp_215,SCZO_223,SZO_218,Z_224
		defs: al_284,C_281,ecx_273,esi_285,r10_289,r11_290,r12_274,r13_271,r13b_286,r13d_272,r14_269,r8_288,r9_287,rax_279,rbp_276,rbx_278,rcx_291,rdi_277,rdx_270,rsi_275,rsp_268,SCZO_283,SZO_280,Z_282
	branch al_284 != 0x00 l000000000040AD60
// DataOut: fs r10 r11 r12 r13b r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD60:
	rax_216 = Mem31[rbx_142 + 0x0000000000000008:word64]
	*rsiOut = Mem31[rax_216:word64]
// DataOut: fs r10 r11 r13b r15 r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD67:
	branch r13b_13 == 0x00 l000000000040AD1C
// DataOut: fs r10 r11 r15 r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD6C:
	Mem250[rbx_142 + 0x0000000000000008:word64] = Mem31[rax_216 + 0x0000000000000008:word64]
	Mem251[rax_216:word64] = 0x0000000000000000
	Mem253[rax_216 + 0x0000000000000008:word64] = Mem251[rbp_143 + 0x0000000000000048:word64]
	Mem254[rbp_143 + 0x0000000000000048:word64] = rax_216
	return rsi_109
// DataOut: fs r10 r11 r15 r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l000000000040AD42:
	rbx_142 = Mem31[rbx_142 + 0x0000000000000008:word64]
// DataOut: fs r10 r11 r12 r13b r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD4F:
	word64 rsi_89
	*rsiOut = 0x0000000000000000
	return 0x0000000000000000
// DataOut: fs r10 r11 r15 r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l000000000040ACE6:
	*rsiOut = Mem31[rbx_142:word64]
// DataOut: fs r10 r11 r13b r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040ACE9:
	branch r13b_13 == 0x00 l000000000040AD1C
// DataOut: fs r10 r11 r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040ACEE:
	word64 rax_153 = Mem31[rbx_142 + 0x0000000000000008:word64]
	branch rax_153 == 0x0000000000000000 l000000000040AD98
// DataOut: fs r10 r11 r15 r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD98:
	Mem166[rbx_142:word64] = 0x0000000000000000
// DataOut: fs r10 r11 r15 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040ACFB:
	word64 r9_158 = Mem31[r8:word64]
	*r9Out = r9_158
	word64 r10_159 = Mem31[r8 + 0x0000000000000008:word64]
	*r10Out = r10_159
	Mem160[r11:word64] = r9_158
	Mem161[r11 + 0x0000000000000008:word64] = r10_159
	Mem162[rax_153:word64] = 0x0000000000000000
	Mem164[rax_153 + 0x0000000000000008:word64] = Mem162[rbp_143 + 0x0000000000000048:word64]
	Mem165[rbp_143 + 0x0000000000000048:word64] = rax_153
// DataOut: fs r10 r11 r15 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD1C:
	return rsi_109
// DataOut: fs r10 r11 r15 r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

fn000000000040ACB0_exit:
// DataOut: r10 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r14:r14 r13:r13 r12:r12 rbp:rbp rsi:<invalid> rbx:rbx rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14



byte fn000000000040ADB0(word64 rdi, word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rdi
// LiveOut: al
// Trashed: SCZOP ah al ax eax rax xmm0 xmm1 xmm2 xmm3 ymm0 ymm1 ymm2 ymm3
// Preserved: rsp
fn000000000040ADB0_entry:
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ADB0:
	word64 rax_4 = Mem0[rdi:word64]
	branch r8 == 0x0000000000415EE0 l000000000040AE30
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AE30:
// DataOut: al fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l000000000040ADBB:
	word128 xmm0_37 = DPB(xmm0, Mem0[rax_4 + 0x0000000000000008:real32], 0)
	branch Mem0[rax_4 + 0x0000000000000008:real32] <=u Mem0[0x0000000000415EF4:real32] l000000000040AE20
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l000000000040ADC9:
	branch Mem0[0x0000000000415EF8:real32] <=u xmm0_37 l000000000040AE20
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid>

l000000000040ADD6:
	branch Mem0[rax_4 + 0x000000000000000C:real32] <=u Mem0[0x0000000000415EFC:real32] l000000000040AE20
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid>

l000000000040ADE4:
	branch Mem0[rax_4:real32] <u Mem0[0x0000000000415F00:real32] l000000000040AE20
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid>

l000000000040ADF1:
	word128 xmm1_74 = DPB(xmm1, Mem0[rax_4:real32] + Mem0[0x0000000000415EF4:real32], 0)
	word128 xmm2_75 = DPB(xmm2, Mem0[rax_4 + 0x0000000000000004:real32], 0)
	branch Mem0[rax_4 + 0x0000000000000004:real32] <=u xmm1_74 l000000000040AE20
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid>

l000000000040AE03:
	branch Mem0[0x0000000000415F04:real32] <u xmm2_75 l000000000040AE20
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid>

l000000000040AE10:
	branch Mem0[rax_4 + 0x0000000000000008:real32] >u xmm1_74 l000000000040AE35
// DataOut: al fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

l000000000040AE35:
	return 0x01
// DataOut: al fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000001 xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

l000000000040AE1A:
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000001 xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

l000000000040AE20:
	Mem52[rdi:word64] = 0x0000000000415EE0
	return 0x00
// DataOut: al fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

fn000000000040ADB0_exit:
// DataOut: al
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>



word64 fn000000000040AE40(word64 rax, word32 edx, word64 rbp, word64 rsi, word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edx rax rbp rdi rsi
// LiveOut: al eax rax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040AE40_entry:
	*rsiOut = rsi
// DataOut: dl ebp edx fs r10 r11 r8 r9 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AE40:
	byte r15b_8 = (byte) (uint64) edx
	word64 r13_113 = Mem0[rsi:word64]
	branch r13_113 >=u Mem0[rsi + 0x0000000000000008:word64] l000000000040AEEF
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE64:
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE68:
	rbp = Mem0[rbp:word64]
	branch rbp == 0x0000000000000000 l000000000040AEE1
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE71:
	word64 rbx_116 = Mem0[rbp + 0x0000000000000008:word64]
	branch rbx_116 != 0x0000000000000000 l000000000040AE94
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE94:
	word64 rbp_204 = Mem0[rbx_116:word64]
	word64 rsi_207
	rax = fn000000000040AC80(rax, rdi, out rsi_207)
	word64 rdx_212 = Mem0[rbx_116 + 0x0000000000000008:word64]
	branch Mem0[rax:word64] != 0x0000000000000000 l000000000040AE80
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE80:
	Mem243[rbx_116 + 0x0000000000000008:word64] = Mem0[rax + 0x0000000000000008:word64]
	Mem244[rax + 0x0000000000000008:word64] = rbx_116
	branch rdx_212 == 0x0000000000000000 l000000000040AED0
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AEAC:
	Mem228[rax:word64] = rbp_204
	Mem230[rdi + 0x0000000000000018:word64] = Mem228[rdi + 0x0000000000000018:word64] + 0x0000000000000001
	Mem234[rbx_116:word64] = 0x0000000000000000
	rax = Mem234[rdi + 0x0000000000000048:word64]
	Mem237[rbx_116 + 0x0000000000000008:word64] = rax
	Mem238[rdi + 0x0000000000000048:word64] = rbx_116
	branch rdx_212 != 0x0000000000000000 l000000000040AE91
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE91:
	rbx_116 = rdx_212
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AECF:
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AED0:
	rbp = Mem0[rbp_204:word64]
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE7A:
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AED4:
	Mem133[rbp + 0x0000000000000008:word64] = 0x0000000000000000
	branch r15b_8 == 0x00 l000000000040AF08
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF08:
	word64 rsi_136
	rax = fn000000000040AC80(rax, rdi, out rsi_136)
	branch Mem133[rax:word64] == 0x0000000000000000 l000000000040AF5B
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF5B:
	Mem195[rax:word64] = rbp
	Mem197[rdi + 0x0000000000000018:word64] = Mem195[rdi + 0x0000000000000018:word64] + 0x0000000000000001
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF1C:
	rax = Mem133[rdi + 0x0000000000000048:word64]
	branch rax == 0x0000000000000000 l000000000040AF66
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF66:
	rax = malloc(0x0000000000000010)
	branch rax != 0x0000000000000000 l000000000040AF2F
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF75:
	return 0x0000000000000000
// DataOut: al eax ebp fs r10 r11 r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:0x0000000000000010 rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040AF26:
	Mem171[rdi + 0x0000000000000048:word64] = Mem133[rax + 0x0000000000000008:word64]
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF2F:
	word64 rdx_166 = Mem133[rax + 0x0000000000000008:word64]
	Mem167[rax:word64] = rbp
	Mem168[rax + 0x0000000000000008:word64] = rdx_166
	Mem169[rax + 0x0000000000000008:word64] = rax
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF3E:
	Mem149[rbp:word64] = 0x0000000000000000
	Mem151[rsi_136 + 0x0000000000000018:word64] = Mem149[rsi_136 + 0x0000000000000018:word64] - 0x0000000000000001
	r13_113 = r13_113 + 0x0000000000000010
	branch Mem151[rsi + 0x0000000000000008:word64] >u r13_113 l000000000040AE68
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF59:
// DataOut: fs r10 r11 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AEE1:
	r13_113 = r13_113 + 0x0000000000000010
	branch Mem0[rsi + 0x0000000000000008:word64] >u r13_113 l000000000040AE68
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AEEF:
	return 0x0000000000000001
// DataOut: al eax ebp fs r10 r11 r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040AE40_exit:
// DataOut: al eax rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r15:r15 r14:r14 r12:r12 r13:r13 rax:<invalid> rbx:rbx rbp:rbp rsi:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040AFB0(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax
// Trashed: ah al ax eax rax
// Preserved: rsp
fn000000000040AFB0_entry:
// DataOut: r13 r15 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AFB0:
	return Mem0[rdi + 0x0000000000000020:word64]
// DataOut: r13 r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn000000000040AFB0_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



word64 fn000000000040B400(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 r8, word64 r11, ptr64 & r9Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rcx rdi rdx rsi
// LiveOut: eax r9 rax
// Trashed: SCZOP ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil xmm0 xmm1 xmm2 xmm3 ymm0 ymm1 ymm2 ymm3
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040B400_entry:
	*r9Out = r9
// DataOut: ebx fs r10 r11 r12d r8 r9 rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B400:
	word64 r15_185 = rdi
	word32 r15d_8 = (word32) rdi
	word64 r13_19 = rdx
	word64 r12_24 = rcx
	word64 rbp_113 = rsi
	branch rdx != 0x0000000000000000 l000000000040B42E
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B42A_1:
	r13_19 = 0x000000000040AC60
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x000000000040AC60 r15:rdi rdi:0x0000000000000050 r14:r8 r13:rdx r12:rcx rbp:rsi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B42E:
	branch rcx != 0x0000000000000000 l000000000040B43A
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x000000000040AC60 r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:rcx rbp:rsi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B436_1:
	r12_24 = 0x000000000040AC70
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x000000000040AC70 r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:rcx rbp:rsi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B43A:
	word64 rax_218
	word64 rax_43 = malloc(0x0000000000000050)
	branch rax_43 == 0x0000000000000000 l000000000040B598
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x000000000040AC70 r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:<invalid> rbp:rsi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B598:
	rax_218 = 0x0000000000000000
// DataOut: eax fs r10 r11 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:<invalid> rbp:rsi rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B44B:
	branch rsi != 0x0000000000000000 l000000000040B45B
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:<invalid> rbp:rsi rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B457_1:
	rbp_113 = 0x0000000000415EE0
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x0000000000415EE0 r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:rsi rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B45B:
	Mem114[rax_43 + 0x0000000000000028:word64] = rbp_113
	branch fn000000000040ADB0(rax_43 + 0x0000000000000028, r8) == 0x00 l000000000040B548
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x0000000000415EE0 r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B46C:
	word128 xmm1_160 = DPB(xmm1, Mem114[rbp_113 + 0x0000000000000008:real32], 0)
	branch Mem114[rbp_113 + 0x0000000000000010:byte] != 0x00 l000000000040B4C0
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r9 rbx xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B477:
	word128 xmm0_225
	branch rdi < 0x0000000000000000 l000000000040B578
// DataOut: fs r10 r11 r12 r13 r14 r15d r9 rbx xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B578:
	r15_185 = (uint64) (r15d_8 & 0x00000001)
	real32 v34_258 = (real32) (rdi >>u 0x0000000000000001 | r15_185)
	xmm0_225 = DPB(xmm0, v34_258 + DPB(xmm0, v34_258, 0), 0)
// DataOut: fs r10 r11 r12 r13 r14 r9 rbx xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B480:
	xmm0_225 = DPB(xmm0, (real32) rdi, 0)
// DataOut: fs r10 r11 r12 r13 r14 r9 rbx xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B485:
	real32 v26_229 = (real32) xmm0_225 / xmm1_160
	branch v26_229 >=u Mem114[0x0000000000415F08:real32] l000000000040B540
// DataOut: fs r10 r11 r12 r13 r14 r9 rbx xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B496:
	branch v26_229 <u Mem114[0x0000000000415F0C:real32] l000000000040B568
// DataOut: fs r10 r11 r12 r13 r14 rbx xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B568:
	r15_185 = DPB(r15_185, v26_229, 0) (alias)
// DataOut: fs r10 r11 r12 r13 r14 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B4A3:
	r15_185 = DPB(r15_185, v26_229 - Mem114[0x0000000000415F0C:real32], 0) ^ 0x0000000000000000
// DataOut: fs r10 r11 r12 r13 r14 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B4C0:
	word64 rsi_187
	word64 r8_188
	word64 r9_189
	word64 rax_190 = fn000000000040ABC0(r15_185, out rsi_187, out r8_188, out r9_189)
	branch rax_190 >u 0x00000000FFFFFFFF l000000000040B540
// DataOut: fs r10 r11 r12 r13 r14 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B540:
	Mem177[rax_43 + 0x0000000000000010:word64] = 0x0000000000000000
// DataOut: fs r10 r11 r9 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r8:<invalid> rsi:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B4DA:
	Mem198[rax_43 + 0x0000000000000010:word64] = rax_190
	branch rax_190 == 0x0000000000000000 l000000000040B548
// DataOut: fs r10 r11 r12 r13 r14 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x00000000FFFFFFFF r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r8:<invalid> rsi:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B4E3:
	word64 rax_201 = calloc(rax_190, 0x0000000000000010)
	Mem207[rax_43:word64] = rax_201
	branch rax_201 == 0x0000000000000000 l000000000040B548
// DataOut: fs r10 r11 r12 r13 r14 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x00000000FFFFFFFF r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r8:<invalid> rsi:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B548:
	free(rax_43)
	return 0x0000000000000000
// DataOut: eax ebx fs r10 r11 r12d r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> r8:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040B4F8:
	Mem209[rax_43 + 0x0000000000000018:word64] = 0x0000000000000000
	Mem210[rax_43 + 0x0000000000000020:word64] = 0x0000000000000000
	Mem213[r11 + 0x0000000000000030:word64] = r13_19
	Mem215[r11 + 0x0000000000000038:word64] = r12_24
	Mem216[rax_43 + 0x0000000000000008:word64] = rax_201 + (rax_190 << 0x0000000000000004)
	Mem217[r11 + 0x0000000000000040:word64] = r8
	Mem221[rax_43 + 0x0000000000000048:word64] = 0x0000000000000000
	rax_218 = rax_43
// DataOut: eax fs r10 r11 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:0x0000000000000010 r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r8:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B52A:
	return rax_218
// DataOut: eax ebx fs r10 r11 r12d r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:0x0000000000000010 r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r8:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040B400_exit:
// DataOut: eax r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> r15:r15 rdi:<invalid> r14:r14 r13:r13 r12:r12 rbp:rbp rbx:rbx xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> r8:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



void fn000000000040B640(word64 rdi, word64 r13, word64 r15)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r13 r15 rdi
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: r12 rbp rbx rdi rsp
fn000000000040B640_entry:
// DataOut: r13 r15 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B640:
	word64 rax_117
	word64 rbp_114 = rdi
	branch Mem0[rdi + 0x0000000000000040:word64] == 0x0000000000000000 l000000000040B655
// DataOut: r13 r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B64E:
	branch Mem0[rdi + 0x0000000000000020:word64] != 0x0000000000000000 l000000000040B6C6
// DataOut: r13 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6C6:
	word64 r12_100 = Mem0[r15:word64]
	branch r12_100 >=u Mem0[r15 + 0x0000000000000008:word64] l000000000040B693
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6CF:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6D0:
	word64 rdi_102 = Mem0[r12_100:word64]
	branch rdi_102 != 0x0000000000000000 l000000000040B6E3
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6E3:
	word64 rsp_121
	word64 rdi_124
	word64 rbx_125
	byte SCZO_126
	bool Z_127
	word64 rax_128
	bool C_130
	byte SZO_131
	byte CZ_132
	word64 r15_133
	call Mem0[rbp_114 + 0x0000000000000040:word64] (retsize: 8; depth: 32)
		uses: C_106,CZ_98,qwLoc08_4,qwLoc10_7,qwLoc18_12,r12_100,r13_95,r15_94,rax_96,rbp_99,rbx_103,rdi_102,rsp_101,SCZO_97,SZO_104,Z_105
		defs: C_130,CZ_132,r12_122,r13_129,r15_133,rax_128,rbp_123,rbx_125,rdi_124,rsp_121,SCZO_126,SZO_131,Z_127
	branch Mem0[rbx_125 + 0x0000000000000008:word64] != 0x0000000000000000 l000000000040B6E0
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6E0:
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6DC:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6EF:
	rax_117 = Mem0[rbp_114 + 0x0000000000000008:word64]
	r12_100 = r12_100 + 0x0000000000000010
	branch rax_117 >u r12_100 l000000000040B6D0
// DataOut: r12 r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6FC:
// DataOut: r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B655:
	rax_117 = Mem0[rdi + 0x0000000000000008:word64]
// DataOut: r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B659:
	word64 r12_56 = Mem0[r13:word64] + 0x0000000000000008
	branch r12_56 >=u rax_117 l000000000040B693
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B662:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B668:
	word64 rdi_63 = Mem0[r12_56 + 0x0000000000000000:word64]
	branch rdi_63 != 0x0000000000000000 l000000000040B67B
// DataOut: r12 r13 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B67B:
	word64 rbx_76 = Mem0[rdi_63 + 0x0000000000000008:word64]
	free(rdi_63)
	branch rbx_76 != 0x0000000000000000 l000000000040B678
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B678:
	rdi_63 = rbx_76
// DataOut: r12 r13 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B672:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B689:
	r12_56 = r12_56 + 0x0000000000000010
	branch Mem0[r13 + 0x0000000000000008:word64] >u r12_56 l000000000040B668
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B693:
	word64 rdi_25 = Mem0[rbp_114 + 0x0000000000000048:word64]
	branch rdi_25 != 0x0000000000000000 l000000000040B6A3
// DataOut: rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6A3:
	word64 rbx_41 = Mem0[rdi_25 + 0x0000000000000008:word64]
	free(rdi_25)
	branch rbx_41 != 0x0000000000000000 l000000000040B6A0
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6A0:
	rdi_25 = rbx_41
// DataOut: rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B69C:
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6B1:
	free(Mem0[rbp_114:word64])
	free(rbp_114)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040B640_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp r12:r12 rax:<invalid> rdi:rdi rbx:rbx -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040B710(word64 rsi, word64 rdi, word64 r11, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi r11 rdi rsi
// LiveOut: al r8 r9 rax rsi
// Trashed: SCZOP ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil xmm0 xmm1 ymm0 ymm1
// Preserved: r12 rbp rbx rsp
fn000000000040B710_entry:
	*rsiOut = rsi
	*r8Out = r8
	*r9Out = r9
// DataOut: esi fs r10 r11 r13 r14 r15 r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B710:
	word64 rbp_15 = Mem0[rdi + 0x0000000000000028:word64]
	word128 xmm1_20 = DPB(xmm1, Mem0[rbp_15 + 0x0000000000000008:real32], 0)
	branch Mem0[rbp_15 + 0x0000000000000010:byte] != 0x00 l000000000040B770
// DataOut: esi fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B72A:
	word128 xmm0_252
	branch rsi < 0x0000000000000000 l000000000040B8D0
// DataOut: esi fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B8D0:
	rsi = (uint64) (esi & 0x00000001)
	*rsiOut = rsi
	real32 v29_292 = (real32) (rsi >>u 0x0000000000000001 | rsi)
	xmm0_252 = DPB(xmm0, v29_292 + DPB(xmm0, v29_292, 0), 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B733:
	xmm0_252 = DPB(xmm0, (real32) rsi, 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B738:
	real32 v16_257 = (real32) xmm0_252 / xmm1_20
	branch v16_257 >=u Mem0[0x0000000000415F08:real32] l000000000040B870
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B749:
	branch v16_257 <u Mem0[0x0000000000415F0C:real32] l000000000040B880
// DataOut: fs r10 r11 r13 r14 r15 rbp rbx xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B880:
	rsi = DPB(rsi, v16_257, 0) (alias)
// DataOut: fs r10 r11 r13 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B756:
	rsi = DPB(rsi, v16_257 - Mem0[0x0000000000415F0C:real32], 0) ^ 0x0000000000000000
// DataOut: fs r10 r11 r13 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B770:
	word64 rsi_113
	word64 r8_114
	word64 r9_115
	word64 rax_116 = fn000000000040ABC0(rsi, out rsi_113, out r8_114, out r9_115)
	branch rax_116 >u 0x00000000FFFFFFFF || rax_116 <u 0x0000000000000001 l000000000040B870
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B792:
	branch Mem0[r11 + 0x0000000000000010:word64] == rax_116 l000000000040B860
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:0x00000000FFFFFFFE xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B860:
	return 0x0000000000000001
// DataOut: al fs r10 r11 r13 r14 r15 r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:0x00000000FFFFFFFE xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B79C:
	word64 rsi_126
	*rsiOut = 0x0000000000000010
	word64 rax_129 = calloc(rax_116, 0x0000000000000010)
	branch rax_129 == 0x0000000000000000 l000000000040B870
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:0x00000000FFFFFFFE xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0068(64)

l000000000040B870:
	return 0x0000000000000000
// DataOut: al fs r10 r11 r13 r14 r15 r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -104(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B7B6:
	word64 rax_155 = Mem0[rdi + 0x0000000000000048:word64]
	word64 rsi_157
	word64 rax_158 = fn000000000040AE40(rax_155, 0x00000000, rbp_15, rdi, fp - 0x0000000000000068, out rsi_157)
	word64 rbp_164 = (uint64) (word32) rax_158
	word64 rax_140 = rax_129 + (rax_116 << 0x0000000000000004)
	word32 ebp_165 = (word32) rbp_164
	branch (byte) rax_158 != 0x00 l000000000040B890
// DataOut: ebp fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:0x0000000000000010 xmm0:<invalid> esi:0x00000010 r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -104(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64) Local -0058(64) Local -0060(64) Local -0068(64)

l000000000040B890:
	free(Mem0[rdi:word64])
	Mem216[rdi:word64] = rax_129
	Mem218[rdi + 0x0000000000000008:word64] = rax_140
	Mem220[rdi + 0x0000000000000010:word64] = rax_116
	Mem222[rdi + 0x0000000000000018:word64] = 0x0000000000000000
	Mem224[rdi + 0x0000000000000048:word64] = rax_155
	return (uint64) ebp_165
// DataOut: al fs r10 r11 r13 r14 r15 r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:(uint64) eax xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> xmm0:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B815:
	Mem171[rdi + 0x0000000000000048:word64] = rax_155
	word64 rsi_172
	word64 rax_173 = fn000000000040AE40(rax_155, 0x00000001, rbp_164, fp - 0x0000000000000068, rdi, out rsi_172)
	branch (byte) rax_173 == 0x00 l000000000040B8EA
// DataOut: ebp fs r10 r11 r13 r14 r15 r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:(uint64) eax xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> xmm0:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0068(64)

l000000000040B836:
	word64 rsi_196
	branch (byte) fn000000000040AE40(rax_173, 0x00000000, rbp_164, fp - 0x0000000000000068, rdi, out rsi_196) == 0x00 l000000000040B8EA
// DataOut: ebp fs r10 r11 r13 r14 r15 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:(uint64) eax xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> xmm0:<invalid> esi:<invalid> rcx:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0068(64)

l000000000040B8EA:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:(uint64) eax xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> xmm0:<invalid> esi:<invalid> rcx:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B84B:
	free(rax_129)
	return (uint64) ebp_165
// DataOut: al fs r10 r11 r13 r14 r15 r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:(uint64) eax xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> xmm0:<invalid> esi:<invalid> rcx:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040B710_exit:
// DataOut: al r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rbp:rbp xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:r12 rax:(uint64) ebp xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word32 fn000000000040B8F0(word64 rax, word64 rdx, word64 rsi, word64 rdi, word64 r8, word64 r11, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rax rdi rdx rsi
// LiveOut: eax r10 r8 r9 rsi
// Trashed: SCZOP ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r10 r10b r10d r10w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil xmm0 xmm1 xmm2 xmm3 ymm0 ymm1 ymm2 ymm3
// Preserved: r12 rbp rbx rsp
fn000000000040B8F0_entry:
	*r8Out = r8
// DataOut: fs r11 r13 r14 r15 r8 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(64)

l000000000040B8F0:
	branch rsi == 0x0000000000000000 l000000000040BA67
// DataOut: fs r11 r13 r14 r15 r8 rax rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(64)

l000000000040B904:
	word32 eax_131
	word64 rsi_71
	word64 r9_72
	word64 r10_73
	word64 rax_74 = fn000000000040ACB0(rax, 0x00000000, rsi, rdi, r8, r11, out rsi_71, out r9_72, out r10_73)
	branch rax_74 == 0x0000000000000000 l000000000040B938
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B938:
	word128 xmm0_171
	word64 rax_165 = Mem0[rdi + 0x0000000000000018:word64]
	word32 eax_166 = (word32) rax_165
	branch rax_165 < 0x0000000000000000 l000000000040BA70
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA70:
	real32 v27_415 = (real32) (rax_165 >>u 0x0000000000000001 | (uint64) (eax_166 & 0x00000001))
	xmm0_171 = DPB(xmm0, v27_415 + DPB(xmm0, v27_415, 0), 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rax:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B945:
	xmm0_171 = DPB(xmm0, (real32) rax_165, 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rax:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B94A:
	word128 xmm1_179
	word64 rax_172 = Mem0[rdi + 0x0000000000000010:word64]
	word32 eax_173 = (word32) rax_172
	word64 rdx_175 = Mem0[rdi + 0x0000000000000028:word64]
	branch rax_172 < 0x0000000000000000 l000000000040BA90
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA90:
	real32 v46_403 = (real32) (rax_172 >>u 0x0000000000000001 | (uint64) (eax_173 & 0x00000001))
	xmm1_179 = DPB(xmm1, v46_403 + DPB(xmm1, v46_403, 0), 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B95B:
	xmm1_179 = DPB(xmm1, (real32) rax_172, 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B960:
	branch (real32) xmm0_171 >u DPB(xmm1_179, (real32) xmm1_179 * Mem0[rdx_175 + 0x0000000000000008:real32], 0) l000000000040B9C8
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B9C8:
	word128 xmm0_297
	fn000000000040ADB0(rdi + 0x0000000000000028, r8)
	word64 rax_289 = Mem0[rdi + 0x0000000000000010:word64]
	word64 rdx_292 = Mem0[rdi + 0x0000000000000028:word64]
	word32 eax_290 = (word32) rax_289
	word128 xmm2_296 = DPB(xmm2, Mem0[rdx_292 + 0x0000000000000008:real32], 0)
	branch rax_289 < 0x0000000000000000 l000000000040BAE7
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BAE7:
	real32 v44_391 = (real32) (rax_289 >>u 0x0000000000000001 | (uint64) (eax_290 & 0x00000001))
	xmm0_297 = DPB(xmm0_171, v44_391 + DPB(xmm0_171, v44_391, 0), 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B9E7:
	xmm0_297 = DPB(xmm0_171, (real32) rax_289, 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B9EC:
	word128 xmm1_305
	word64 rax_299 = Mem0[rdi + 0x0000000000000018:word64]
	word32 eax_300 = (word32) rax_299
	branch rax_299 < 0x0000000000000000 l000000000040BB01
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BB01:
	real32 v41_379 = (real32) (rax_299 >>u 0x0000000000000001 | (uint64) (eax_300 & 0x00000001))
	xmm1_305 = DPB(xmm1_179, v41_379 + DPB(xmm1_179, v41_379, 0), 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B9F9:
	xmm1_305 = DPB(xmm1_179, (real32) rax_299, 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B9FE:
	branch (real32) xmm1_305 <=u DPB(xmm2, Mem0[rdx_292 + 0x0000000000000008:real32] * xmm0_297, 0) l000000000040B96A
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA0E:
	real32 v37_319 = (real32) xmm0_297 * Mem0[rdx_292 + 0x000000000000000C:real32]
	word128 xmm0_320 = DPB(xmm0_297, v37_319, 0)
	branch Mem0[rdx_292 + 0x0000000000000010:byte] != 0x00 l000000000040BA1D
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA19:
	xmm0_320 = DPB(xmm0_297, v37_319 * xmm2_296, 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA1D:
	branch (real32) xmm0_320 >=u Mem0[0x0000000000415F08:real32] l000000000040BB2E
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA2A:
	word64 rsi_332
	branch (real32) xmm0_320 >=u Mem0[0x0000000000415F0C:real32] l000000000040BAC8
// DataOut: fs r10 r11 r13 r14 r15 rbp rbx xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BAC8:
	rsi_332 = DPB(rsi_71, (real32) xmm0_320 - Mem0[0x0000000000415F0C:real32], 0) ^ 0x0000000000000000
// DataOut: esi fs r10 r11 r13 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA37:
	rsi_332 = DPB(rsi_71, (int32) xmm0_320, 0) (alias)
// DataOut: esi fs r10 r11 r13 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA3C:
	word64 rsi_334
	word64 r8_335
	word64 r9_336
	word64 rax_337 = fn000000000040B710(rsi_332, rdi, r11, out rsi_334, out r8_335, out r9_336)
	branch (byte) rax_337 == 0x00 l000000000040BB2E
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA4C:
	word64 rsi_351
	word64 r9_352
	word64 r10_353
	branch fn000000000040ACB0(rax_337, 0x00000000, rsi, rdi, r8_335, r11, out rsi_351, out r9_352, out r10_353) == 0x0000000000000000 l000000000040B96A
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA67:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:<invalid> r8:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B96A:
	branch Mem0[qwLoc20:word64] == 0x0000000000000000 l000000000040BAB0
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BAB0:
	Mem278[qwLoc20:word64] = rsi
	Mem283[rdi + 0x0000000000000020:word64] = Mem278[rdi + 0x0000000000000020:word64] + 0x0000000000000001
	Mem285[rdi + 0x0000000000000018:word64] = Mem283[rdi + 0x0000000000000018:word64] + 0x0000000000000001
	eax_131 = 0x00000001 (alias)
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B97A:
	word64 rax_241 = Mem0[rdi + 0x0000000000000048:word64]
	branch rax_241 == 0x0000000000000000 l000000000040BB1B
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BB1B:
	rax_241 = malloc(0x0000000000000010)
	branch rax_241 != 0x0000000000000000 l000000000040B98F
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BB2E:
	eax_131 = 0xFFFFFFFF (alias)
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> rsi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B987:
	Mem270[rdi + 0x0000000000000048:word64] = Mem0[rax_241 + 0x0000000000000008:word64]
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B98F:
	word64 rdx_252 = Mem0[qwLoc20 + 0x0000000000000008:word64]
	Mem253[rax_241:word64] = rsi
	Mem254[rax_241 + 0x0000000000000008:word64] = rdx_252
	Mem255[qwLoc20 + 0x0000000000000008:word64] = rax_241
	Mem260[rdi + 0x0000000000000020:word64] = Mem255[rdi + 0x0000000000000020:word64] + 0x0000000000000001
	return 0x00000001
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> rsi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B91B:
	branch rdx == 0x0000000000000000 l000000000040B9B8
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B9B8:
	return 0x00000000
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B924:
	Mem146[rdx:word64] = rax_74
	eax_131 = 0x00000000 (alias)
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B92A:
	return eax_131
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040B8F0_exit:
// DataOut: eax r10 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp r12:r12 rdx:<invalid> rcx:<invalid> rbx:rbx rax:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040BB50(word64 rax, word64 rsi, word64 rdi, word64 r8, word64 r11, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rax rdi rsi
// LiveOut: eax r10 r8 r9 rax rsi
// Trashed: SCZOP ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r10 r10b r10d r10w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil xmm0 xmm1 xmm2 xmm3 ymm0 ymm1 ymm2 ymm3
// Preserved: rbx rsp
fn000000000040BB50_entry:
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(64)

l000000000040BB50:
	word64 rax_25
	word64 rsi_14
	word64 r8_15
	word64 r9_16
	word64 r10_17
	word32 eax_18 = fn000000000040B8F0(rax, fp - 0x0000000000000010, rsi, rdi, r8, r11, out rsi_14, out r8_15, out r9_16, out r10_17)
	branch eax_18 == 0xFFFFFFFF l000000000040BB80
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(32) Local -0010(64)

l000000000040BB80:
	rax_25 = 0x0000000000000000
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rsi rdx:<invalid> rcx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -8(fp):rbx
// LocalsOut: fp(64) Local -0008(32)

l000000000040BB67:
	rax_25 = rsi
	branch eax_18 != 0x00000000 l000000000040BB72
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rsi rdx:<invalid> rcx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -8(fp):rbx
// LocalsOut: fp(64) Local -0008(32) Local -0010(64)

l000000000040BB6C_1:
	rax_25 = qwLoc10
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rsi rdx:<invalid> rax:rsi rcx:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -8(fp):rbx
// LocalsOut: fp(64) Local -0008(32)

l000000000040BB72:
	return rax_25
// DataOut: eax ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rsi rdx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -8(fp):rbx

fn000000000040BB50_exit:
// DataOut: eax r10 r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rdx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -8(fp):rbx



word64 fn000000000040BB90(word64 rax, word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r15, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r15 r8 rax rdi rsi
// LiveOut: r10 r8 r9 rax rsi
// Trashed: SCZOP ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r10 r10b r10d r10w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil xmm0 xmm1 xmm2 xmm3 ymm0 ymm1 ymm2 ymm3
// Preserved: r12 rbp rbx rsp
fn000000000040BB90_entry:
	*r8Out = r8
// DataOut: fs r11 r13 r15 r8 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(64)

l000000000040BB90:
	word64 rsi_22
	word64 r9_23
	word64 r10_24
	word64 rax_215 = fn000000000040ACB0(rax, 0x00000001, rsi, rdi, r8, r11, out rsi_22, out r9_23, out r10_24)
	branch rax_215 == 0x0000000000000000 l000000000040BD08
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(64)

l000000000040BD08:
	rax_215 = 0x0000000000000000
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:fp - 0x0000000000000020 rbp:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BBB6:
	Mem97[rdi + 0x0000000000000020:word64] = Mem0[rdi + 0x0000000000000020:word64] - 0x0000000000000001
	branch Mem97[qwLoc20:word64] == 0x0000000000000000 l000000000040BBD0
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:fp - 0x0000000000000020 rbp:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BBD0:
	word128 xmm0_118
	word64 rax_110 = Mem97[rdi + 0x0000000000000018:word64]
	Mem117[rdi + 0x0000000000000018:word64] = rax_110 - 0x0000000000000001
	word32 eax_112 = (word32) (rax_110 - 0x0000000000000001)
	branch rax_110 < 0x0000000000000001 l000000000040BCE8
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BCE8:
	real32 v26_298 = (real32) (rax_110 - 0x0000000000000001 >>u 0x0000000000000001 | (uint64) (eax_112 & 0x00000001))
	xmm0_118 = DPB(xmm0, v26_298 + DPB(xmm0, v26_298, 0), 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BBE5:
	xmm0_118 = DPB(xmm0, (real32) (rax_110 - 0x0000000000000001), 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BBEA:
	word128 xmm1_129
	word64 rax_119 = Mem117[rdi + 0x0000000000000010:word64]
	word32 eax_120 = (word32) rax_119
	word64 rdx_122 = Mem117[rdi + 0x0000000000000028:word64]
	branch rax_119 < 0x0000000000000000 l000000000040BCC8
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rbp rbx rdx rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BCC8:
	real32 v34_286 = (real32) (rax_119 >>u 0x0000000000000001 | (uint64) (eax_120 & 0x00000001))
	xmm1_129 = DPB(xmm1, v34_286 + DPB(xmm1, v34_286, 0), 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BBFB:
	xmm1_129 = DPB(xmm1, (real32) rax_119, 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC00:
	branch (real32) xmm1_129 * Mem117[rdx_122:real32] >u xmm0_118 l000000000040BC18
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC18:
	word128 xmm0_176
	fn000000000040ADB0(rdi + 0x0000000000000028, r8)
	word64 rdx_166 = Mem117[rdi + 0x0000000000000010:word64]
	word32 edx_167 = (word32) rdx_166
	word64 rax_169 = Mem117[rdi + 0x0000000000000028:word64]
	branch rdx_166 < 0x0000000000000000 l000000000040BD2F
// DataOut: edx fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BD2F:
	real32 v37_274 = (real32) (rdx_166 >>u 0x0000000000000001 | (uint64) (edx_167 & 0x00000001))
	xmm0_176 = DPB(xmm0_118, v37_274 + DPB(xmm0_118, v37_274, 0), 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC32:
	xmm0_176 = DPB(xmm0_118, (real32) rdx_166, 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC37:
	word128 xmm1_184
	word64 rdx_177 = Mem117[rdi + 0x0000000000000018:word64]
	word32 edx_178 = (word32) rdx_177
	branch rdx_177 < 0x0000000000000000 l000000000040BD49
// DataOut: edx fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BD49:
	real32 v39_262 = (real32) (rdx_177 >>u 0x0000000000000001 | (uint64) (edx_178 & 0x00000001))
	xmm1_184 = DPB(xmm1_129, v39_262 + DPB(xmm1_129, v39_262, 0), 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC44:
	xmm1_184 = DPB(xmm1_129, (real32) rdx_177, 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC49:
	branch Mem117[rax_169:real32] * xmm0_176 <=u xmm1_184 l000000000040BC09
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC56:
	real32 v32_197 = (real32) xmm0_176 * Mem117[rax_169 + 0x0000000000000004:real32]
	word128 xmm0_198 = DPB(xmm0_176, v32_197, 0)
	branch Mem117[rax_169 + 0x0000000000000010:byte] != 0x00 l000000000040BC66
// DataOut: fs r10 r11 r13 r15 rax rbp rbx xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC61:
	xmm0_198 = DPB(xmm0_176, v32_197 * Mem117[rax_169 + 0x0000000000000008:real32], 0)
// DataOut: fs r10 r11 r13 r15 rbp rbx xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC66:
	word64 rsi_206
	branch (real32) xmm0_198 >=u Mem117[0x0000000000415F0C:real32] l000000000040BD10
// DataOut: fs r10 r11 r13 r15 rbp rbx xmm0
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BD10:
	rsi_206 = DPB(rsi_22, (real32) xmm0_198 - Mem117[0x0000000000415F0C:real32], 0) ^ 0x0000000000000000
// DataOut: esi fs r10 r11 r13 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC73:
	rsi_206 = DPB(rsi_22, (int32) xmm0_198, 0) (alias)
// DataOut: esi fs r10 r11 r13 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC78:
	word64 rsi_208
	word64 r8_209
	word64 r9_210
	branch (byte) (uint64) (word32) fn000000000040B710(rsi_206, rdi, r11, out rsi_208, out r8_209, out r9_210) != 0x00 l000000000040BBC6
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC8D:
	word64 rdi_221 = Mem117[rdi + 0x0000000000000048:word64]
	branch rdi_221 != 0x0000000000000000 l000000000040BCA3
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BCA3:
	word64 r12_236 = Mem117[r15 + 0x0000000000000008:word64]
	free(rdi_221)
	branch r12_236 != 0x0000000000000000 l000000000040BCA0
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r12:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BCA0:
	rdi_221 = r12_236
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r12:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC96:
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BCB1:
	Mem230[rdi + 0x0000000000000048:word64] = 0x0000000000000000
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r12:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC09:
	return rax_215
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040BBC6:
	return rax_215
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> r12:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040BB90_exit:
// DataOut: r10 r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rbx:rbx rdx:<invalid> rbp:rbp rax:<invalid> r12:r12 rsi:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040BD70(word64 rcx, word32 edx, word64 rbp, word64 rsi, word64 rdi, word64 r8, selector fs, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r15dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs r8 rbp rcx rdi rsi
// LiveOut: r10 r11 r15d r8 r9 rax
// Trashed: SCZOP ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsi rsp
fn000000000040BD70_entry:
	def fp
	def r15
	def edx
	def r14
	def rsi
	def r13
	def r12
	def rdi
	def rbp
	def rbx
	def rcx
	def r8
	def fs
	def Mem0
	def bLocC8
	def r8Out
	def r9Out
	def r10Out
	def r11Out
	def r15dOut
	def dwLoc8C
	def qwLocA8
	def qwLocB0
	def r9
	def r9d
	def rLoc4
	def tLocF0
	def P
	def wLoc82
	def wLoc84
	def dl
	def rLocA8
	def rLoc3
	def rLoc2
	def qwLoc80
	def rLoc1
	def rLocE8
	def sil
	def r10
	def r10d
	def r10b
	def esi
	def ecx
	def cl
	def rdx_rax
	def edx_eax
	def ah
	def ax
	def al
// DataOut: edx fs r10 r15d r8 r9 rbp rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -00F0(0)

l000000000040BD70:
	rsp_1 = fp
	rsp_2 = fp - 0x0000000000000008
	qwLoc08_4 = r15
	rax_6 = (uint64) edx
	eax_7 = (word32) rax_6 (alias)
	rax_8 = (uint64) (eax_7 & 0x00000003)
	eax_9 = (word32) rax_8 (alias)
	rsp_10 = fp - 0x0000000000000010
	qwLoc10_12 = r14
	r14_14 = rsi
	r14d_15 = (word32) r14_14 (alias)
	rsp_16 = fp - 0x0000000000000018
	qwLoc18_18 = r13
	rsp_19 = fp - 0x0000000000000020
	qwLoc20_21 = r12
	r12_23 = rdi
	r12d_24 = (word32) r12_23 (alias)
	rsp_25 = fp - 0x0000000000000028
	qwLoc28_27 = rbp
	rsp_28 = fp - 0x0000000000000030
	qwLoc30_30 = rbx
	rbx_32 = rcx
	ebx_33 = (word32) rbx_32 (alias)
	rsp_34 = fp - 0x00000000000000E8
	dwLocB0_35 = eax_9
	rax_36 = (uint64) edx
	eax_37 = (word32) rax_36 (alias)
	qwLocB8_38 = rsi
	rax_39 = (uint64) (eax_37 & 0x00000020)
	eax_40 = (word32) rax_39 (alias)
	dwLocC8_41 = edx
	qwLocC0_43 = r8
	rcx_46 = Mem0[fs:0x00000028:word64]
	qwLoc40_47 = rcx_46
	rcx_48 = 0x0000000000000000
	SCZO_49 = cond(eax_40 - 0x00000001)
	C_50 = (bool) SCZO_49 (alias)
	dwLoc90_51 = eax_40
	rax_52 = (uint64) (0x00000000 - C_50)
	eax_53 = (word32) rax_52 (alias)
	dwLocC4_54 = eax_53
	v21_55 = dwLocC4_54 & 0xFFFFFFE8
	dwLocC4_56 = v21_55
	SZO_57 = cond(dwLocC4_56)
	v22_58 = dwLocC4_56 + 0x00000400
	dwLocC4_59 = v22_58
	rax_60 = localeconv()
	r15_61 = Mem0[r8:word64]
	r15d_62 = (word32) r15_61 (alias)
	r13_63 = rax_60
	rdi_64 = r15_61
	eax_65 = strlen(rdi_64)
	rax_66 = DPB(rax_60, eax_65, 0) (alias)
	rbp_67 = Mem0[rbp + 0x0000000000000010:word64]
	r11_68 = rax_66
	r13_69 = Mem0[r13_63 + 0x0000000000000008:word64]
	rax_70 = rax_66 - 0x0000000000000001
	rdx_71 = 0x0000000000000001
	SCZO_72 = cond(rax_70 - 0x0000000000000010)
	C_73 = (bool) SCZO_72 (alias)
	SZO_74 = SCZO_72 (alias)
	Z_75 = (bool) SCZO_72 (alias)
	CZ_76 = SCZO_72 (alias)
	S_77 = (bool) SCZO_72 (alias)
	CZP_78 = SCZO_72 (alias)
	O_79 = (bool) SCZO_72 (alias)
	rdi_80 = r13_69
	edi_81 = (word32) rdi_80 (alias)
	dil_82 = (byte) rdi_80 (alias)
	rax_83 = 0x0000000000413990
	branch rax_70 <u 0x0000000000000010 l000000000040BE0A
// DataOut: bx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi
// DataOut (flags): C
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C8(32) Local -00F0(0)

l000000000040BE06_1:
	r11_1721 = 0x0000000000000001
// DataOut: bx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00413990 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C8(32) Local -00F0(0)

l000000000040BE0A:
	r11_84 = PHI(r11_68, r11_1721)
	branch rax_70 <u 0x0000000000000010 l000000000040BE0E
// DataOut: bx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00413990 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C8(32) Local -00F0(0)

l000000000040BE0A_1:
	r15_1719 = 0x0000000000413990
	r15d_1720 = (word32) r15_1719 (alias)
// DataOut: bx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00413990 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C8(32) Local -00F0(0)

l000000000040BE0E:
	r15_85 = PHI(r15_61, r15_1719)
	r15d_86 = PHI(r15d_62, r15d_1720)
	qwLoc98_87 = r11_84
	eax_88 = strlen(rdi_80)
	rax_89 = DPB(rax_83, eax_88, 0) (alias)
	SCZO_90 = cond(rax_89 - 0x0000000000000011)
	C_91 = (bool) SCZO_90 (alias)
	rax_92 = 0x0000000000416919
	r11_93 = qwLoc98_87
	branch rax_89 <u 0x0000000000000011 l000000000040BE2A
// DataOut: bx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00413990 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C8(32) Local -00F0(0)

l000000000040BE26_1:
	r13_1718 = 0x0000000000416919
// DataOut: bx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:0x0000000000416919 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00416919 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C8(32) Local -00F0(0)

l000000000040BE2A:
	r13_94 = PHI(r13_69, r13_1718)
	rax_95 = r14_14
	r8_96 = r8 + 648
	SCZO_97 = cond(qwLocC0_43 - rbx_32)
	CZ_98 = SCZO_97 (alias)
	qwLocD0_99 = rax_95
	branch qwLocC0_43 >u rbx_32 l000000000040C0E0
// DataOut: bx fs r10 r11 r12 r12d r13 r15 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:0x0000000000416919 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00416919 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64) Local -00F0(0)

l000000000040C0E0:
	SZO_1648 = cond(rbx_32 & rbx_32)
	Z_1649 = (bool) SZO_1648 (alias)
	C_1650 = false
	branch Test(EQ,Z_1649) l000000000040BE59
// DataOut: bx fs r10 r11 r12 r12d r13 r15 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:rsi r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64) Local -00F0(0)

l000000000040C0E9:
	rax_1658 = qwLocC0_43
	rdx_1659 = 0x0000000000000000
	rdx_rax_1660 = SEQ(rdx_1659, rax_1658) (alias)
	v34_1661 = rdx_rax_1660
	rdx_1662 = (uint64) (v34_1661 % rbx_32)
	rax_1663 = (uint64) (v34_1661 /u rbx_32)
	SZO_1664 = cond(rdx_1662 & rdx_1662)
	Z_1665 = (bool) SZO_1664 (alias)
	C_1666 = false
	rsi_1667 = rax_1663
	sil_1668 = (byte) rsi_1667 (alias)
	esi_1669 = (word32) rsi_1667 (alias)
	branch Test(NE,Z_1665) l000000000040BE59
// DataOut: bx fs r10 r11 r12 r12d r13 r15 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:rsi r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64) Local -00F0(0)

l000000000040C0FF:
	rdx_1670 = 0x0000000000000000
	rax_1671 = r12_23
	rdx_rax_1672 = SEQ(rdx_1670, rax_1671) (alias)
	v35_1673 = rdx_rax_1672
	rdx_1674 = (uint64) (v35_1673 % rsi_1667)
	rax_1675 = (uint64) (v35_1673 /u rsi_1667)
	rdi_1676 = rdx_1674 + rdx_1674 * 0x0000000000000004
	r10_1677 = rax_1675
	r10d_1678 = (word32) r10_1677 (alias)
	r10b_1679 = (byte) r10_1677 (alias)
	rdx_1680 = 0x0000000000000000
	rax_1681 = rdi_1676 + rdi_1676
	rdx_rax_1682 = SEQ(rdx_1680, rax_1681) (alias)
	v37_1683 = rdx_rax_1682
	rdx_1684 = (uint64) (v37_1683 % rsi_1667)
	rax_1685 = (uint64) (v37_1683 /u rsi_1667)
	eax_1686 = (word32) rax_1685 (alias)
	rdx_1687 = rdx_1684 + rdx_1684
	edx_1688 = (word32) rdx_1687 (alias)
	rdx_rax_1689 = SEQ(rdx_1687, rax_1685) (alias)
	edx_eax_1690 = rdx_1687 (alias)
	dl_1691 = (byte) rdx_1687 (alias)
	rdi_1692 = (uint64) eax_1686
	edi_1693 = (word32) rdi_1692 (alias)
	dil_1694 = (byte) rdi_1692 (alias)
	SCZO_1695 = cond(rsi_1667 - rdx_1687)
	C_1696 = (bool) SCZO_1695 (alias)
	SZO_1697 = SCZO_1695 (alias)
	Z_1698 = (bool) SCZO_1695 (alias)
	CZ_1699 = SCZO_1695 (alias)
	S_1700 = (bool) SCZO_1695 (alias)
	CZP_1701 = SCZO_1695 (alias)
	O_1702 = (bool) SCZO_1695 (alias)
	branch Test(ULE,CZ_1699) l000000000040C6E0
// DataOut: edi fs r10 r10b r10d r11 r13 r15 rbp rdx
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C6E0:
	rcx_1710 = (uint64) (0x00000000 - C_1696)
	ecx_1711 = (word32) rcx_1710 (alias)
	rcx_1712 = (uint64) ~ecx_1711
	ecx_1713 = (word32) rcx_1712 (alias)
	rcx_1714 = (uint64) (ecx_1713 + 0x00000003)
	ecx_1715 = (word32) rcx_1714 (alias)
	cl_1716 = (byte) rcx_1714 (alias)
	SCZO_1717 = cond(ecx_1715)
// DataOut: ecx edi fs r10 r10b r10d r11 r13 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:<invalid> r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C125:
	rcx_1703 = 0x0000000000000000
	SZO_1704 = cond(rdx_1687 & rdx_1687)
	Z_1705 = (bool) SZO_1704 (alias)
	C_1706 = false
	cl_1707 = Test(NE,Z_1705)
	rcx_1708 = DPB(rcx_1703, cl_1707, 0) (alias)
	ecx_1709 = DPB(ecx, cl_1707, 0) (alias)
// DataOut: ecx edi fs r10 r10b r10d r11 r13 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:<invalid> r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040BE43:
	rdx_1605 = 0x0000000000000000
	rax_1606 = rbx_32
	rdx_rax_1607 = SEQ(rdx_1605, rax_1606) (alias)
	v27_1608 = rdx_rax_1607
	rdx_1609 = (uint64) (v27_1608 % qwLocC0_43)
	rax_1610 = (uint64) (v27_1608 /u qwLocC0_43)
	eax_1611 = (word32) rax_1610 (alias)
	rdx_rax_1612 = SEQ(rdx_1609, rax_1610) (alias)
	edx_eax_1613 = rax_1610 (alias)
	ah_1614 = SLICE(rax_1610, byte, 8) (alias)
	ax_1615 = (word16) rax_1610 (alias)
	al_1616 = (byte) rax_1610 (alias)
	SZO_1617 = cond(rdx_1609 & rdx_1609)
	Z_1618 = (bool) SZO_1617 (alias)
	C_1619 = false
	rcx_1620 = rax_1610
	ecx_1621 = (word32) rcx_1620 (alias)
	cl_1622 = (byte) rcx_1620 (alias)
	branch Test(EQ,Z_1618) l000000000040C2F0
// DataOut: bx fs r10 r11 r12 r12d r13 r15 r9 rax rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:rsi r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64) Local -00F0(0)

l000000000040C2F0:
	r10_1628 = rax_1610
	rdx_1629 = 0x0000000000000000
	r10_1630 = r10_1628 *s r12_23
	r10d_1631 = (word32) r10_1630 (alias)
	r10b_1632 = (byte) r10_1630 (alias)
	rax_1633 = r10_1630
	rdx_rax_1634 = SEQ(rdx_1629, rax_1633) (alias)
	v72_1635 = rdx_rax_1634
	rdx_1636 = (uint64) (v72_1635 % rcx_1620)
	rax_1637 = (uint64) (v72_1635 /u rcx_1620)
	SCZO_1638 = cond(rax_1637 - r12_23)
	Z_1639 = (bool) SCZO_1638 (alias)
	branch Test(NE,Z_1639) l000000000040BE59
// DataOut: bx fs r10 r10b r10d r11 r12 r12d r13 r15 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64) Local -00F0(0)

l000000000040C308:
	rcx_1640 = 0x0000000000000000
	ecx_1641 = (word32) rcx_1640 (alias)
	cl_1642 = (byte) rcx_1640 (alias)
	rdi_1643 = 0x0000000000000000
	edi_1644 = (word32) rdi_1643 (alias)
	dil_1645 = (byte) rdi_1643 (alias)
	SZO_1646 = cond(edi_1644)
	C_1647 = false
// DataOut: ecx edi fs r10 r10b r10d r11 r13 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C12D:
	sil_1161 = PHI(sil_1668, sil_1668, sil)
	dil_1162 = PHI(dil_1694, dil_1694, dil_1645)
	edi_1163 = PHI(edi_1693, edi_1693, edi_1644)
	r10_1164 = PHI(r10_1677, r10_1677, r10_1630)
	r10d_1165 = PHI(r10d_1678, r10d_1678, r10d_1631)
	r10b_1166 = PHI(r10b_1679, r10b_1679, r10b_1632)
	esi_1167 = PHI(esi_1669, esi_1669, esi)
	CZP_1168 = PHI(CZP_1701, CZP_1701, CZP_78)
	O_1169 = PHI(O_1702, O_1702, O_79)
	S_1170 = PHI(S_1700, S_1700, S_77)
	CZ_1171 = PHI(CZ_1699, CZ_1699, CZ_98)
	rsi_1172 = PHI(rsi_1667, rsi_1667, rsi)
	ecx_1173 = PHI(ecx_1709, ecx_1715, ecx_1641)
	rcx_1174 = PHI(rcx_1708, rcx_1714, rcx_1640)
	cl_1175 = PHI(cl_1707, cl_1716, cl_1642)
	rdx_1176 = PHI(rdx_1687, rdx_1687, rdx_1636)
	edx_1177 = PHI(edx_1688, edx_1688, edx)
	dl_1178 = PHI(dl_1691, dl_1691, dl)
	rdi_1179 = PHI(rdi_1692, rdi_1692, rdi_1643)
	rax_1180 = PHI(rax_1685, rax_1685, rax_1637)
	eax_1181 = PHI(eax_1686, eax_1686, eax_1611)
	rdx_rax_1182 = PHI(rdx_rax_1689, rdx_rax_1689, rdx_rax_1634)
	edx_eax_1183 = PHI(edx_eax_1690, edx_eax_1690, edx_eax_1613)
	ah_1184 = PHI(ah, ah, ah_1614)
	ax_1185 = PHI(ax, ax, ax_1615)
	al_1186 = PHI(al, al, al_1616)
	SCZO_1187 = PHI(SCZO_1695, SCZO_1717, SCZO_1638)
	r9_1188 = (uint64) dwLocC8_41
	r9d_1189 = (word32) r9_1188 (alias)
	r8_1190 = qwLocD0_99
	rbx_1191 = 0x00000000FFFFFFFF
	ebx_1192 = (word32) rbx_1191 (alias)
	r9_1193 = (uint64) (r9d_1189 & 0x00000010)
	r9d_1194 = (word32) r9_1193 (alias)
	SZO_1195 = cond(r9d_1194)
	Z_1196 = (bool) SZO_1195 (alias)
	C_1197 = false
	branch Test(EQ,Z_1196) l000000000040C530
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> cl:Test(NE,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C146:
	rsi_1381 = (uint64) dwLocC4_59
	sil_1382 = (byte) rsi_1381 (alias)
	esi_1383 = (word32) rsi_1381 (alias)
	SCZO_1384 = cond(r10_1164 - rsi_1381)
	C_1385 = (bool) SCZO_1384 (alias)
	branch Test(ULT,C_1385) l000000000040C710
// DataOut: ecx edi fs r10 r10b r10d r11 r13 r15 r9 r9d rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:0x00000000FFFFFFFF rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:rsi r10:<invalid> r9:<invalid> rsi:<invalid> cl:Test(NE,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C710:
	r8_1600 = qwLocD0_99
	rbx_1601 = 0x0000000000000000
	ebx_1602 = (word32) rbx_1601 (alias)
	SZO_1603 = cond(ebx_1602)
	C_1604 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:0x00000000FFFFFFFF rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:rsi r10:<invalid> r9:<invalid> rsi:<invalid> cl:Test(NE,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C153:
	rbx_1386 = 0x0000000000000000
	ebx_1387 = (word32) rbx_1386 (alias)
	SZO_1388 = cond(ebx_1387)
	C_1389 = false
	r12_1390 = (uint64) dwLocC4_59
	r12d_1391 = (word32) r12_1390 (alias)
// DataOut: ebx ecx edi fs r10 r11 r12d r13 r15 r9 r9d rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:0x00000000FFFFFFFF rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:rsi r10:<invalid> r9:<invalid> rsi:<invalid> cl:Test(NE,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C17D:
	r10_1392 = PHI(r10_1164, r10_1411)
	ebx_1393 = PHI(ebx_1387, ebx_1445)
	ecx_1394 = PHI(ecx_1173, ecx_1438)
	edx_1395 = PHI(edx_1177, edx_1420)
	rdi_1396 = PHI(rdi_1179, rdi_1430)
	SZO_1397 = PHI(SZO_1388, SZO_1441)
	Z_1398 = PHI(Z_1196, Z_1453)
	C_1399 = PHI(C_1389, C_1443)
	rbx_1400 = PHI(rbx_1386, rbx_1444)
	rax_1401 = r10_1392
	rdx_1402 = 0x0000000000000000
	rdx_rax_1403 = SEQ(rdx_1402, rax_1401) (alias)
	v48_1404 = rdx_rax_1403
	rdx_1405 = (uint64) (v48_1404 % rsi_1381)
	rax_1406 = (uint64) (v48_1404 /u rsi_1381)
	r8_1407 = rax_1406
	eax_1408 = rdx_1405 + rdx_1405 * 0x0000000000000004
	rax_1409 = DPB(rax_1406, eax_1408, 0) (alias)
	rdx_1410 = 0x0000000000000000
	r10_1411 = r8_1407
	r10d_1412 = (word32) r10_1411 (alias)
	r10b_1413 = (byte) r10_1411 (alias)
	eax_1414 = rdi_1396 + rax_1409 * 0x0000000000000002
	edx_eax_1415 = SEQ(edx_1395, eax_1414) (alias)
	rdi_1416 = (uint64) ecx_1394
	edi_1417 = (word32) rdi_1416 (alias)
	rdi_1418 = (uint64) (edi_1417 >> 0x00000001)
	v50_1419 = edx_eax_1415
	edx_1420 = (uint32) (v50_1419 % r12d_1391)
	rdx_1421 = DPB(rdx_1410, edx_1420, 0) (alias)
	eax_1422 = (uint32) (v50_1419 /u r12d_1391)
	rax_1423 = DPB(rax_1409, eax_1422, 0) (alias)
	rdx_rax_1424 = DPB(rdx_rax_1403, eax_1422, 0) (alias)
	edx_eax_1425 = SEQ(edx_1420, eax_1422) (alias)
	ah_1426 = SLICE(eax_1422, byte, 8) (alias)
	ax_1427 = (word16) eax_1422 (alias)
	al_1428 = (byte) eax_1422 (alias)
	r14d_1429 = rdi_1418 + rdx_1421 * 0x0000000000000002
	rdi_1430 = (uint64) eax_1422
	edi_1431 = (word32) rdi_1430 (alias)
	dil_1432 = (byte) rdi_1430 (alias)
	rcx_1433 = (uint64) (ecx_1394 + r14d_1429)
	ecx_1434 = (word32) rcx_1433 (alias)
	cl_1435 = (byte) rcx_1433 (alias)
	SCZO_1436 = cond(r12d_1391 - r14d_1429)
	CZ_1437 = SCZO_1436 (alias)
	branch Test(UGT,CZ_1437) l000000000040C160
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r12d r13 r15 r8 r9 r9d rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C160:
	SZO_1593 = cond(ecx_1434 & ecx_1434)
	Z_1594 = (bool) SZO_1593 (alias)
	C_1595 = false
	cl_1596 = Test(NE,Z_1594)
	ecx_1597 = (word32) cl_1596
	rcx_1598 = DPB(rcx_1433, ecx_1597, 0) (alias)
	cl_1599 = (byte) ecx_1597 (alias)
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r12d r13 r15 r8 r9 r9d rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C1A8:
	SCZO_1583 = cond(r12d_1391 - ecx_1434)
	C_1584 = (bool) SCZO_1583 (alias)
	rcx_1585 = (uint64) (0x00000000 - C_1584)
	ecx_1586 = (word32) rcx_1585 (alias)
	rcx_1587 = (uint64) ~ecx_1586
	ecx_1588 = (word32) rcx_1587 (alias)
	rcx_1589 = (uint64) (ecx_1588 + 0x00000003)
	ecx_1590 = (word32) rcx_1589 (alias)
	cl_1591 = (byte) rcx_1589 (alias)
	SCZO_1592 = cond(ecx_1590)
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r12d r13 r15 r8 r9 r9d rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C168:
	ecx_1438 = PHI(ecx_1590, ecx_1597)
	rcx_1439 = PHI(rcx_1589, rcx_1598)
	cl_1440 = PHI(cl_1591, cl_1599)
	SZO_1441 = PHI(SZO_1397, SZO_1593)
	Z_1442 = PHI(Z_1398, Z_1594)
	C_1443 = PHI(C_1584, C_1595)
	rbx_1444 = (uint64) (ebx_1393 + 0x00000001)
	ebx_1445 = (word32) rbx_1444 (alias)
	SCZO_1446 = cond(rsi_1381 - r8_1407)
	CZ_1447 = SCZO_1446 (alias)
	branch Test(UGT,CZ_1447) l000000000040C49F
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r12d r13 r15 r8 r9 r9d rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C49F:
	SCZO_1454 = cond(r8_1407 - 0x0000000000000009)
	CZ_1455 = SCZO_1454 (alias)
	branch Test(UGT,CZ_1455) l000000000040C768
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C4A9:
	SCZO_1456 = cond(dwLocB0_35 - 0x00000001)
	Z_1457 = (bool) SCZO_1456 (alias)
	branch Test(EQ,Z_1457) l000000000040C7B0
// DataOut: dil eax ebx ecx fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C7B0:
	rdx_1570 = (uint64) eax_1422
	edx_1571 = (word32) rdx_1570 (alias)
	rdx_1572 = (uint64) (edx_1571 & 0x00000001)
	edx_1573 = (word32) rdx_1572 (alias)
	rdx_1574 = (uint64) (edx_1573 + ecx_1438)
	edx_1575 = (word32) rdx_1574 (alias)
	SCZO_1576 = cond(edx_1575 - 0x00000002)
	SZO_1577 = SCZO_1576 (alias)
	dl_1578 = Test(GT,SZO_1577)
	edx_1579 = DPB(edx_1575, dl_1578, 0) (alias)
	rdx_1580 = DPB(rdx_1574, dl_1578, 0) (alias)
	rdx_rax_1581 = DPB(rdx_rax_1424, dl_1578, 64) (alias)
	edx_eax_1582 = DPB(edx_eax_1425, dl_1578, 32) (alias)
// DataOut: dil dl eax ebx ecx fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C4B4:
	r12_1554 = (uint64) dwLocB0_35
	r12d_1555 = (word32) r12_1554 (alias)
	SZO_1556 = cond(ecx_1438 & ecx_1438)
	dl_1557 = Test(GT,SZO_1556)
	edx_1558 = DPB(edx_1420, dl_1557, 0) (alias)
	SZO_1559 = cond(r12d_1555 & r12d_1555)
	Z_1560 = (bool) SZO_1559 (alias)
	sil_1561 = Test(EQ,Z_1560)
	esi_1562 = DPB(esi_1383, sil_1561, 0) (alias)
	rdx_1563 = (uint64) (edx_1558 & esi_1562)
	edx_1564 = (word32) rdx_1563 (alias)
	rdx_rax_1565 = SEQ(rdx_1563, rax_1423) (alias)
	edx_eax_1566 = rdx_1563 (alias)
	dl_1567 = (byte) rdx_1563 (alias)
	SZO_1568 = cond(edx_1564)
	C_1569 = false
// DataOut: dil dl eax ebx ecx fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C4C7:
	sil_1458 = PHI(sil_1561, sil_1382)
	esi_1459 = PHI(esi_1562, esi_1383)
	r12d_1460 = PHI(r12d_1555, r12d_1391)
	rdx_1461 = PHI(rdx_1563, rdx_1580)
	edx_1462 = PHI(edx_1564, edx_1579)
	dl_1463 = PHI(dl_1567, dl_1578)
	rdx_rax_1464 = PHI(rdx_rax_1565, rdx_rax_1581)
	edx_eax_1465 = PHI(edx_eax_1566, edx_eax_1582)
	SCZO_1466 = PHI(SCZO_1456, SCZO_1576)
	r12_1467 = PHI(r12_1554, r12_1390)
	SZO_1468 = cond(dl_1463 & dl_1463)
	Z_1469 = (bool) SZO_1468 (alias)
	C_1470 = false
	branch Test(EQ,Z_1469) l000000000040C788
// DataOut: dil eax ebx ecx fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C788:
	SZO_1551 = cond(eax_1422 & eax_1422)
	Z_1552 = (bool) SZO_1551 (alias)
	C_1553 = false
	branch Test(NE,Z_1552) l000000000040C4DB
// DataOut: dil ebx ecx fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C4CF:
	edi_1527 = rax_1423 + 0x0000000000000001
	rdi_1528 = DPB(rdi_1430, edi_1527, 0) (alias)
	dil_1529 = (byte) edi_1527 (alias)
	SCZO_1530 = cond(edi_1527 - 0x0000000A)
	Z_1531 = (bool) SCZO_1530 (alias)
	branch Test(EQ,Z_1531) l000000000040C7CE
// DataOut: dil ebx fs r10 r10d r11 r13 r15 r8 r9 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C7CE:
	r10_1532 = r8_1407 + 0x0000000000000001
	r10d_1533 = (word32) r10_1532 (alias)
	r10b_1534 = (byte) r10_1532 (alias)
	SCZO_1535 = cond(r10_1532 - 0x000000000000000A)
	Z_1536 = (bool) SCZO_1535 (alias)
	branch Test(NE,Z_1536) l000000000040C7FF
// DataOut: ebx fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C7FF:
	rcx_1546 = 0x0000000000000000
	ecx_1547 = (word32) rcx_1546 (alias)
	cl_1548 = (byte) rcx_1546 (alias)
	SZO_1549 = cond(0x00000000)
	C_1550 = false
// DataOut: ebx ecx fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C790:
	dil_1503 = PHI(dil_1529, dil_1432)
	edi_1504 = PHI(edi_1527, edi_1431)
	r10_1505 = PHI(r10_1532, r10_1411)
	r10d_1506 = PHI(r10d_1533, r10d_1412)
	r10b_1507 = PHI(r10b_1534, r10b_1413)
	ecx_1508 = PHI(ecx_1547, ecx_1438)
	rcx_1509 = PHI(rcx_1546, rcx_1439)
	cl_1510 = PHI(cl_1548, cl_1440)
	rdi_1511 = PHI(rdi_1528, rdi_1430)
	SCZO_1512 = PHI(SCZO_1535, SCZO_1466)
	SZO_1513 = cond(bLocC8 & 0x08)
	Z_1514 = (bool) SZO_1513 (alias)
	C_1515 = false
	branch Test(NE,Z_1514) l000000000040C7C2
// DataOut: ebx ecx fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C7C2:
	r8_1521 = qwLocD0_99
	rdi_1522 = 0x0000000000000000
	edi_1523 = (word32) rdi_1522 (alias)
	dil_1524 = (byte) rdi_1522 (alias)
	SZO_1525 = cond(0x00000000)
	C_1526 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C797:
	rdi_1516 = 0x0000000000000000
	edi_1517 = (word32) rdi_1516 (alias)
	dil_1518 = (byte) rdi_1516 (alias)
	SZO_1519 = cond(0x00000000)
	C_1520 = false
// DataOut: dil ebx fs r10 r10d r11 r13 r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C7D8:
	r8_1537 = qwLocD0_99
	rcx_1538 = 0x0000000000000000
	ecx_1539 = (word32) rcx_1538 (alias)
	cl_1540 = (byte) rcx_1538 (alias)
	rdi_1541 = 0x0000000000000000
	edi_1542 = (word32) rdi_1541 (alias)
	dil_1543 = (byte) rdi_1541 (alias)
	SZO_1544 = cond(0x00000000)
	C_1545 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C4DB:
	edi_1471 = PHI(edi_1527, edi_1431, edi_1517)
	r10_1472 = PHI(r10_1411, r10_1411, r10_1505)
	Z_1473 = PHI(Z_1531, Z_1552, Z_1514)
	SCZO_1474 = PHI(SCZO_1530, SCZO_1466, SCZO_1512)
	rax_1475 = qwLocB8_38
	rdi_1476 = (uint64) (edi_1471 + 0x00000030)
	dil_1477 = (byte) rdi_1476 (alias)
	rdx_1478 = r11_93
	rsi_1479 = r15_85
	dwLoc8C_1480 = r9d_1194
	qwLocA8_1481 = r10_1472
	qwLoc98_1482 = r11_93
	r8_1483 = r8_1407 + 0x0000000000000287
	Mem1484[rax_1475 + 0x0000000000000287:byte] = dil_1477
	r8_1485 = r8_1483 - r11_93
	rdi_1486 = r8_1485
	rax_1487 = memcpy(rdi_1486, rsi_1479, rdx_1478)
	r11_1488 = qwLoc98_1482
	r10_1489 = qwLocA8_1481
	r10d_1490 = (word32) r10_1489 (alias)
	r10b_1491 = (byte) r10_1489 (alias)
	r8_1492 = rax_1487
	r9_1493 = (uint64) dwLoc8C_1480
	r9d_1494 = (word32) r9_1493 (alias)
	rcx_1495 = 0x0000000000000000
	ecx_1496 = (word32) rcx_1495 (alias)
	cl_1497 = (byte) rcx_1495 (alias)
	rdi_1498 = 0x0000000000000000
	edi_1499 = (word32) rdi_1498 (alias)
	dil_1500 = (byte) rdi_1498 (alias)
	SZO_1501 = cond(0x00000000)
	C_1502 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C174:
	SCZO_1452 = cond(ebx_1445 - 0x00000008)
	Z_1453 = (bool) SCZO_1452 (alias)
	branch Test(EQ,Z_1453) l000000000040C768
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r12d r13 r15 r9 r9d rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C768:
	CZ_1448 = PHI(CZ_1447, CZ_1455)
	Z_1449 = PHI(Z_1453, Z_1442)
	SCZO_1450 = PHI(SCZO_1452, SCZO_1454)
	r8_1451 = qwLocD0_99
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C530:
	sil_1198 = PHI(sil_1382, sil_1382, sil_1458, sil_1458, sil_1458, sil_1161)
	dwLoc8C_1199 = PHI(dwLoc8C, dwLoc8C, dwLoc8C_1480, dwLoc8C, dwLoc8C, dwLoc8C)
	qwLocA8_1200 = PHI(qwLocA8, qwLocA8, qwLocA8_1481, qwLocA8, qwLocA8, qwLocA8)
	dil_1201 = PHI(dil_1162, dil_1432, dil_1500, dil_1543, dil_1524, dil_1162)
	edi_1202 = PHI(edi_1163, edi_1431, edi_1499, edi_1542, edi_1523, edi_1163)
	r10_1203 = PHI(r10_1164, r10_1411, r10_1489, r10_1532, r10_1505, r10_1164)
	r10d_1204 = PHI(r10d_1165, r10d_1412, r10d_1490, r10d_1533, r10d_1506, r10d_1165)
	r10b_1205 = PHI(r10b_1166, r10b_1413, r10b_1491, r10b_1534, r10b_1507, r10b_1166)
	esi_1206 = PHI(esi_1383, esi_1383, esi_1459, esi_1459, esi_1459, esi_1167)
	qwLoc98_1207 = PHI(qwLoc98_87, qwLoc98_87, qwLoc98_1482, qwLoc98_87, qwLoc98_87, qwLoc98_87)
	r11_1208 = PHI(r11_93, r11_93, r11_1488, r11_93, r11_93, r11_93)
	r8_1209 = PHI(r8_1600, r8_1451, r8_1492, r8_1537, r8_1521, r8_1190)
	r9_1210 = PHI(r9_1193, r9_1193, r9_1493, r9_1193, r9_1193, r9_1193)
	r9d_1211 = PHI(r9d_1194, r9d_1194, r9d_1494, r9d_1194, r9d_1194, r9d_1194)
	r12d_1212 = PHI(r12d_24, r12d_1391, r12d_1460, r12d_1460, r12d_1460, r12d_24)
	r14d_1213 = PHI(r14d_15, r14d_1429, r14d_1429, r14d_1429, r14d_1429, r14d_15)
	CZ_1214 = PHI(CZ_1171, CZ_1448, CZ_1455, CZ_1455, CZ_1455, CZ_1171)
	ebx_1215 = PHI(ebx_1602, ebx_1445, ebx_1445, ebx_1445, ebx_1445, ebx_1192)
	rsi_1216 = PHI(rsi_1381, rsi_1381, rsi_1479, rsi_1381, rsi_1381, rsi_1172)
	ecx_1217 = PHI(ecx_1173, ecx_1438, ecx_1496, ecx_1539, ecx_1508, ecx_1173)
	rcx_1218 = PHI(rcx_1174, rcx_1439, rcx_1495, rcx_1538, rcx_1509, rcx_1174)
	cl_1219 = PHI(cl_1175, cl_1440, cl_1497, cl_1540, cl_1510, cl_1175)
	rdx_1220 = PHI(rdx_1176, rdx_1421, rdx_1478, rdx_1461, rdx_1461, rdx_1176)
	edx_1221 = PHI(edx_1177, edx_1420, edx_1462, edx_1462, edx_1462, edx_1177)
	dl_1222 = PHI(dl_1178, dl_1178, dl_1463, dl_1463, dl_1463, dl_1178)
	rdi_1223 = PHI(rdi_1179, rdi_1430, rdi_1498, rdi_1541, rdi_1522, rdi_1179)
	SZO_1224 = PHI(SZO_1603, SZO_1441, SZO_1501, SZO_1544, SZO_1525, SZO_1195)
	C_1225 = PHI(C_1604, C_1443, C_1502, C_1545, C_1526, C_1197)
	rax_1226 = PHI(rax_1180, rax_1423, rax_1487, rax_1423, rax_1423, rax_1180)
	eax_1227 = PHI(eax_1181, eax_1422, eax_1422, eax_1422, eax_1422, eax_1181)
	rdx_rax_1228 = PHI(rdx_rax_1182, rdx_rax_1424, rdx_rax_1464, rdx_rax_1464, rdx_rax_1464, rdx_rax_1182)
	edx_eax_1229 = PHI(edx_eax_1183, edx_eax_1425, edx_eax_1465, edx_eax_1465, edx_eax_1465, edx_eax_1183)
	ah_1230 = PHI(ah_1184, ah_1426, ah_1426, ah_1426, ah_1426, ah_1184)
	ax_1231 = PHI(ax_1185, ax_1427, ax_1427, ax_1427, ax_1427, ax_1185)
	al_1232 = PHI(al_1186, al_1428, al_1428, al_1428, al_1428, al_1186)
	rbx_1233 = PHI(rbx_1601, rbx_1444, rbx_1444, rbx_1444, rbx_1444, rbx_1191)
	r12_1234 = PHI(r12_23, r12_1390, r12_1467, r12_1467, r12_1467, r12_23)
	SCZO_1235 = cond(dwLocB0_35 - 0x00000001)
	Z_1236 = (bool) SCZO_1235 (alias)
	branch Test(EQ,Z_1236) l000000000040C6F0
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C6F0:
	rax_1362 = r10_1203
	eax_1363 = (word32) rax_1362 (alias)
	rcx_1364 = (int64) ecx_1217
	rax_1365 = (uint64) (eax_1363 & 0x00000001)
	rax_1366 = rax_1365 + rcx_1364
	SCZO_1367 = cond(rax_1366)
	Z_1368 = (bool) SCZO_1367 (alias)
	al_1369 = Test(NE,Z_1368)
	eax_1370 = (word32) al_1369
	rdi_1371 = (uint64) (edi_1202 + eax_1370)
	edi_1372 = (word32) rdi_1371 (alias)
	SCZO_1373 = cond(edi_1372 - 0x00000005)
	SZO_1374 = SCZO_1373 (alias)
	al_1375 = Test(GT,SZO_1374)
	eax_1376 = DPB(eax_1370, al_1375, 0) (alias)
	rax_1377 = DPB(rax_1366, al_1375, 0) (alias)
	rdx_rax_1378 = DPB(rdx_rax_1228, al_1375, 0) (alias)
	edx_eax_1379 = DPB(edx_eax_1229, al_1375, 0) (alias)
	ax_1380 = DPB(ax_1231, al_1375, 0) (alias)
// DataOut: al ebx fs r10 r10b r11 r13 r15 r8 r9 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C53B:
	rsi_1341 = (uint64) dwLocB0_35
	esi_1342 = (word32) rsi_1341 (alias)
	rax_1343 = 0x0000000000000000
	eax_1344 = (word32) rax_1343 (alias)
	rdx_rax_1345 = SEQ(rdx_1220, rax_1343) (alias)
	edx_eax_1346 = rax_1343 (alias)
	ax_1347 = (word16) rax_1343 (alias)
	al_1348 = (byte) rax_1343 (alias)
	SZO_1349 = cond(esi_1342 & esi_1342)
	Z_1350 = (bool) SZO_1349 (alias)
	C_1351 = false
	branch Test(NE,Z_1350) l000000000040C54C
// DataOut: al ebx ecx edi fs r10 r10b r11 r13 r15 r8 r9 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C545:
	rcx_1352 = (uint64) (ecx_1217 + edi_1202)
	ecx_1353 = (word32) rcx_1352 (alias)
	SZO_1354 = cond(ecx_1353 & ecx_1353)
	C_1355 = false
	al_1356 = Test(GT,SZO_1354)
	eax_1357 = DPB(eax_1344, al_1356, 0) (alias)
	rax_1358 = DPB(rax_1343, al_1356, 0) (alias)
	rdx_rax_1359 = DPB(rdx_rax_1345, al_1356, 0) (alias)
	edx_eax_1360 = DPB(edx_eax_1346, al_1356, 0) (alias)
	ax_1361 = DPB(ax_1347, al_1356, 0) (alias)
// DataOut: al ebx fs r10 r10b r11 r13 r15 r8 r9 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C54C:
	edi_1237 = PHI(edi_1202, edi_1202, edi_1372)
	esi_1238 = PHI(esi_1342, esi_1342, esi_1206)
	rsi_1239 = PHI(rsi_1341, rsi_1341, rsi_1216)
	ecx_1240 = PHI(ecx_1217, ecx_1353, ecx_1217)
	rcx_1241 = PHI(rcx_1218, rcx_1352, rcx_1364)
	rdi_1242 = PHI(rdi_1223, rdi_1223, rdi_1371)
	rax_1243 = PHI(rax_1343, rax_1358, rax_1377)
	eax_1244 = PHI(eax_1344, eax_1357, eax_1376)
	rdx_rax_1245 = PHI(rdx_rax_1345, rdx_rax_1359, rdx_rax_1378)
	edx_eax_1246 = PHI(edx_eax_1346, edx_eax_1360, edx_eax_1379)
	ax_1247 = PHI(ax_1347, ax_1361, ax_1380)
	al_1248 = PHI(al_1348, al_1356, al_1375)
	SCZO_1249 = PHI(SCZO_1235, SCZO_1235, SCZO_1373)
	SZO_1250 = cond(al_1248 & al_1248)
	Z_1251 = (bool) SZO_1250 (alias)
	C_1252 = false
	branch Test(EQ,Z_1251) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r13 r15 r8 r9 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:Test(GT,SZO) cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C550:
	r10_1303 = r10_1203 + 0x0000000000000001
	r10d_1304 = (word32) r10_1303 (alias)
	r10b_1305 = (byte) r10_1303 (alias)
	SZO_1306 = cond(r9d_1211 & r9d_1211)
	Z_1307 = (bool) SZO_1306 (alias)
	C_1308 = false
	branch Test(EQ,Z_1307) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r13 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:Test(GT,SZO) cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C559:
	rax_1309 = (uint64) dwLocC4_59
	eax_1310 = (word32) rax_1309 (alias)
	rdx_rax_1311 = SEQ(rdx_1220, rax_1309) (alias)
	edx_eax_1312 = rax_1309 (alias)
	ah_1313 = SLICE(rax_1309, byte, 8) (alias)
	ax_1314 = (word16) rax_1309 (alias)
	al_1315 = (byte) rax_1309 (alias)
	SCZO_1316 = cond(rax_1309 - r10_1303)
	Z_1317 = (bool) SCZO_1316 (alias)
	branch Test(NE,Z_1317) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r13 r15 r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:Test(GT,SZO) cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C562:
	SCZO_1318 = cond(ebx_1215 - 0x00000008)
	Z_1319 = (bool) SCZO_1318 (alias)
	branch Test(EQ,Z_1319) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r13 r15 r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C567:
	rbx_1320 = (uint64) (ebx_1215 + 0x00000001)
	ebx_1321 = (word32) rbx_1320 (alias)
	SZO_1322 = cond(bLocC8 & 0x08)
	Z_1323 = (bool) SZO_1322 (alias)
	C_1324 = false
	r10_1325 = 0x0000000000000001
	r10d_1326 = (word32) r10_1325 (alias)
	r10b_1327 = (byte) r10_1325 (alias)
	branch Test(NE,Z_1323) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r13 r15 r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C577:
	rax_1328 = rax_1309 - 0x0000000000000001
	Mem1329[rax_1328 - 0x0000000000000001:byte] = 0x30
	rdx_1330 = r11_1208
	rsi_1331 = r15_85
	qwLocB0_1332 = 0x0000000000000001
	rax_1333 = rax_1328 - r11_1208
	SCZO_1334 = cond(rax_1333)
	rdi_1335 = rax_1333
	rax_1336 = memcpy(rdi_1335, rsi_1331, rdx_1330)
	r10_1337 = 0x0000000000000001
	r10d_1338 = (word32) r10_1337 (alias)
	r10b_1339 = (byte) r10_1337 (alias)
	r8_1340 = rax_1336
// DataOut: ebx fs r10 r10b r11 r13 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:0x0000000000000001 r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C5A0:
	r10_1253 = PHI(r10_1203, r10_1303, r10_1303, r10_1303, r10_1325, r10_1337)
	r10d_1254 = PHI(r10d_1204, r10d_1304, r10d_1304, r10d_1304, r10d_1326, r10d_1338)
	r10b_1255 = PHI(r10b_1205, r10b_1305, r10b_1305, r10b_1305, r10b_1327, r10b_1339)
	r8_1256 = PHI(r8_1209, r8_1209, r8_1209, r8_1209, r8_1209, r8_1340)
	qwLocB0_1257 = PHI(qwLocB0, qwLocB0, qwLocB0, qwLocB0, qwLocB0, qwLocB0_1332)
	ebx_1258 = PHI(ebx_1215, ebx_1215, ebx_1215, ebx_1215, ebx_1321, ebx_1321)
	rsi_1259 = PHI(rsi_1239, rsi_1239, rsi_1239, rsi_1239, rsi_1239, rsi_1331)
	rdx_1260 = PHI(rdx_1220, rdx_1220, rdx_1220, rdx_1220, rdx_1220, rdx_1330)
	rdi_1261 = PHI(rdi_1242, rdi_1242, rdi_1242, rdi_1242, rdi_1242, rdi_1335)
	SZO_1262 = PHI(SZO_1250, SZO_1306, SZO_1306, SZO_1306, SZO_1322, SZO_1322)
	Z_1263 = PHI(Z_1251, Z_1307, Z_1317, Z_1319, Z_1323, Z_1323)
	C_1264 = PHI(C_1252, C_1308, C_1308, C_1308, C_1324, C_1324)
	rax_1265 = PHI(rax_1243, rax_1243, rax_1309, rax_1309, rax_1309, rax_1336)
	eax_1266 = PHI(eax_1244, eax_1244, eax_1310, eax_1310, eax_1310, eax_1310)
	rdx_rax_1267 = PHI(rdx_rax_1245, rdx_rax_1245, rdx_rax_1311, rdx_rax_1311, rdx_rax_1311, rdx_rax_1311)
	edx_eax_1268 = PHI(edx_eax_1246, edx_eax_1246, edx_eax_1312, edx_eax_1312, edx_eax_1312, edx_eax_1312)
	ah_1269 = PHI(ah_1230, ah_1230, ah_1313, ah_1313, ah_1313, ah_1313)
	ax_1270 = PHI(ax_1247, ax_1247, ax_1314, ax_1314, ax_1314, ax_1314)
	al_1271 = PHI(al_1248, al_1248, al_1315, al_1315, al_1315, al_1315)
	SCZO_1272 = PHI(SCZO_1249, SCZO_1249, SCZO_1316, SCZO_1318, SCZO_1318, SCZO_1334)
	rbx_1273 = PHI(rbx_1233, rbx_1233, rbx_1233, rbx_1233, rbx_1320, rbx_1320)
	r12_1274 = r8_1256
	r12d_1275 = (word32) r12_1274 (alias)
	rcx_1276 = 0x00000000CCCCCCCD
// DataOut: ebx fs r10 r10b r11 r12 r13 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C5B0:
	r10_1277 = PHI(r10_1253, r10_1295)
	r12_1278 = PHI(r12_1274, r12_1280)
	rax_1279 = r10_1277
	r12_1280 = r12_1278 - 0x0000000000000001
	r12d_1281 = (word32) r12_1280 (alias)
	rdx_rax_1282 = 0x00000000CCCCCCCD *u rax_1279
	rdx_1283 = SLICE(rdx_rax_1282, word64, 64) (alias)
	rdx_1284 = rdx_1283 >>u 0x0000000000000003
	rax_1285 = rdx_1284 + rdx_1284 * 0x0000000000000004
	rax_1286 = rax_1285 + rax_1285
	r10_1287 = r10_1277 - rax_1286
	r10d_1288 = (word32) r10_1287 (alias)
	r10_1289 = (uint64) (r10d_1288 + 0x00000030)
	r10b_1290 = (byte) r10_1289 (alias)
	SZO_1291 = cond(rdx_1284 & rdx_1284)
	Z_1292 = (bool) SZO_1291 (alias)
	C_1293 = false
	Mem1294[r12_1280:byte] = r10b_1290
	r10_1295 = rdx_1284
	r10d_1296 = (word32) r10_1295 (alias)
	r10b_1297 = (byte) r10_1295 (alias)
	branch Test(NE,Z_1292) l000000000040C5B0
// DataOut: ebx fs r10 r10b r11 r12 r13 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x00000000CCCCCCCD r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0xCD edx:<invalid> r14d:<invalid> ecx:0xCCCCCCCD dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C5D8:
// DataOut: ebx fs r10 r11 r12 r13 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x00000000CCCCCCCD r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0xCD edx:<invalid> r14d:<invalid> ecx:0xCCCCCCCD dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BE59:
	sil_485 = PHI(sil, sil, sil_1668, sil)
	r10_486 = PHI(r10, r10, r10, r10_1630)
	r10d_487 = PHI(r10d, r10d, r10d, r10d_1631)
	r10b_488 = PHI(r10b, r10b, r10b, r10b_1632)
	esi_489 = PHI(esi, esi, esi_1669, esi)
	rsi_490 = PHI(rsi, rsi, rsi_1667, rsi)
	ecx_491 = PHI(ecx_1621, ecx, ecx, ecx_1621)
	rcx_492 = PHI(rcx_1620, rcx_48, rcx_48, rcx_1620)
	cl_493 = PHI(cl_1622, cl, cl, cl_1622)
	rdx_494 = PHI(rdx_1609, rdx_71, rdx_1662, rdx_1636)
	Z_495 = PHI(Z_1618, Z_1649, Z_1665, Z_1639)
	rax_496 = PHI(rax_1610, rax_95, rax_1663, rax_1637)
	eax_497 = PHI(eax_1611, eax_88, eax_88, eax_1611)
	rdx_rax_498 = PHI(rdx_rax_1612, rdx_rax, rdx_rax_1660, rdx_rax_1634)
	edx_eax_499 = PHI(edx_eax_1613, edx_eax, edx_eax, edx_eax_1613)
	ah_500 = PHI(ah_1614, ah, ah, ah_1614)
	ax_501 = PHI(ax_1615, ax, ax, ax_1615)
	al_502 = PHI(al_1616, al, al, al_1616)
	SCZO_503 = PHI(SCZO_97, SCZO_97, SCZO_97, SCZO_1638)
	qwLoc80_504 = r12_23
	SZO_505 = cond(r12_23 & r12_23)
	S_506 = (bool) SZO_505 (alias)
	C_507 = false
	rLoc1_508 = (real64) qwLoc80_504
	branch (r12_23 & r12_23) < 0x0000000000000000 l000000000040C5F0
// DataOut: bx fs r10 r11 r13 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C5F0:
	rLoc1_1155 = rLoc1_508 + Mem0[0x0000000000415F08:real32]
	qwLoc80_1156 = rbx_32
	SZO_1157 = cond(rbx_32 & rbx_32)
	S_1158 = (bool) SZO_1157 (alias)
	C_1159 = false
	rLoc2_1160 = (real64) qwLoc80_1156
	branch Test(NS,S_1158) l000000000040BE7D
// DataOut: fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):rdi -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BE6B:
	qwLoc80_1150 = rbx_32
	SZO_1151 = cond(rbx_32 & rbx_32)
	S_1152 = (bool) SZO_1151 (alias)
	C_1153 = false
	rLoc2_1154 = (real64) qwLoc80_1150
	branch Test(SG,S_1152) l000000000040C608
// DataOut: fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):rdi -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C608:
	rLoc2_1143 = PHI(rLoc2_1154, rLoc2_1160)
	qwLoc80_1144 = PHI(qwLoc80_1150, qwLoc80_1156)
	S_1145 = PHI(S_1152, S_1158)
	rLoc1_1146 = PHI(rLoc1_508, rLoc1_1155)
	SZO_1147 = PHI(SZO_1151, SZO_1157)
	C_1148 = PHI(C_1153, C_1159)
	rLoc2_1149 = rLoc2_1143 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):rcx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BE7D:
	rLoc2_509 = PHI(rLoc2_1154, rLoc2_1149, rLoc2_1160)
	rLoc1_510 = PHI(rLoc1_508, rLoc1_1146, rLoc1_1155)
	rax_511 = qwLocC0_43
	qwLoc80_512 = rax_511
	SZO_513 = cond(rax_511 & rax_511)
	S_514 = (bool) SZO_513 (alias)
	C_515 = false
	rLoc3_516 = (real64) qwLoc80_512
	branch (rax_511 & rax_511) < 0x0000000000000000 l000000000040C5E0
// DataOut: fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):rcx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C5E0:
	rLoc3_1142 = rLoc3_516 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BE94:
	rLoc3_517 = PHI(rLoc3_516, rLoc3_1142)
	SZO_518 = cond(bLocC8 & 0x10)
	Z_519 = (bool) SZO_518 (alias)
	C_520 = false
	rLoc2_521 = rLoc2_509 / rLoc3_517
	rLoc1_522 = rLoc1_510 * rLoc2_521
	branch (bLocC8 & 0x10) == 0x00 l000000000040C1B8
// DataOut: fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C1B8:
	SCZO_973 = cond(dwLocB0_35 - 0x00000001)
	Z_974 = (bool) SCZO_973 (alias)
	branch Test(EQ,Z_974) l000000000040C1CD
// DataOut: fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C1BF:
	rLoc2_1016 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_1017 = cond(rLoc2_1016 - rLoc1_522)
	CZ_1018 = CZP_1017 (alias)
	O_1019 = false
	S_1020 = false
	branch Test(UGT,CZ_1018) l000000000040C408
// DataOut: fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C408:
	rLoc2_1021 = (real64) Mem0[0x0000000000415F0C:real32]
	v70_1022 = rLoc2_1021
	rLoc2_1023 = rLoc1_522
	rLoc1_1024 = v70_1022
	CZP_1025 = cond(rLoc2_1023 - rLoc1_1024)
	C_1026 = (bool) CZP_1025 (alias)
	O_1027 = false
	S_1028 = false
	branch Test(UGE,C_1026) l000000000040C6A0
// DataOut: fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C6A0:
	wLoc82_1120 = __fstcw()
	eax_1121 = (word32) wLoc82_1120
	ah_1122 = SLICE(eax_1121, byte, 8) (alias)
	rLoc2_1123 = rLoc2_1023 - rLoc1_1024
	v71_1124 = rLoc2_1123
	rLoc2_1125 = rLoc1_1024
	rLoc1_1126 = v71_1124
	rdx_1127 = 0x0000000000000000
	ah_1128 = ah_1122 | 0x0C
	ax_1129 = DPB(ax_501, ah_1128, 8) (alias)
	wLoc84_1130 = ax_1129
	__fldcw(wLoc84_1130)
	qwLoc80_1131 = (int64) rLoc2_1125
	__fldcw(wLoc82_1120)
	rax_1132 = qwLoc80_1131
	rax_1133 = rax_1132 ^ 0x0000000000000000
	eax_1134 = (word32) rax_1133 (alias)
	rdx_rax_1135 = SEQ(rdx_1127, rax_1133) (alias)
	edx_eax_1136 = rax_1133 (alias)
	ah_1137 = SLICE(rax_1133, byte, 8) (alias)
	ax_1138 = (word16) rax_1133 (alias)
	al_1139 = (byte) rax_1133 (alias)
	SZO_1140 = cond(rax_1133)
	C_1141 = false
// DataOut: ax fs r10 r11 r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C418:
	rLoc1_1102 = rLoc2_1023
	wLoc82_1103 = __fstcw()
	eax_1104 = (word32) wLoc82_1103
	ah_1105 = SLICE(eax_1104, byte, 8) (alias)
	ah_1106 = ah_1105 | 0x0C
	ax_1107 = DPB(ax_501, ah_1106, 8) (alias)
	SZO_1108 = cond(ah_1106)
	C_1109 = false
	wLoc84_1110 = ax_1107
	rLoc2_1111 = rLoc2_1023
	__fldcw(wLoc84_1110)
	qwLoc80_1112 = (int64) rLoc2_1111
	__fldcw(wLoc82_1103)
	rax_1113 = qwLoc80_1112
	eax_1114 = (word32) rax_1113 (alias)
	rdx_rax_1115 = SEQ(rdx_494, rax_1113) (alias)
	edx_eax_1116 = rax_1113 (alias)
	ah_1117 = SLICE(rax_1113, byte, 8) (alias)
	ax_1118 = (word16) rax_1113 (alias)
	al_1119 = (byte) rax_1113 (alias)
// DataOut: ax fs r10 r11 r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C43E:
	wLoc82_1029 = PHI(wLoc82_1103, wLoc82_1120)
	wLoc84_1030 = PHI(wLoc84_1110, wLoc84_1130)
	rLoc2_1031 = PHI(rLoc2_1111, rLoc2_1125)
	qwLoc80_1032 = PHI(qwLoc80_1112, qwLoc80_1131)
	rLoc1_1033 = PHI(rLoc1_1102, rLoc1_1126)
	rax_1034 = PHI(rax_1113, rax_1133)
	eax_1035 = PHI(eax_1114, eax_1134)
	ah_1036 = PHI(ah_1117, ah_1137)
	ax_1037 = PHI(ax_1118, ax_1138)
	al_1038 = PHI(al_1119, al_1139)
	rsi_1039 = (uint64) dwLocB0_35
	esi_1040 = (word32) rsi_1039 (alias)
	rdx_1041 = 0x0000000000000000
	edx_1042 = (word32) rdx_1041 (alias)
	rdx_rax_1043 = SEQ(rdx_1041, rax_1034) (alias)
	edx_eax_1044 = rdx_1041 (alias)
	dl_1045 = (byte) rdx_1041 (alias)
	SZO_1046 = cond(esi_1040 & esi_1040)
	Z_1047 = (bool) SZO_1046 (alias)
	C_1048 = false
	branch Test(NE,Z_1047) l000000000040C470
// DataOut: ax fs r10 r11 r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C470:
	rLoc1_1101 = rLoc1_1033
// DataOut: fs r10 r11 r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C448:
	qwLoc80_1069 = rax_1034
	SZO_1070 = cond(rax_1034 & rax_1034)
	S_1071 = (bool) SZO_1070 (alias)
	C_1072 = false
	rLoc2_1073 = (real64) qwLoc80_1069
	branch Test(SG,S_1071) l000000000040C772
// DataOut: fs r10 r11 r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C772:
	rLoc2_1100 = rLoc2_1073 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r10 r11 r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C45A:
	rLoc2_1074 = PHI(rLoc2_1073, rLoc2_1100)
	rcx_1075 = 0x0000000000000000
	rdx_1076 = 0x0000000000000001
	edx_1077 = (word32) rdx_1076 (alias)
	rdx_rax_1078 = SEQ(rdx_1076, rax_1034) (alias)
	edx_eax_1079 = rdx_1076 (alias)
	dl_1080 = (byte) rdx_1076 (alias)
	CZP_1081 = cond(rLoc2_1074 - rLoc1_1033)
	Z_1082 = (bool) CZP_1081 (alias)
	P_1083 = (bool) CZP_1081 (alias)
	O_1084 = false
	S_1085 = false
	rLoc1_1086 = rLoc1_1033
	cl_1087 = Test(PE,P_1083)
	rcx_1088 = DPB(rcx_1075, cl_1087, 0) (alias)
	ecx_1089 = DPB(ecx_491, cl_1087, 0) (alias)
	branch Test(NE,Z_1082) l000000000040C46C
// DataOut: fs r10 r11 r13 r9 rax rbp rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C468_1:
	rdx_1095 = rcx_1088
	edx_1096 = (word32) rdx_1095 (alias)
	rdx_rax_1097 = SEQ(rdx_1095, rax_1034) (alias)
	edx_eax_1098 = rdx_1095 (alias)
	dl_1099 = (byte) rdx_1095 (alias)
// DataOut: fs r10 r11 r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 ah:<invalid> rsi:<invalid> cl:Test(PE,P) r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C46C:
	rdx_1090 = PHI(rdx_1076, rdx_1095)
	edx_1091 = PHI(edx_1077, edx_1096)
	dl_1092 = PHI(dl_1080, dl_1099)
	rdx_rax_1093 = PHI(rdx_rax_1078, rdx_rax_1097)
	edx_eax_1094 = PHI(edx_eax_1079, edx_eax_1098)
// DataOut: fs r10 r11 r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> cl:Test(PE,P) r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C472:
	rLoc2_1049 = PHI(rLoc2_1074, rLoc2_1031)
	CZP_1050 = PHI(CZP_1081, CZP_1025)
	P_1051 = PHI(P_1083, P)
	O_1052 = PHI(O_1084, O_1027)
	ecx_1053 = PHI(ecx_1089, ecx_491)
	rcx_1054 = PHI(rcx_1088, rcx_492)
	cl_1055 = PHI(cl_1087, cl_493)
	rdx_1056 = PHI(rdx_1090, rdx_1041)
	edx_1057 = PHI(edx_1091, edx_1042)
	dl_1058 = PHI(dl_1092, dl_1045)
	Z_1059 = PHI(Z_1082, Z_1047)
	rdx_rax_1060 = PHI(rdx_rax_1093, rdx_rax_1043)
	edx_eax_1061 = PHI(edx_eax_1094, edx_eax_1044)
	rax_1062 = rax_1034 + rdx_1056
	qwLoc80_1063 = rax_1062
	SZO_1064 = cond(rax_1062 & rax_1062)
	S_1065 = (bool) SZO_1064 (alias)
	C_1066 = false
	rLoc1_1067 = (real64) qwLoc80_1063
	branch Test(NS,S_1065) l000000000040C1CD
// DataOut: fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C487:
	rLoc1_1068 = rLoc1_1067 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C1CD:
	esi_975 = PHI(esi_489, esi_489, esi_1040, esi_1040)
	wLoc82_976 = PHI(wLoc82, wLoc82, wLoc82_1029, wLoc82_1029)
	wLoc84_977 = PHI(wLoc84, wLoc84, wLoc84_1030, wLoc84_1030)
	rLoc2_978 = PHI(rLoc2_521, rLoc2_1016, rLoc2_1049, rLoc2_1049)
	CZP_979 = PHI(CZP_78, CZP_1017, CZP_1050, CZP_1050)
	P_980 = PHI(P, P, P_1051, P_1051)
	O_981 = PHI(O_79, O_1019, O_1052, O_1052)
	qwLoc80_982 = PHI(qwLoc80_512, qwLoc80_512, qwLoc80_1063, qwLoc80_1063)
	S_983 = PHI(S_514, S_1020, S_1065, S_1065)
	rLoc1_984 = PHI(rLoc1_522, rLoc1_522, rLoc1_1067, rLoc1_1068)
	CZ_985 = PHI(CZ_98, CZ_1018, CZ_1018, CZ_1018)
	ecx_986 = PHI(ecx_491, ecx_491, ecx_1053, ecx_1053)
	cl_987 = PHI(cl_493, cl_493, cl_1055, cl_1055)
	edx_988 = PHI(edx, edx, edx_1057, edx_1057)
	dl_989 = PHI(dl, dl, dl_1058, dl_1058)
	Z_990 = PHI(Z_974, Z_974, Z_1059, Z_1059)
	rdx_rax_991 = PHI(rdx_rax_498, rdx_rax_498, rdx_rax_1060, rdx_rax_1060)
	edx_eax_992 = PHI(edx_eax_499, edx_eax_499, edx_eax_1061, edx_eax_1061)
	ah_993 = PHI(ah_500, ah_500, ah_1036, ah_1036)
	ax_994 = PHI(ax_501, ax_501, ax_1037, ax_1037)
	al_995 = PHI(al_502, al_502, al_1038, al_1038)
	rLocE8_996 = (real80) rLoc1_984
	rbx_997 = qwLocB8_38
	rcx_998 = 0x0000000000415F18
	rdx_999 = 0xFFFFFFFFFFFFFFFF
	rsi_1000 = 0x0000000000000001
	rax_1001 = 0x0000000000000000
	r14_1002 = 0x0000000000000000
	r14d_1003 = (word32) r14_1002 (alias)
	SZO_1004 = cond(r14d_1003)
	C_1005 = false
	rdi_1006 = rbx_997
	eax_1007 = __sprintf_chk(rdi_1006, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000415F18, tLocF0)
	rdi_1008 = rbx_997
	rbx_1009 = 0x00000000FFFFFFFF
	ebx_1010 = (word32) rbx_1009 (alias)
	eax_1011 = strlen(rdi_1008)
	rax_1012 = DPB(rax_1001, eax_1011, 0) (alias)
	r15_1013 = rax_1012
	r15d_1014 = (word32) r15_1013 (alias)
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> ah:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BEA3:
	rLoc2_575 = (real64) dwLocC4_59
	rbx_576 = 0x0000000000000000
	ebx_577 = (word32) rbx_576 (alias)
	SZO_578 = cond(ebx_577)
	C_579 = false
	rLoc3_580 = rLoc3_517
// DataOut: ebx fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BEB4:
	rLoc4_582 = PHI(rLoc4, rLoc4_593)
	rLoc3_583 = PHI(rLoc3_580, rLoc3_969)
	rLoc1_584 = PHI(rLoc1_522, rLoc1_970)
	ebx_585 = PHI(ebx_577, ebx_590)
	Z_586 = PHI(Z_519, Z_964)
	SCZO_587 = PHI(SCZO_503, SCZO_963)
	rLoc4_588 = rLoc4_582
	rbx_589 = (uint64) (ebx_585 + 0x00000001)
	ebx_590 = (word32) rbx_589 (alias)
	rLoc4_591 = rLoc4_588 * rLoc2_575
	v45_592 = rLoc4_591
	rLoc4_593 = rLoc1_584
	rLoc1_594 = v45_592
	CZP_595 = cond(rLoc4_593 - rLoc1_594)
	C_596 = (bool) CZP_595 (alias)
	O_597 = false
	S_598 = false
	branch rLoc4_593 <u rLoc1_594 l000000000040BED0
// DataOut: ebx fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BED0:
	rLoc2_971 = rLoc4_593
	rLoc1_972 = rLoc3_583
// DataOut: ebx fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BEC1:
	SCZO_963 = cond(ebx_590 - 0x00000008)
	Z_964 = (bool) SCZO_963 (alias)
	branch Test(NE,Z_964) l000000000040BEB0
// DataOut: ebx fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BEB0:
	rLoc3_967 = rLoc4_593
	v56_968 = rLoc3_967
	rLoc3_969 = rLoc1_594
	rLoc1_970 = v56_968
// DataOut: ebx fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BEC6:
	rLoc2_965 = rLoc4_593
	rLoc1_966 = rLoc3_583
// DataOut: ebx fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BED4:
	rLoc2_599 = PHI(rLoc2_965, rLoc2_971)
	rLoc1_600 = PHI(rLoc1_966, rLoc1_972)
	rLoc1_601 = rLoc2_599 / rLoc1_600
	SCZO_602 = cond(dwLocB0_35 - 0x00000001)
	Z_603 = (bool) SCZO_602 (alias)
	rLoc2_604 = rLoc2_599
	branch dwLocB0_35 == 0x00000001 l000000000040BF70
// DataOut: ebx fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BF70:
	v67_960 = rLoc2_604
	rLoc2_961 = rLoc1_601
	rLoc1_962 = v67_960
// DataOut: ebx fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BEE3:
	rLoc2_830 = rLoc2_604
	rLoc2_831 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_832 = cond(rLoc2_831 - rLoc1_601)
	CZ_833 = CZP_832 (alias)
	O_834 = false
	S_835 = false
	branch Test(ULE,CZ_833) l000000000040C498
// DataOut: ebx fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C498:
	rLoc2_956 = rLoc2_831
// DataOut: ebx fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BEF3:
	rLoc2_836 = (real64) Mem0[0x0000000000415F0C:real32]
	v52_837 = rLoc2_836
	rLoc2_838 = rLoc1_601
	rLoc1_839 = v52_837
	CZP_840 = cond(rLoc2_838 - rLoc1_839)
	C_841 = (bool) CZP_840 (alias)
	O_842 = false
	S_843 = false
	branch Test(UGE,C_841) l000000000040C660
// DataOut: ebx fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C660:
	wLoc82_934 = __fstcw()
	eax_935 = (word32) wLoc82_934
	ah_936 = SLICE(eax_935, byte, 8) (alias)
	rLoc2_937 = rLoc2_838 - rLoc1_839
	v61_938 = rLoc2_937
	rLoc2_939 = rLoc1_839
	rLoc1_940 = v61_938
	rdx_941 = 0x0000000000000000
	ah_942 = ah_936 | 0x0C
	ax_943 = DPB(ax_501, ah_942, 8) (alias)
	wLoc84_944 = ax_943
	__fldcw(wLoc84_944)
	qwLoc80_945 = (int64) rLoc2_939
	__fldcw(wLoc82_934)
	rax_946 = qwLoc80_945
	rax_947 = rax_946 ^ 0x0000000000000000
	eax_948 = (word32) rax_947 (alias)
	rdx_rax_949 = SEQ(rdx_941, rax_947) (alias)
	edx_eax_950 = rax_947 (alias)
	ah_951 = SLICE(rax_947, byte, 8) (alias)
	ax_952 = (word16) rax_947 (alias)
	al_953 = (byte) rax_947 (alias)
	SZO_954 = cond(rax_947)
	C_955 = false
// DataOut: al eax ebx fs r10 r11 r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BF03:
	rLoc1_916 = rLoc2_838
	wLoc82_917 = __fstcw()
	eax_918 = (word32) wLoc82_917
	ah_919 = SLICE(eax_918, byte, 8) (alias)
	ah_920 = ah_919 | 0x0C
	ax_921 = DPB(ax_501, ah_920, 8) (alias)
	SZO_922 = cond(ah_920)
	C_923 = false
	wLoc84_924 = ax_921
	rLoc2_925 = rLoc2_838
	__fldcw(wLoc84_924)
	qwLoc80_926 = (int64) rLoc2_925
	__fldcw(wLoc82_917)
	rax_927 = qwLoc80_926
	eax_928 = (word32) rax_927 (alias)
	rdx_rax_929 = SEQ(rdx_494, rax_927) (alias)
	edx_eax_930 = rax_927 (alias)
	ah_931 = SLICE(rax_927, byte, 8) (alias)
	ax_932 = (word16) rax_927 (alias)
	al_933 = (byte) rax_927 (alias)
// DataOut: al eax ebx fs r10 r11 r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BF29:
	wLoc82_844 = PHI(wLoc82_917, wLoc82_934)
	wLoc84_845 = PHI(wLoc84_924, wLoc84_944)
	rLoc2_846 = PHI(rLoc2_925, rLoc2_939)
	qwLoc80_847 = PHI(qwLoc80_926, qwLoc80_945)
	rLoc1_848 = PHI(rLoc1_916, rLoc1_940)
	rax_849 = PHI(rax_927, rax_947)
	eax_850 = PHI(eax_928, eax_948)
	ah_851 = PHI(ah_931, ah_951)
	ax_852 = PHI(ax_932, ax_952)
	al_853 = PHI(al_933, al_953)
	rcx_854 = (uint64) dwLocB0_35
	ecx_855 = (word32) rcx_854 (alias)
	rdx_856 = 0x0000000000000000
	edx_857 = (word32) rdx_856 (alias)
	rdx_rax_858 = SEQ(rdx_856, rax_849) (alias)
	edx_eax_859 = rdx_856 (alias)
	dl_860 = (byte) rdx_856 (alias)
	SZO_861 = cond(ecx_855 & ecx_855)
	Z_862 = (bool) SZO_861 (alias)
	C_863 = false
	branch Test(NE,Z_862) l000000000040BF55
// DataOut: al eax ebx fs r10 r11 r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BF33:
	qwLoc80_890 = rax_849
	SZO_891 = cond(rax_849 & rax_849)
	S_892 = (bool) SZO_891 (alias)
	C_893 = false
	rLoc2_894 = (real64) qwLoc80_890
	branch Test(SG,S_892) l000000000040C77D
// DataOut: ebx fs r10 r11 r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C77D:
	rLoc2_915 = rLoc2_894 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r10 r11 r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BF45:
	rLoc2_895 = PHI(rLoc2_894, rLoc2_915)
	rcx_896 = 0x0000000000000000
	rdx_897 = 0x0000000000000001
	edx_898 = (word32) rdx_897 (alias)
	rdx_rax_899 = SEQ(rdx_897, rax_849) (alias)
	edx_eax_900 = rdx_897 (alias)
	dl_901 = (byte) rdx_897 (alias)
	CZP_902 = cond(rLoc2_895 - rLoc1_848)
	Z_903 = (bool) CZP_902 (alias)
	P_904 = (bool) CZP_902 (alias)
	O_905 = false
	S_906 = false
	cl_907 = Test(PE,P_904)
	rcx_908 = DPB(rcx_896, cl_907, 0) (alias)
	ecx_909 = DPB(ecx_855, cl_907, 0) (alias)
	branch Test(NE,Z_903) l000000000040BF55
// DataOut: ebx fs r10 r11 r13 r9 rax rbp rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BF51_1:
	rdx_910 = rcx_908
	edx_911 = (word32) rdx_910 (alias)
	rdx_rax_912 = SEQ(rdx_910, rax_849) (alias)
	edx_eax_913 = rdx_910 (alias)
	dl_914 = (byte) rdx_910 (alias)
// DataOut: ebx fs r10 r11 r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 ah:<invalid> cl:Test(PE,P) r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BF55:
	CZP_865 = PHI(CZP_902, CZP_902, CZP_840)
	P_866 = PHI(P_904, P_904, P)
	O_867 = PHI(O_905, O_905, O_842)
	ecx_868 = PHI(ecx_909, ecx_909, ecx_855)
	rcx_869 = PHI(rcx_908, rcx_908, rcx_854)
	cl_870 = PHI(cl_907, cl_907, cl_493)
	rdx_871 = PHI(rdx_897, rdx_910, rdx_856)
	edx_872 = PHI(edx_898, edx_911, edx_857)
	dl_873 = PHI(dl_901, dl_914, dl_860)
	Z_874 = PHI(Z_903, Z_903, Z_862)
	rdx_rax_875 = PHI(rdx_rax_899, rdx_rax_912, rdx_rax_858)
	edx_eax_876 = PHI(edx_eax_900, edx_eax_913, edx_eax_859)
	rax_877 = rax_849 + rdx_871
	qwLoc80_878 = rax_877
	SZO_879 = cond(rax_877 & rax_877)
	S_880 = (bool) SZO_879 (alias)
	C_881 = false
	rLoc2_882 = (real64) qwLoc80_878
	branch Test(SG,S_880) l000000000040C758
// DataOut: ebx fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C758:
	rLoc2_886 = rLoc2_882 + Mem0[0x0000000000415F08:real32]
	v63_887 = rLoc2_886
	rLoc2_888 = rLoc1_848
	rLoc1_889 = v63_887
// DataOut: ebx fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BF6A:
	v60_883 = rLoc2_882
	rLoc2_884 = rLoc1_848
	rLoc1_885 = v60_883
// DataOut: ebx fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BF72:
	wLoc82_605 = PHI(wLoc82_844, wLoc82_844, wLoc82, wLoc82)
	wLoc84_606 = PHI(wLoc84_845, wLoc84_845, wLoc84, wLoc84)
	rLoc2_607 = PHI(rLoc2_884, rLoc2_888, rLoc2_956, rLoc2_961)
	CZP_608 = PHI(CZP_865, CZP_865, CZP_832, CZP_595)
	P_609 = PHI(P_866, P_866, P, P)
	O_610 = PHI(O_867, O_867, O_834, O_597)
	qwLoc80_611 = PHI(qwLoc80_878, qwLoc80_878, qwLoc80_512, qwLoc80_512)
	S_612 = PHI(S_880, S_880, S_835, S_598)
	rLoc1_613 = PHI(rLoc1_885, rLoc1_889, rLoc1_601, rLoc1_962)
	ecx_614 = PHI(ecx_868, ecx_868, ecx_491, ecx_491)
	cl_615 = PHI(cl_870, cl_870, cl_493, cl_493)
	dl_616 = PHI(dl_873, dl_873, dl, dl)
	C_617 = PHI(C_881, C_881, C_596, C_596)
	rdx_rax_618 = PHI(rdx_rax_875, rdx_rax_875, rdx_rax_498, rdx_rax_498)
	edx_eax_619 = PHI(edx_eax_876, edx_eax_876, edx_eax_499, edx_eax_499)
	ah_620 = PHI(ah_851, ah_851, ah_500, ah_500)
	ax_621 = PHI(ax_852, ax_852, ax_501, ax_501)
	r14_622 = qwLocB8_38
	rdx_623 = 0xFFFFFFFFFFFFFFFF
	rcx_624 = 0x0000000000415F1E
	rsi_625 = 0x0000000000000001
	rax_626 = 0x0000000000000000
	qwLoc98_627 = r11_93
	rdi_628 = r14_622
	rLocA8_629 = (real80) rLoc2_607
	rLocE8_630 = (real80) rLoc1_613
	eax_632 = __sprintf_chk(rdi_628, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000415F1E, tLocF0)
	rdi_633 = r14_622
	eax_634 = strlen(rdi_633)
	rax_635 = DPB(rax_626, eax_634, 0) (alias)
	r11_636 = qwLoc98_627
	rdx_637 = (uint64) dwLoc90_51
	edx_638 = (word32) rdx_637 (alias)
	r15_639 = rax_635
	r15d_640 = (word32) r15_639 (alias)
	rax_641 = 0x0000000000000000
	rLoc1_642 = (real64) rLocA8_629
	SZO_643 = cond(edx_638 & edx_638)
	Z_644 = (bool) SZO_643 (alias)
	r14_645 = r11_636 + 0x0000000000000001
	r14d_646 = (word32) r14_645 (alias)
	al_647 = (edx_638 & edx_638) == 0x00000000
	rax_648 = DPB(rax_641, al_647, 0) (alias)
	rax_649 = r14_645 + 0x0000000000000001 + rax_648
	SCZO_650 = cond(r15_639 - rax_649)
	CZ_651 = SCZO_650 (alias)
	branch r15_639 >u rax_649 l000000000040BFF0
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> ah:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BFCB:
	SZO_822 = cond(bLocC8 & 0x08)
	Z_823 = (bool) SZO_822 (alias)
	C_824 = false
	branch Test(EQ,Z_823) l000000000040C208
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C208:
	rLoc1_829 = rLoc1_642
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BFD6:
	rax_825 = qwLocB8_38
	SCZO_826 = cond(Mem0[rax_825 - 0x0000000000000001 + r15_639:byte] - 0x30)
	Z_827 = (bool) SCZO_826 (alias)
	branch Test(NE,Z_827) l000000000040C210
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C210:
	rLoc1_828 = rLoc1_642
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:rsi r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BFE7:
// DataOut: ebx fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:rsi r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040BFF0:
	SZO_652 = PHI(SZO_643, SZO_822)
	C_653 = PHI(C_617, C_824)
	rax_654 = PHI(rax_649, rax_825)
	SCZO_655 = cond(dwLocB0_35 - 0x00000001)
	Z_656 = (bool) SCZO_655 (alias)
	rLoc1_657 = rLoc1_642 * Mem0[0x0000000000415F84:real32]
	branch dwLocB0_35 == 0x00000001 l000000000040C0A0
// DataOut: ebx fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C001:
	rLoc2_696 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_697 = cond(rLoc2_696 - rLoc1_657)
	CZ_698 = CZP_697 (alias)
	O_699 = false
	S_700 = false
	branch rLoc2_696 <=u rLoc1_657 l000000000040C0A0
// DataOut: ebx fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C00F:
	rLoc2_701 = (real64) Mem0[0x0000000000415F0C:real32]
	v64_702 = rLoc2_701
	rLoc2_703 = rLoc1_657
	rLoc1_704 = v64_702
	CZP_705 = cond(rLoc2_703 - rLoc1_704)
	C_706 = (bool) CZP_705 (alias)
	O_707 = false
	S_708 = false
	branch rLoc2_703 >=u rLoc1_704 l000000000040C720
// DataOut: ebx fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C720:
	wLoc82_800 = __fstcw()
	eax_801 = (word32) wLoc82_800
	ah_802 = SLICE(eax_801, byte, 8) (alias)
	rLoc2_803 = rLoc2_703 - rLoc1_704
	v65_804 = rLoc2_803
	rLoc2_805 = rLoc1_704
	rLoc1_806 = v65_804
	rdx_807 = 0x0000000000000000
	ah_808 = ah_802 | 0x0C
	ax_809 = DPB(ax_621, ah_808, 8) (alias)
	wLoc84_810 = ax_809
	__fldcw(wLoc84_810)
	qwLoc80_811 = (int64) rLoc2_805
	__fldcw(wLoc82_800)
	rax_812 = qwLoc80_811
	rax_813 = rax_812 ^ 0x0000000000000000
	eax_814 = (word32) rax_813 (alias)
	rdx_rax_815 = SEQ(rdx_807, rax_813) (alias)
	edx_eax_816 = rax_813 (alias)
	ah_817 = SLICE(rax_813, byte, 8) (alias)
	ax_818 = (word16) rax_813 (alias)
	al_819 = (byte) rax_813 (alias)
	SZO_820 = cond(rax_813)
	C_821 = false
// DataOut: ax eax ebx fs r10 r11 r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C01F:
	rLoc1_782 = rLoc2_703
	wLoc82_783 = __fstcw()
	eax_784 = (word32) wLoc82_783
	ah_785 = SLICE(eax_784, byte, 8) (alias)
	ah_786 = ah_785 | 0x0C
	ax_787 = DPB(ax_621, ah_786, 8) (alias)
	SZO_788 = cond(ah_786)
	C_789 = false
	wLoc84_790 = ax_787
	rLoc2_791 = rLoc2_703
	__fldcw(wLoc84_790)
	qwLoc80_792 = (int64) rLoc2_791
	__fldcw(wLoc82_783)
	rax_793 = qwLoc80_792
	eax_794 = (word32) rax_793 (alias)
	rdx_rax_795 = SEQ(rdx_637, rax_793) (alias)
	edx_eax_796 = rax_793 (alias)
	ah_797 = SLICE(rax_793, byte, 8) (alias)
	ax_798 = (word16) rax_793 (alias)
	al_799 = (byte) rax_793 (alias)
// DataOut: ax eax ebx fs r10 r11 r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C045:
	wLoc82_709 = PHI(wLoc82_783, wLoc82_800)
	wLoc84_710 = PHI(wLoc84_790, wLoc84_810)
	rLoc2_711 = PHI(rLoc2_791, rLoc2_805)
	qwLoc80_712 = PHI(qwLoc80_792, qwLoc80_811)
	rLoc1_713 = PHI(rLoc1_782, rLoc1_806)
	rax_714 = PHI(rax_793, rax_813)
	eax_715 = PHI(eax_794, eax_814)
	ah_716 = PHI(ah_797, ah_817)
	ax_717 = PHI(ax_798, ax_818)
	al_718 = PHI(al_799, al_819)
	r14_719 = (uint64) dwLocB0_35
	r14d_720 = (word32) r14_719 (alias)
	rdx_721 = 0x0000000000000000
	edx_722 = (word32) rdx_721 (alias)
	rdx_rax_723 = SEQ(rdx_721, rax_714) (alias)
	edx_eax_724 = rdx_721 (alias)
	dl_725 = (byte) rdx_721 (alias)
	SZO_726 = cond(r14d_720 & r14d_720)
	Z_727 = (bool) SZO_726 (alias)
	C_728 = false
	branch (r14d_720 & r14d_720) != 0x00000000 l000000000040C080
// DataOut: ax eax ebx fs r10 r11 r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C080:
	rLoc1_781 = rLoc1_713
// DataOut: ebx fs r10 r11 r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C051:
	qwLoc80_749 = rax_714
	SZO_750 = cond(rax_714 & rax_714)
	S_751 = (bool) SZO_750 (alias)
	C_752 = false
	rLoc2_753 = (real64) qwLoc80_749
	branch (rax_714 & rax_714) < 0x0000000000000000 l000000000040C79E
// DataOut: ebx fs r10 r11 r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C79E:
	rLoc2_780 = rLoc2_753 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r10 r11 r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C063:
	rLoc2_754 = PHI(rLoc2_753, rLoc2_780)
	rcx_755 = 0x0000000000000000
	rdx_756 = 0x0000000000000001
	edx_757 = (word32) rdx_756 (alias)
	rdx_rax_758 = SEQ(rdx_756, rax_714) (alias)
	edx_eax_759 = rdx_756 (alias)
	dl_760 = (byte) rdx_756 (alias)
	CZP_761 = cond(rLoc2_754 - rLoc1_713)
	Z_762 = (bool) CZP_761 (alias)
	P_763 = (bool) CZP_761 (alias)
	O_764 = false
	S_765 = false
	rLoc1_766 = rLoc1_713
	cl_767 = Test(PE,P_763)
	rcx_768 = DPB(rcx_755, cl_767, 0) (alias)
	ecx_769 = DPB(ecx_614, cl_767, 0) (alias)
	branch rLoc2_754 != rLoc1_713 l000000000040C075
// DataOut: ebx fs r10 r11 r13 r9 rax rbp rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C071_1:
	rdx_775 = rcx_768
	edx_776 = (word32) rdx_775 (alias)
	rdx_rax_777 = SEQ(rdx_775, rax_714) (alias)
	edx_eax_778 = rdx_775 (alias)
	dl_779 = (byte) rdx_775 (alias)
// DataOut: ebx fs r10 r11 r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> cl:Test(PE,P) r10:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C075:
	rdx_770 = PHI(rdx_756, rdx_775)
	edx_771 = PHI(edx_757, edx_776)
	dl_772 = PHI(dl_760, dl_779)
	rdx_rax_773 = PHI(rdx_rax_758, rdx_rax_777)
	edx_eax_774 = PHI(edx_eax_759, edx_eax_778)
// DataOut: ebx fs r10 r11 r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> cl:Test(PE,P) r10:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C082:
	rLoc2_729 = PHI(rLoc2_754, rLoc2_711)
	CZP_730 = PHI(CZP_761, CZP_705)
	P_731 = PHI(P_763, P_609)
	O_732 = PHI(O_764, O_707)
	ecx_733 = PHI(ecx_769, ecx_614)
	rcx_734 = PHI(rcx_768, rcx_624)
	cl_735 = PHI(cl_767, cl_615)
	rdx_736 = PHI(rdx_770, rdx_721)
	edx_737 = PHI(edx_771, edx_722)
	dl_738 = PHI(dl_772, dl_725)
	Z_739 = PHI(Z_762, Z_727)
	rdx_rax_740 = PHI(rdx_rax_773, rdx_rax_723)
	edx_eax_741 = PHI(edx_eax_774, edx_eax_724)
	rax_742 = rax_714 + rdx_736
	qwLoc80_743 = rax_742
	SZO_744 = cond(rax_742 & rax_742)
	S_745 = (bool) SZO_744 (alias)
	C_746 = false
	rLoc1_747 = (real64) qwLoc80_743
	branch (rax_742 & rax_742) >= 0x0000000000000000 l000000000040C0A0
// DataOut: ebx fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C093:
	rLoc1_748 = rLoc1_747 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r10 r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64) Local -00F0(0)

l000000000040C0A0:
	wLoc82_658 = PHI(wLoc82_605, wLoc82_605, wLoc82_709, wLoc82_709)
	wLoc84_659 = PHI(wLoc84_606, wLoc84_606, wLoc84_710, wLoc84_710)
	rLoc2_660 = PHI(rLoc2_607, rLoc2_696, rLoc2_729, rLoc2_729)
	CZP_661 = PHI(CZP_608, CZP_697, CZP_730, CZP_730)
	P_662 = PHI(P_609, P_609, P_731, P_731)
	O_663 = PHI(O_610, O_699, O_732, O_732)
	qwLoc80_664 = PHI(qwLoc80_611, qwLoc80_611, qwLoc80_743, qwLoc80_743)
	S_665 = PHI(S_612, S_700, S_745, S_745)
	rLoc1_666 = PHI(rLoc1_657, rLoc1_657, rLoc1_747, rLoc1_748)
	CZ_667 = PHI(CZ_651, CZ_698, CZ_698, CZ_698)
	ecx_668 = PHI(ecx_614, ecx_614, ecx_733, ecx_733)
	cl_669 = PHI(cl_615, cl_615, cl_735, cl_735)
	edx_670 = PHI(edx_638, edx_638, edx_737, edx_737)
	dl_671 = PHI(dl_616, dl_616, dl_738, dl_738)
	Z_672 = PHI(Z_656, Z_656, Z_739, Z_739)
	rdx_rax_673 = PHI(rdx_rax_618, rdx_rax_618, rdx_rax_740, rdx_rax_740)
	edx_eax_674 = PHI(edx_eax_619, edx_eax_619, edx_eax_741, edx_eax_741)
	ah_675 = PHI(ah_620, ah_620, ah_716, ah_716)
	ax_676 = PHI(ax_621, ax_621, ax_717, ax_717)
	al_677 = PHI(al_647, al_647, al_718, al_718)
	rLoc1_678 = rLoc1_666 / Mem0[0x0000000000415F84:real32]
	r14_679 = qwLocB8_38
	rcx_680 = 0x0000000000415F18
	rdx_681 = 0xFFFFFFFFFFFFFFFF
	rsi_682 = 0x0000000000000001
	rax_683 = 0x0000000000000000
	rdi_684 = r14_679
	rLocE8_685 = (real80) rLoc1_678
	eax_686 = __sprintf_chk(rdi_684, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000415F18, tLocF0)
	rdi_687 = r14_679
	r14_688 = 0x0000000000000000
	r14d_689 = (word32) r14_688 (alias)
	SZO_690 = cond(r14d_689)
	C_691 = false
	eax_692 = strlen(rdi_687)
	rax_693 = DPB(rax_683, eax_692, 0) (alias)
	r15_694 = rax_693
	r15d_695 = (word32) r15_694 (alias)
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C218:
	esi_523 = PHI(esi_489, esi_489, esi_489, esi_975)
	rLoc4_524 = PHI(rLoc4_593, rLoc4_593, rLoc4_593, rLoc4)
	rLoc3_525 = PHI(rLoc3_583, rLoc3_583, rLoc3_583, rLoc3_517)
	qwLoc98_526 = PHI(qwLoc98_627, qwLoc98_627, qwLoc98_627, qwLoc98_87)
	rLocA8_527 = PHI(rLocA8_629, rLocA8_629, rLocA8_629, rLocA8)
	r11_528 = PHI(r11_636, r11_636, r11_636, r11_93)
	wLoc82_529 = PHI(wLoc82_605, wLoc82_605, wLoc82_658, wLoc82_976)
	wLoc84_530 = PHI(wLoc84_606, wLoc84_606, wLoc84_659, wLoc84_977)
	rLoc2_531 = PHI(rLoc2_607, rLoc2_607, rLoc2_660, rLoc2_978)
	CZP_532 = PHI(CZP_608, CZP_608, CZP_661, CZP_979)
	P_533 = PHI(P_609, P_609, P_662, P_980)
	O_534 = PHI(O_610, O_610, O_663, O_981)
	qwLoc80_535 = PHI(qwLoc80_611, qwLoc80_611, qwLoc80_664, qwLoc80_982)
	S_536 = PHI(S_612, S_612, S_665, S_983)
	rLoc1_537 = PHI(rLoc1_828, rLoc1_829, rLoc1_678, rLoc1_984)
	rLocE8_538 = PHI(rLocE8_630, rLocE8_630, rLocE8_685, rLocE8_996)
	r14d_539 = PHI(r14d_646, r14d_646, r14d_689, r14d_1003)
	CZ_540 = PHI(CZ_651, CZ_651, CZ_667, CZ_985)
	ebx_541 = PHI(ebx_590, ebx_590, ebx_590, ebx_1010)
	ecx_542 = PHI(ecx_614, ecx_614, ecx_668, ecx_986)
	rcx_543 = PHI(rcx_624, rcx_624, rcx_680, rcx_998)
	cl_544 = PHI(cl_615, cl_615, cl_669, cl_987)
	edx_545 = PHI(edx_638, edx_638, edx_670, edx_988)
	dl_546 = PHI(dl_616, dl_616, dl_671, dl_989)
	SZO_547 = PHI(SZO_822, SZO_822, SZO_690, SZO_1004)
	Z_548 = PHI(Z_827, Z_823, Z_672, Z_990)
	C_549 = PHI(C_824, C_824, C_691, C_1005)
	eax_550 = PHI(eax_634, eax_634, eax_692, eax_1011)
	rdx_rax_551 = PHI(rdx_rax_618, rdx_rax_618, rdx_rax_673, rdx_rax_991)
	edx_eax_552 = PHI(edx_eax_619, edx_eax_619, edx_eax_674, edx_eax_992)
	ah_553 = PHI(ah_620, ah_620, ah_675, ah_993)
	ax_554 = PHI(ax_621, ax_621, ax_676, ax_994)
	al_555 = PHI(al_647, al_647, al_677, al_995)
	rbx_556 = PHI(rbx_589, rbx_589, rbx_589, rbx_1009)
	r14_557 = PHI(r14_645, r14_645, r14_688, r14_1002)
	r15_558 = PHI(r15_639, r15_639, r15_694, r15_1013)
	r15d_559 = PHI(r15d_640, r15d_640, r15d_695, r15d_1014)
	r12_560 = qwLocD0_99
	rsi_561 = qwLocB8_38
	rdx_562 = r15_558
	r12_563 = r12_560 - r15_558
	r12d_564 = (word32) r12_563 (alias)
	r15_565 = r15_558 - r14_557
	SCZO_566 = cond(r15_565)
	rdi_567 = r12_563
	rax_568 = memmove(rdi_567, rsi_561, rdx_562)
	r8_569 = r12_563 + r15_565
// DataOut: ebx fs r10 r11 r12 r13 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 r10:<invalid> al:<invalid> ah:<invalid> cl:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C237:
	sil_100 = PHI(sil_485, sil_1198)
	dwLoc8C_101 = PHI(dwLoc8C, dwLoc8C_1199)
	qwLocA8_102 = PHI(qwLocA8, qwLocA8_1200)
	dil_103 = PHI(dil_82, dil_1201)
	edi_104 = PHI(edi_81, edi_1237)
	r10_105 = PHI(r10_486, r10_1295)
	r10d_106 = PHI(r10d_487, r10d_1296)
	r10b_107 = PHI(r10b_488, r10b_1297)
	esi_108 = PHI(esi_523, esi_1238)
	rLoc4_109 = PHI(rLoc4_524, rLoc4)
	rLoc3_110 = PHI(rLoc3_525, rLoc3)
	qwLoc98_111 = PHI(qwLoc98_526, qwLoc98_1207)
	rLocA8_112 = PHI(rLocA8_527, rLocA8)
	r11_113 = PHI(r11_528, r11_1208)
	wLoc82_114 = PHI(wLoc82_529, wLoc82)
	wLoc84_115 = PHI(wLoc84_530, wLoc84)
	rLoc2_116 = PHI(rLoc2_531, rLoc2)
	CZP_117 = PHI(CZP_532, CZP_1168)
	P_118 = PHI(P_533, P)
	O_119 = PHI(O_534, O_1169)
	qwLoc80_120 = PHI(qwLoc80_535, qwLoc80)
	S_121 = PHI(S_536, S_1170)
	rLoc1_122 = PHI(rLoc1_537, rLoc1)
	rLocE8_123 = PHI(rLocE8_538, rLocE8)
	r8_124 = PHI(r8_569, r8_1256)
	qwLocB0_125 = PHI(qwLocB0, qwLocB0_1257)
	r9_126 = PHI(r9, r9_1210)
	r9d_127 = PHI(r9d, r9d_1211)
	r12d_128 = PHI(r12d_564, r12d_1281)
	r14d_129 = PHI(r14d_539, r14d_1213)
	CZ_130 = PHI(CZ_540, CZ_1214)
	ebx_131 = PHI(ebx_541, ebx_1258)
	rsi_132 = PHI(rsi_561, rsi_1259)
	ecx_133 = PHI(ecx_542, ecx_1240)
	rcx_134 = PHI(rcx_543, rcx_1276)
	cl_135 = PHI(cl_544, cl_1219)
	rdx_136 = PHI(rdx_562, rdx_1284)
	edx_137 = PHI(edx_545, edx_1221)
	dl_138 = PHI(dl_546, dl_1222)
	rdi_139 = PHI(rdi_567, rdi_1261)
	rax_140 = PHI(rax_568, rax_1286)
	eax_141 = PHI(eax_550, eax_1266)
	rdx_rax_142 = PHI(rdx_rax_551, rdx_rax_1282)
	edx_eax_143 = PHI(edx_eax_552, edx_eax_1268)
	ah_144 = PHI(ah_553, ah_1269)
	ax_145 = PHI(ax_554, ax_1270)
	al_146 = PHI(al_555, al_1271)
	SCZO_147 = PHI(SCZO_566, SCZO_1272)
	rbx_148 = PHI(rbx_556, rbx_1273)
	r12_149 = PHI(r12_563, r12_1280)
	r14_150 = PHI(r14_557, r14_14)
	r15_151 = PHI(r15_565, r15_85)
	r15d_152 = PHI(r15d_559, r15d_86)
	SZO_154 = cond(bLocC8 & 0x04)
	Z_155 = (bool) SZO_154 (alias)
	C_156 = false
	branch (bLocC8 & 0x04) != 0x00 l000000000040C318
// DataOut: ebx fs r10 r11 r12 r13 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> edx:<invalid> r14d:<invalid> ecx:0xCCCCCCCD dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C318:
	r8_391 = r8_124 - r12_149
	SCZO_392 = cond(r8_391)
	rdi_393 = r13_94
	r15_394 = 0xFFFFFFFFFFFFFFFF
	r15d_395 = (word32) r15_394 (alias)
	r14_396 = r8_391
	r14d_397 = (word32) r14_396 (alias)
	eax_398 = strlen(rdi_393)
	rax_399 = DPB(rax_140, eax_398, 0) (alias)
	rdi_400 = fp - 0x0000000000000078
	rsi_401 = r12_149
	rcx_402 = 0x0000000000000029
	rdx_403 = r14_396
	qwLocB0_404 = rax_399
	rax_405 = __memcpy_chk(fp - 0x0000000000000078, rsi_401, rdx_403, 0x0000000000000029)
	r9_406 = r12_149 + r14_396
	r9d_407 = (word32) r9_406 (alias)
	r12_408 = r13_94
	r12d_409 = (word32) r12_408 (alias)
	r13_410 = qwLocB0_404
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> edx:<invalid> r14d:<invalid> ecx:0xCCCCCCCD dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C36C:
	r9_411 = PHI(r9_406, r9_471)
	r9d_412 = PHI(r9d_407, r9d_472)
	r14d_413 = PHI(r14d_397, r14d_446)
	CZ_414 = PHI(CZ_130, CZ_441)
	rsi_415 = PHI(rsi_401, rsi_468)
	rdx_416 = PHI(rdx_403, rdx_467)
	rdi_417 = PHI(rdi_400, rdi_469)
	rax_418 = PHI(rax_405, rax_470)
	eax_419 = PHI(eax_398, eax_452)
	rdx_rax_420 = PHI(rdx_rax_142, rdx_rax_453)
	ah_421 = PHI(ah_144, ah_455)
	ax_422 = PHI(ax_145, ax_456)
	al_423 = PHI(al_146, al_457)
	SCZO_424 = PHI(SCZO_392, SCZO_466)
	rbp_425 = PHI(rbp_67, rbp_437)
	r14_426 = PHI(r14_396, r14_445)
	r15_427 = PHI(r15_394, r15_443)
	r15d_428 = PHI(r15d_395, r15d_444)
	edx_429 = (word32) Mem0[rbp_425 + 0x0000000000000000:byte]
	rdx_430 = DPB(rdx_416, edx_429, 0) (alias)
	rdx_rax_431 = DPB(rdx_rax_420, edx_429, 64) (alias)
	edx_eax_432 = SEQ(edx_429, eax_419) (alias)
	dl_433 = (byte) edx_429 (alias)
	SZO_434 = cond(dl_433 & dl_433)
	Z_435 = (bool) SZO_434 (alias)
	C_436 = false
	branch (dl_433 & dl_433) == 0x00 l000000000040C383
// DataOut: dl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x0000000000000029 r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0x29 edx:<invalid> r15d:<invalid> ah:<invalid> r14d:<invalid> ecx:0x00000029 dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C374:
	SCZO_475 = cond(dl_433 - 0x7E)
	CZ_476 = SCZO_475 (alias)
	r15d_477 = (word32) dl_433
	r15_478 = DPB(r15_427, r15d_477, 0) (alias)
	branch dl_433 <=u 0x7E l000000000040C37F
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x0000000000000029 r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0x29 r15d:<invalid> ah:<invalid> r14d:<invalid> ecx:0x00000029 dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C37B_1:
	r15_483 = r14_426
	r15d_484 = (word32) r15_483 (alias)
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x0000000000000029 r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0x29 ah:<invalid> r14d:<invalid> ecx:0x00000029 dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C37F:
	r15_479 = PHI(r15_478, r15_483)
	r15d_480 = PHI(r15d_477, r15d_484)
	rbp_481 = rbp_425 + 0x0000000000000001
	SCZO_482 = cond(rbp_481)
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x0000000000000029 r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0x29 ah:<invalid> r14d:<invalid> ecx:0x00000029 dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C383:
	rbp_437 = PHI(rbp_425, rbp_481)
	r15_438 = PHI(r15_427, r15_479)
	r15d_439 = PHI(r15d_428, r15d_480)
	SCZO_440 = cond(r15_438 - r14_426)
	CZ_441 = SCZO_440 (alias)
	rax_442 = fp - 0x0000000000000078
	branch r15_438 <=u r14_426 l000000000040C38F
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x0000000000000029 r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:0x29 ah:<invalid> r14d:<invalid> ecx:0x00000029 dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C38B_1:
	r15_473 = r14_426
	r15d_474 = (word32) r15_473 (alias)
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:fp - 0x0000000000000078 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x0000000000000029 r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:0x29 ah:<invalid> r14d:<invalid> ecx:0x00000029 dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C38F:
	r15_443 = PHI(r15_438, r15_473)
	r15d_444 = PHI(r15d_439, r15d_474)
	r14_445 = r14_426 - r15_443
	r14d_446 = (word32) r14_445 (alias)
	r9_447 = r9_411 - r15_443
	rdx_448 = r15_443
	rsi_449 = fp - 0x0000000000000078 + r14_445
	rdi_450 = r9_447
	rax_451 = memcpy(rdi_450, rsi_449, rdx_448)
	eax_452 = (word32) rax_451 (alias)
	rdx_rax_453 = SEQ(rdx_448, rax_451) (alias)
	edx_eax_454 = rax_451 (alias)
	ah_455 = SLICE(rax_451, byte, 8) (alias)
	ax_456 = (word16) rax_451 (alias)
	al_457 = (byte) rax_451 (alias)
	SZO_458 = cond(r14_445 & r14_445)
	Z_459 = (bool) SZO_458 (alias)
	C_460 = false
	r9_461 = rax_451
	r9d_462 = (word32) r9_461 (alias)
	branch (r14_445 & r14_445) != 0x0000000000000000 l000000000040C358
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:fp - 0x0000000000000078 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x0000000000000029 r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:0x29 ah:<invalid> r14d:<invalid> ecx:0x00000029 dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C358:
	r9_465 = r9_461 - r13_410
	SCZO_466 = cond(r9_465)
	rdx_467 = r13_410
	rsi_468 = r12_408
	rdi_469 = r9_465
	rax_470 = memcpy(rdi_469, rsi_468, rdx_467)
	r9_471 = rax_470
	r9d_472 = (word32) r9_471 (alias)
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x0000000000000029 r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:0x29 ah:<invalid> r14d:<invalid> ecx:0x00000029 dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C3AC:
	r12_463 = rax_451
	r12d_464 = (word32) r12_463 (alias)
// DataOut: ebx fs r10 r11 r12 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x0000000000000029 r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:0x29 ah:<invalid> r14d:<invalid> ecx:0x00000029 dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C242:
	r8_157 = PHI(r8_391, r8_124)
	qwLocB0_158 = PHI(qwLocB0_404, qwLocB0_125)
	r9_159 = PHI(r9_461, r9_126)
	r9d_160 = PHI(r9d_462, r9d_127)
	r12d_161 = PHI(r12d_464, r12d_128)
	r14d_162 = PHI(r14d_446, r14d_129)
	CZ_163 = PHI(CZ_441, CZ_130)
	rsi_164 = PHI(rsi_449, rsi_132)
	rcx_165 = PHI(rcx_402, rcx_134)
	rdx_166 = PHI(rdx_448, rdx_136)
	edx_167 = PHI(edx_429, edx_137)
	dl_168 = PHI(dl_433, dl_138)
	rdi_169 = PHI(rdi_450, rdi_139)
	rax_170 = PHI(rax_451, rax_140)
	eax_171 = PHI(eax_452, eax_141)
	rdx_rax_172 = PHI(rdx_rax_453, rdx_rax_142)
	edx_eax_173 = PHI(edx_eax_454, edx_eax_143)
	ah_174 = PHI(ah_455, ah_144)
	ax_175 = PHI(ax_456, ax_145)
	al_176 = PHI(al_457, al_146)
	SCZO_177 = PHI(SCZO_440, SCZO_147)
	rbp_178 = PHI(rbp_437, rbp_67)
	r12_179 = PHI(r12_463, r12_149)
	r13_180 = PHI(r13_410, r13_94)
	r14_181 = PHI(r14_445, r14_150)
	r15_182 = PHI(r15_443, r15_151)
	r15d_183 = PHI(r15d_444, r15d_152)
	SZO_184 = cond(bLocC8 & 0x80)
	Z_185 = (bool) SZO_184 (alias)
	C_186 = false
	branch (bLocC8 & 0x80) == 0x00 l000000000040C2BA
// DataOut: ebx fs r10 r11 r12 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C249:
	SCZO_235 = cond(ebx_131 - 0xFFFFFFFF)
	Z_236 = (bool) SCZO_235 (alias)
	branch ebx_131 == 0xFFFFFFFF l000000000040C618
// DataOut: ebx fs r10 r11 r12 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C618:
	rdx_352 = qwLocC0_43
	edx_353 = (word32) rdx_352 (alias)
	rdx_rax_354 = SEQ(rdx_352, rax_170) (alias)
	edx_eax_355 = rdx_352 (alias)
	dl_356 = (byte) rdx_352 (alias)
	SCZO_357 = cond(rdx_352 - 0x0000000000000001)
	CZ_358 = SCZO_357 (alias)
	branch rdx_352 <=u 0x0000000000000001 l000000000040C7A9
// DataOut: fs r10 r11 r12 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C7A9:
	rbx_387 = 0x0000000000000000
	ebx_388 = (word32) rbx_387 (alias)
	SZO_389 = cond(ebx_388)
	C_390 = false
// DataOut: ebx fs r10 r11 r12 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C8(32) Local -00D0(64)

l000000000040C627:
	r14_359 = (uint64) dwLocC4_59
	r14d_360 = (word32) r14_359 (alias)
	rbx_361 = 0x0000000000000001
	ebx_362 = (word32) rbx_361 (alias)
	rax_363 = 0x0000000000000001
	eax_364 = (word32) rax_363 (alias)
	rdx_rax_365 = SEQ(rdx_352, rax_363) (alias)
	edx_eax_366 = rax_363 (alias)
	ah_367 = SLICE(rax_363, byte, 8) (alias)
	ax_368 = (word16) rax_363 (alias)
	al_369 = (byte) rax_363 (alias)
// DataOut: ebx fs r10 r11 r12 r14 r8 r9 rax rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C8(32) Local -00D0(64)

l000000000040C640:
	ebx_370 = PHI(ebx_362, ebx_384)
	Z_371 = PHI(Z_236, Z_386)
	rax_372 = PHI(rax_363, rax_374)
	rbx_373 = PHI(rbx_361, rbx_383)
	rax_374 = rax_372 *s r14_359
	eax_375 = (word32) rax_374 (alias)
	rdx_rax_376 = SEQ(rdx_352, rax_374) (alias)
	edx_eax_377 = rax_374 (alias)
	ah_378 = SLICE(rax_374, byte, 8) (alias)
	ax_379 = (word16) rax_374 (alias)
	al_380 = (byte) rax_374 (alias)
	SCZO_381 = cond(rdx_352 - rax_374)
	CZ_382 = SCZO_381 (alias)
	branch rdx_352 <=u rax_374 l000000000040C252
// DataOut: ebx fs r10 r11 r12 r14 r8 r9 rax rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C8(32) Local -00D0(64)

l000000000040C64D:
	rbx_383 = (uint64) (ebx_370 + 0x00000001)
	ebx_384 = (word32) rbx_383 (alias)
	SCZO_385 = cond(ebx_384 - 0x00000008)
	Z_386 = (bool) SCZO_385 (alias)
	branch ebx_384 != 0x00000008 l000000000040C640
// DataOut: ebx fs r10 r11 r12 r14 r8 r9 rax rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C8(32) Local -00D0(64)

l000000000040C655:
// DataOut: ebx fs r10 r11 r12 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C8(32) Local -00D0(64)

l000000000040C252:
	r14d_237 = PHI(r14d_162, r14d_360, r14d_360, r14d_162)
	CZ_238 = PHI(CZ_163, CZ_382, CZ_382, CZ_358)
	ebx_239 = PHI(ebx_131, ebx_370, ebx_384, ebx_388)
	rdx_240 = PHI(rdx_166, rdx_352, rdx_352, rdx_352)
	edx_241 = PHI(edx_167, edx_353, edx_353, edx_353)
	dl_242 = PHI(dl_168, dl_356, dl_356, dl_356)
	SCZO_243 = PHI(SCZO_235, SCZO_381, SCZO_385, SCZO_357)
	rbx_244 = PHI(rbx_148, rbx_373, rbx_383, rbx_387)
	r14_245 = PHI(r14_181, r14_359, r14_359, r14_181)
	rax_246 = (uint64) dwLocC8_41
	eax_247 = (word32) rax_246 (alias)
	rcx_248 = (uint64) ebx_239
	ecx_249 = (word32) rcx_248 (alias)
	rax_250 = (uint64) (eax_247 & 0x00000100)
	eax_251 = (word32) rax_250 (alias)
	rdx_rax_252 = SEQ(rdx_240, rax_250) (alias)
	edx_eax_253 = rax_250 (alias)
	ah_254 = SLICE(rax_250, byte, 8) (alias)
	ax_255 = (word16) rax_250 (alias)
	al_256 = (byte) rax_250 (alias)
	rcx_257 = (uint64) (ecx_249 | eax_251)
	ecx_258 = (word32) rcx_257 (alias)
	SZO_259 = cond(ecx_258)
	Z_260 = (bool) SZO_259 (alias)
	C_261 = false
	branch ecx_258 == 0x00000000 l000000000040C2BA
// DataOut: eax ebx fs r10 r11 r12 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C8(0) Local -00D0(64)

l000000000040C261:
	SZO_262 = cond(bLocC8 & 0x40)
	Z_263 = (bool) SZO_262 (alias)
	C_264 = false
	branch (bLocC8 & 0x40) != 0x00 l000000000040C3E8
// DataOut: eax ebx fs r10 r11 r12 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00D0(64)

l000000000040C3E8:
	rcx_348 = qwLocB8_38
	rsi_349 = rcx_348 + 0x0000000000000289
	Mem350[rcx_348 + 0x0000000000000288:byte] = 0x20
	qwLocD0_351 = rsi_349
// DataOut: eax ebx fs r10 r11 r12 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C26C:
	rsi_265 = PHI(rsi_164, rsi_349)
	rcx_266 = PHI(rcx_257, rcx_348)
	qwLocD0_267 = PHI(qwLocD0_99, qwLocD0_351)
	SZO_268 = cond(ebx_239 & ebx_239)
	Z_269 = (bool) SZO_268 (alias)
	C_270 = false
	branch (ebx_239 & ebx_239) == 0x00000000 l000000000040C7EB
// DataOut: eax ebx fs r10 r11 r12 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C7EB:
	rdx_343 = qwLocD0_267
	edx_344 = (word32) rdx_343 (alias)
	rdx_rax_345 = SEQ(rdx_343, rax_250) (alias)
	edx_eax_346 = rdx_343 (alias)
	dl_347 = (byte) rdx_343 (alias)
// DataOut: eax ebx fs r10 r11 r12 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32)

l000000000040C274:
	rcx_314 = qwLocD0_267
	rdx_315 = rcx_314 + 0x0000000000000001
	edx_316 = (word32) rdx_315 (alias)
	rdx_rax_317 = SEQ(rdx_315, rax_250) (alias)
	edx_eax_318 = rdx_315 (alias)
	dl_319 = (byte) rdx_315 (alias)
	rcx_320 = (uint64) dwLoc90_51
	ecx_321 = (word32) rcx_320 (alias)
	SZO_322 = cond(ecx_321 & ecx_321)
	Z_323 = (bool) SZO_322 (alias)
	C_324 = false
	branch (ecx_321 & ecx_321) == 0x00000000 l000000000040C3D0
// DataOut: eax ebx fs r10 r11 r12 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C3D0:
	SCZO_338 = cond(ebx_239 - 0x00000001)
	Z_339 = (bool) SCZO_338 (alias)
	rcx_340 = 0x000000000000006B
	ecx_341 = (word32) rcx_340 (alias)
	cl_342 = (byte) rcx_340 (alias)
	branch ebx_239 != 0x00000001 l000000000040C289
// DataOut: cl eax ebx fs r10 r11 r12 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C3DE:
// DataOut: cl eax ebx fs r10 r11 r12 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x000000000000006B r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0x6B edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:0x0000006B dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C289:
	Z_332 = PHI(Z_323, Z_339)
	SCZO_333 = PHI(SCZO_243, SCZO_338)
	rcx_334 = (int64) ebx_239
	ecx_335 = (word32) Mem0[rcx_334 + 0x0000000000415F78:byte]
	rcx_336 = DPB(rcx_334, ecx_335, 0) (alias)
	cl_337 = (byte) ecx_335 (alias)
// DataOut: cl eax ebx fs r10 r11 r12 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C293:
	ecx_325 = PHI(ecx_335, ecx_341)
	rcx_326 = PHI(rcx_336, rcx_340)
	cl_327 = PHI(cl_337, cl_342)
	Z_328 = PHI(Z_332, Z_339)
	SCZO_329 = PHI(SCZO_333, SCZO_338)
	rdi_330 = qwLocD0_267
	Mem331[rdi_330:byte] = cl_327
// DataOut: eax ebx fs r10 r11 r12 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> ecx:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32)

l000000000040C29A:
	ecx_271 = PHI(ecx_325, ecx_258)
	rcx_272 = PHI(rcx_326, rcx_266)
	cl_273 = PHI(cl_327, cl_135)
	rdx_274 = PHI(rdx_315, rdx_343)
	edx_275 = PHI(edx_316, edx_344)
	dl_276 = PHI(dl_319, dl_347)
	rdi_277 = PHI(rdi_330, rdi_169)
	rdx_rax_278 = PHI(rdx_rax_317, rdx_rax_345)
	edx_eax_279 = PHI(edx_eax_318, edx_eax_346)
	SCZO_280 = PHI(SCZO_329, SCZO_243)
	SZO_281 = cond(eax_251 & eax_251)
	Z_282 = (bool) SZO_281 (alias)
	C_283 = false
	branch (eax_251 & eax_251) == 0x00000000 l000000000040C7F5
// DataOut: ebx fs r10 r11 r12 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> ecx:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32)

l000000000040C7F5:
	qwLocD0_313 = rdx_274
// DataOut: fs r10 r11 r12 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> ecx:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -00D0(64)

l000000000040C2A2:
	rax_284 = (uint64) dwLoc90_51
	eax_285 = (word32) rax_284 (alias)
	rdx_rax_286 = SEQ(rdx_274, rax_284) (alias)
	edx_eax_287 = rax_284 (alias)
	SZO_288 = cond(eax_285 & eax_285)
	Z_289 = (bool) SZO_288 (alias)
	C_290 = false
	branch (eax_285 & eax_285) != 0x00000000 l000000000040C3B8
// DataOut: ebx fs r10 r11 r12 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> ecx:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64)

l000000000040C3B8:
	SZO_303 = cond(ebx_239 & ebx_239)
	Z_304 = (bool) SZO_303 (alias)
	C_305 = false
	branch (ebx_239 & ebx_239) == 0x00000000 l000000000040C2AE
// DataOut: fs r10 r11 r12 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> ecx:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64)

l000000000040C3C0:
	Mem306[rdx_274:byte] = 0x69
	rdx_307 = rdx_274 + 0x0000000000000001
	edx_308 = (word32) rdx_307 (alias)
	rdx_rax_309 = SEQ(rdx_307, rax_284) (alias)
	edx_eax_310 = rdx_307 (alias)
	dl_311 = (byte) rdx_307 (alias)
	SCZO_312 = cond(rdx_307)
// DataOut: fs r10 r11 r12 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> ecx:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64)

l000000000040C2AE:
	rdx_291 = PHI(rdx_274, rdx_274, rdx_307)
	edx_292 = PHI(edx_275, edx_275, edx_308)
	dl_293 = PHI(dl_276, dl_276, dl_311)
	SZO_294 = PHI(SZO_288, SZO_303, SZO_303)
	Z_295 = PHI(Z_289, Z_304, Z_304)
	C_296 = PHI(C_290, C_305, C_305)
	rdx_rax_297 = PHI(rdx_rax_286, rdx_rax_286, rdx_rax_309)
	edx_eax_298 = PHI(edx_eax_287, edx_eax_287, edx_eax_310)
	SCZO_299 = PHI(SCZO_280, SCZO_280, SCZO_312)
	rax_300 = rdx_291 + 0x0000000000000001
	Mem301[rdx_291:byte] = 0x42
	qwLocD0_302 = rax_300
// DataOut: fs r10 r11 r12 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> ecx:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -00D0(64)

l000000000040C2BA:
	r14d_187 = PHI(r14d_162, r14d_237, r14d_237, r14d_237)
	CZ_188 = PHI(CZ_163, CZ_238, CZ_238, CZ_238)
	ebx_189 = PHI(ebx_131, ebx_239, ebx_239, ebx_239)
	rsi_190 = PHI(rsi_164, rsi_164, rsi_265, rsi_265)
	ecx_191 = PHI(ecx_133, ecx_258, ecx_271, ecx_271)
	rcx_192 = PHI(rcx_165, rcx_257, rcx_272, rcx_272)
	cl_193 = PHI(cl_135, cl_135, cl_273, cl_273)
	rdx_194 = PHI(rdx_166, rdx_240, rdx_291, rdx_274)
	edx_195 = PHI(edx_167, edx_241, edx_292, edx_275)
	dl_196 = PHI(dl_168, dl_242, dl_293, dl_276)
	qwLocD0_197 = PHI(qwLocD0_99, qwLocD0_99, qwLocD0_302, qwLocD0_313)
	SCZO_198 = PHI(SCZO_177, SCZO_243, SCZO_299, SCZO_280)
	rbx_199 = PHI(rbx_148, rbx_244, rbx_244, rbx_244)
	r14_200 = PHI(r14_181, r14_245, r14_245, r14_245)
	rax_201 = qwLocD0_197
	rdi_202 = qwLoc40_47
	rdi_203 = rdi_202 ^ Mem0[fs:0x00000028:word64]
	SZO_204 = cond(rdi_203)
	Z_205 = (bool) SZO_204 (alias)
	C_206 = false
	Mem207[rax_201:byte] = 0x00
	rax_208 = r12_179
	eax_209 = (word32) rax_208 (alias)
	rdx_rax_210 = SEQ(rdx_194, rax_208) (alias)
	edx_eax_211 = rax_208 (alias)
	ah_212 = SLICE(rax_208, byte, 8) (alias)
	ax_213 = (word16) rax_208 (alias)
	al_214 = (byte) rax_208 (alias)
	branch rdi_203 != 0x0000000000000000 l000000000040C7E6
// DataOut: fs r10 r11 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32)

l000000000040C7E6:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040C2DC:
	rsp_215 = fp - 0x0000000000000030
	SCZO_216 = cond(fp - 0x0000000000000030)
	rbx_217 = qwLoc30_30
	rsp_218 = fp - 0x0000000000000028
	rbp_219 = qwLoc28_27
	rsp_220 = fp - 0x0000000000000020
	r12_221 = qwLoc20_21
	rsp_222 = fp - 0x0000000000000018
	r13_223 = qwLoc18_18
	rsp_224 = fp - 0x0000000000000010
	r14_225 = qwLoc10_12
	rsp_226 = fp - 0x0000000000000008
	r15_227 = qwLoc08_4
	r15d_228 = (word32) r15_227 (alias)
	rsp_229 = fp
	return rax_208
// DataOut: fs r10 r11 r15d r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040BD70_exit:
	use r8_157 (=> r8Out)
	use r9_159 (=> r9Out)
	use r10_105 (=> r10Out)
	use r11_113 (=> r11Out)
	use r15d_228 (=> r15dOut)
// DataOut: r10 r11 r15d r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> r14:r14 r12:r12 rbx:rbx rcx:<invalid> r15:r15 r13:r13 rdi:<invalid> eax:<invalid> rbp:rbp r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word32 fn000000000040C810(word64 rdx, word64 rdi, word64 r8, ptr64 & ebxOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rdi rdx
// LiveOut: eax ebx r14 r14b r15 r8 r9
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi si sil
// Preserved: r12 r13 rbp rbx rsp
fn000000000040C810_entry:
	*r14Out = r14
	*r15Out = r15
	*r9Out = r9
	*r8Out = r8
// DataOut: fs r10 r11 r14 r14b r15 r8 r9 rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040C810:
	word32 ebp_100
	word64 rbp_109
	word64 rdx_148
	word32 eax_112
	word64 rbx_121 = rdi
	branch rdi == 0x0000000000000000 l000000000040C910
// DataOut: fs r10 r11 r12 r14 r14b r15 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040C910:
	word64 rax_251 = getenv(0x00000000004138E4)
	rbx_121 = rax_251
	branch rax_251 != 0x0000000000000000 l000000000040C82C
// DataOut: fs r10 r11 r12 r14 r14b r15 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:rdi -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64)

l000000000040C926:
	word64 rax_258 = getenv(0x0000000000415F24)
	rbx_121 = rax_258
	branch rax_258 != 0x0000000000000000 l000000000040C82C
// DataOut: fs r10 r11 r12 r14 r14b r15 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rdi:0x00000000004138E4 rax:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64)

l000000000040C93C:
	word64 rdx_273 = (uint64) ((word32) (0x0000000000000000 - (getenv(0x0000000000415F2E) <u 0x0000000000000001)) & 0x00000200)
	Mem277[rdx:word64] = rdx_273 + 512
	rbp_109 = 0x0000000000000000
	ebp_100 = 0x00000000 (alias)
	rdx_148 = rdx_273 + 512
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rdi:0x0000000000415F24 rax:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C82C:
	rbp_109 = 0x0000000000000000
	word32 ebp_124 = 0x00000000
	branch Mem0[rbx_121:byte] == 0x27 l000000000040C8A0
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rdi:<invalid> rax:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64)

l000000000040C8A0:
	rbx_121 = rbx_121 + 0x0000000000000001
	rbp_109 = 0x0000000000000004 (alias)
	ebp_124 = 0x00000004 (alias)
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64)

l000000000040C833:
	word64 rax_138 = fn0000000000409E50(0x0000000000000004, 0x0000000000415F50, 0x0000000000415F60, rbx_121)
	byte al_141 = (byte) rax_138
	branch (word32) rax_138 < 0x00000000 l000000000040C8B0
// DataOut: al ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> bpl:0x04 rdi:<invalid> rax:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64)

l000000000040C8B0:
	word64 r9_171
	byte r14b_172
	eax_112 = fn0000000000411360(0x00000000, fp - 0x0000000000000030, rbx_121, 0x0000000000415F3E, out ebp_100, out r8, out r9_171, out r14b_172)
	branch eax_112 != 0x00000000 l000000000040C968
// DataOut: eax ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:0x0000000000000004 rdx:<invalid> rsi:<invalid> rdi:<invalid> bpl:0x04 rax:<invalid> eax:<invalid> ecx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C968:
	Mem241[rbp_109:word32] = 0x00000000
	rdx_148 = Mem241[rdx:word64]
// DataOut: eax fs r10 r11 r12 r14 r14b r15 r8 r9 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> bpl:0x04 rax:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C8D0:
	branch (byte) (uint64) ((word32) Mem0[rbx_121:byte] - 0x00000030) <=u 0x09 l000000000040C907
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> bpl:0x04 rax:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C8DA:
	word64 rdx_200 = Mem0[fp - 0x0000000000000030:word64]
	branch rbx_121 != rdx_200 l000000000040C8F9
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C8F9:
	rbx_121 = rbx_121 + 0x0000000000000001
	branch (byte) (uint64) ((word32) Mem0[rbx_121:byte] - 0x00000030) >u 0x09 l000000000040C8F0
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C8F0:
	branch rbx_121 == rdx_200 l000000000040C980
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C8E4:
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C980:
	branch Mem0[rdx_200 - 0x0000000000000001:byte] == 0x42 l000000000040C998
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C998:
	rbp_109 = (uint64) (ebp_100 | 0x00000180)
	ebp_100 = (word32) rbp_109 (alias)
	branch Mem0[rdx_200 - 0x0000000000000002:byte] != 0x69 l000000000040C907
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C9A8:
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C986:
	ebp_100 = DPB(ebp_100, 0x84, 0) (alias)
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C98A:
	rbp_109 = (uint64) (ebp_100 | 0x00000020)
	ebp_100 = (word32) rbp_109 (alias)
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C907:
	rdx_148 = Mem0[rdx:word64]
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C84E:
	Mem147[rdx:word64] = 0x0000000000000001
	rbp_109 = (uint64) (ebp_124 | Mem147[DPB(rax_138, (int16) al_141, 0) * 0x0000000000000004 + 0x00415F50:word32])
	rdx_148 = 0x0000000000000001
	ebp_100 = (word32) rbp_109 (alias)
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:0x0000000000000004 rdx:<invalid> rsi:<invalid> rdi:<invalid> bpl:0x04 rax:<invalid> eax:<invalid> ecx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C864:
	Mem110[rbp_109:word32] = ebp_100
	eax_112 = 0x00000000 (alias)
// DataOut: eax fs r10 r11 r12 r14 r14b r15 r8 r9 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:(int16) al rax:<invalid> bpl:<invalid> r8:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C86A:
	branch rdx_148 != 0x0000000000000000 l000000000040C894
// DataOut: eax fs r10 r11 r12 r14 r14b r15 r8 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C86F:
	Mem87[rdx:word64] = (uint64) ((word32) (0x0000000000000000 - (getenv(0x0000000000415F2E) <u 0x0000000000000001)) & 0x00000200)
	word64 r8_84
	*r8Out = r8 + 512
	eax_112 = 0x00000004 (alias)
// DataOut: eax fs r10 r11 r14 r14b r15 r8 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000040C894:
	word32 ebx_62
	*ebxOut = (word32) Mem0[fp - 0x0000000000000020:word64]
	return eax_112
// DataOut: eax ebx fs r10 r11 r13b r14 r14b r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

fn000000000040C810_exit:
// DataOut: eax ebx r14 r14b r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp r13:r13 r12:r12 rbx:rbx rbp:rbp rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> cl:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13



word64 fn000000000040C9B0(word64 rsi, word32 edi, word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r8 rsi
// LiveOut: rax
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: r12 rbp rbx rsp
fn000000000040C9B0_entry:
// DataOut: ebp edi fs r10 r11 r14 r15 r15d r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040C9B0:
	word32 ebp_10 = (word32) (uint64) edi
	word64 rbx_15 = Mem0[0x000000000061B1F8:word64]
	branch rbx_15 != 0x0000000000000000 l000000000040C9D1
// DataOut: ebp fs r10 r11 r14 r15 r15d r8 r9 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(32)

l000000000040C9D1:
	branch Mem0[rbx_15:word32] != ebp_10 l000000000040C9C8
// DataOut: ebp fs r10 r11 r14 r15 r15d r8 r9 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0010(32)

l000000000040C9C8:
	rbx_15 = Mem0[rbx_15 + 0x0000000000000008:word64]
	branch rbx_15 == 0x0000000000000000 l000000000040C9F0
// DataOut: ebp fs r10 r11 r14 r15 r15d r8 r9 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0010(32)

l000000000040C9C2:
// DataOut: ebp fs r10 r11 r14 r15 r15d r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0010(32)

l000000000040C9F0:
	word64 r12_45 = 0x0000000000416919
	word64 rax_47 = getpwuid((uint64) ebp_10)
	word64 rdi_51 = 0x0000000000000011
	branch rax_47 == 0x0000000000000000 l000000000040CA16
// DataOut: ebp fs r10 r11 r12 r14 r15 r15d r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0010(32)

l000000000040CA07:
	r12_45 = Mem0[r8:word64]
	rdi_51 = DPB(rax_47, strlen(r12_45), 0) + 0x0000000000000011
// DataOut: ebp fs r10 r11 r12 r14 r15 r15d r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> rdi:0x0000000000000011 r12:0x0000000000416919 rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0010(32)

l000000000040CA16:
	word64 rax_60 = fn0000000000410C40(rsi, rdi_51)
	Mem62[rax_60:word32] = ebp_10
	strcpy(rax_60 + 0x0000000000000010, r12_45)
	word64 rax_66 = Mem62[0x000000000061B1F8:word64]
	Mem67[0x000000000061B1F8:word64] = rax_60
	Mem68[rax_60 + 0x0000000000000008:word64] = rax_66
	rbx_15 = rax_60
// DataOut: fs r10 r11 r14 r15 r15d r8 r9 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> rdi:<invalid> r12:<invalid> rax:<invalid> eax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0010(32)

l000000000040C9D5:
	word64 rax_26 = 0x0000000000000000
	word64 rdx_30 = rbx_15 + 0x0000000000000010
	branch Mem0[rbx_15 + 0x0000000000000010:byte] == 0x00 l000000000040C9E7
// DataOut: ebp fs r10 r11 r14 r15 r15d r8 r9 rax rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> rdi:<invalid> r12:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040C9E3_1:
	rax_26 = rdx_30
// DataOut: ebp fs r10 r11 r14 r15 r15d r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rdx:<invalid> r12:r12 rdi:<invalid> eax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040C9E7:
	return rax_26
// DataOut: ebp fs r10 r11 r14 r15 r15d r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rdx:<invalid> r12:r12 rdi:<invalid> eax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040C9B0_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rdx:<invalid> r12:r12 rdi:<invalid> eax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040CB40(word64 rsi, word32 edi, word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r8 rsi
// LiveOut: rax
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: r12 rbp rbx rsp
fn000000000040CB40_entry:
// DataOut: edi fs r10 r11 r13d r15 r15d r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040CB40:
	word32 ebp_10 = (word32) (uint64) edi
	word64 rbx_15 = Mem0[0x000000000061B1E8:word64]
	branch rbx_15 != 0x0000000000000000 l000000000040CB61
// DataOut: ebp fs r10 r11 r13d r15 r15d r8 r9 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040CB61:
	branch Mem0[rbx_15:word32] != ebp_10 l000000000040CB58
// DataOut: ebp fs r10 r11 r13d r15 r15d r8 r9 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040CB58:
	rbx_15 = Mem0[rbx_15 + 0x0000000000000008:word64]
	branch rbx_15 == 0x0000000000000000 l000000000040CB80
// DataOut: ebp fs r10 r11 r13d r15 r15d r8 r9 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040CB52:
// DataOut: ebp fs r10 r11 r13d r15 r15d r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040CB80:
	word64 r12_44 = 0x0000000000416919
	word64 rax_46 = getgrgid((uint64) ebp_10)
	word64 rdi_50 = 0x0000000000000011
	branch rax_46 == 0x0000000000000000 l000000000040CBA6
// DataOut: ebp fs r10 r11 r12 r13d r15 r15d r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040CB97:
	r12_44 = Mem0[r8:word64]
	rdi_50 = DPB(rax_46, strlen(r12_44), 0) + 0x0000000000000011
// DataOut: ebp fs r10 r11 r12 r13d r15 r15d r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> rdi:0x0000000000000011 r12:0x0000000000416919 rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040CBA6:
	word64 rax_59 = fn0000000000410C40(rsi, rdi_50)
	Mem61[rax_59:word32] = ebp_10
	strcpy(rax_59 + 0x0000000000000010, r12_44)
	word64 rax_65 = Mem61[0x000000000061B1E8:word64]
	Mem66[0x000000000061B1E8:word64] = rax_59
	Mem67[rax_59 + 0x0000000000000008:word64] = rax_65
	rbx_15 = rax_59
// DataOut: fs r10 r11 r13d r15 r15d r8 r9 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> rdi:<invalid> r12:<invalid> rax:<invalid> eax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040CB65:
	word64 rax_26 = 0x0000000000000000
	word64 rdx_30 = rbx_15 + 0x0000000000000010
	branch Mem0[rbx_15 + 0x0000000000000010:byte] == 0x00 l000000000040CB77
// DataOut: fs r10 r11 r13d r15 r15d r8 r9 rax rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> rdi:<invalid> r12:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040CB73_1:
	rax_26 = rdx_30
// DataOut: fs r10 r11 r13d r15 r15d r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rdx:<invalid> r12:r12 rdi:<invalid> eax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040CB77:
	return rax_26
// DataOut: fs r10 r11 r13d r15 r15d r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rdx:<invalid> r12:r12 rdi:<invalid> eax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040CB40_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rdx:<invalid> r12:r12 rdi:<invalid> eax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040CCD0(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil rdi rsi
// LiveOut: rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r8 r8b r8d r8w rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040CCD0_entry:
// DataOut: dil fs r11 r13 r15 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CCD0:
	Mem8[rsi + 0x0000000000000014:byte] = 0x00
	word64 rcx_25 = rsi + 0x0000000000000014
	branch rdi < 0x0000000000000000 l000000000040CD28
// DataOut: dil fs r11 r13 r15 rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD28:
// DataOut: dil fs r11 r13 r15 rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:rsi + 0x0000000000000014 rsi:0x0000000066666667

l000000000040CD30:
	word64 rdx_67 = (rdi *s 0x0000000066666667 >> 0x0000000000000002) - (rdi >> 0x000000000000003F)
	rcx_25 = rcx_25 - 0x0000000000000001
	Mem78[rcx_25:byte] = (byte) (uint64) (rdx_67 * 0x000000000000000A + 0x0000000000000030 - edi)
	rdi = rdx_67
	edi = (word32) rdx_67 (alias)
	branch rdx_67 != 0x0000000000000000 l000000000040CD30
// DataOut: dil fs r11 r13 r15 rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x0000000000000030 r8:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> rdi:<invalid>

l000000000040CD5B:
	Mem82[rcx_25 - 0x0000000000000001:byte] = 0x2D
	return rcx_25 - 0x0000000000000001
// DataOut: fs r11 r13 r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x0000000000000030 r8:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> rdi:<invalid>

l000000000040CCE7:
// DataOut: dil fs r11 r13 r15 rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:rsi + 0x0000000000000014 rsi:0x0000000066666667

l000000000040CCF0:
	word64 rdx_34 = (rdi *s 0x0000000066666667 >> 0x0000000000000002) - (rdi >> 0x000000000000003F)
	rcx_25 = rcx_25 - 0x0000000000000001
	Mem44[rcx_25:byte] = (byte) (uint64) ((word32) (rdi - rdx_34 * 0x000000000000000A) + 0x00000030)
	rdi = rdx_34
	branch rdx_34 != 0x0000000000000000 l000000000040CCF0
// DataOut: dil fs r11 r13 r15 rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

l000000000040CD20:
	return rcx_25
// DataOut: fs r11 r13 r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

fn000000000040CCD0_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:<invalid> rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid> r8:0x0000000066666667 eax:<invalid>



word64 fn000000000040CD70(word64 rsi, word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil rdi rsi
// LiveOut: rax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040CD70_entry:
// DataOut: dil fs r10 r11 r12 r13 r13d r14d r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD70:
	Mem4[rsi + 0x0000000000000014:byte] = 0x00
	word64 rcx_10 = rsi + 0x0000000000000014
	word64 rsi_5
	*rsiOut = 0x00000000CCCCCCCD
// DataOut: dil fs r10 r11 r12 r13 r13d r14d r15 r8 r9 rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD88:
	word64 rdx_rax_11 = rdi *u 0x00000000CCCCCCCD
	rcx_10 = rcx_10 - 0x0000000000000001
	Mem23[rcx_10:byte] = (byte) (uint64) ((word32) (rdi - ((rdx_rax_11 >>u 0x0000000000000003) + (rdx_rax_11 >>u 0x0000000000000003) * 0x0000000000000004) * 0x0000000000000002) + 0x00000030)
	rdi = rdx_rax_11 >>u 0x0000000000000003
	branch rdx_rax_11 >>u 0x0000000000000003 != 0x0000000000000000 l000000000040CD88
// DataOut: dil fs r10 r11 r12 r13 r13d r14d r15 r8 r9 rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

l000000000040CDAE:
	return rcx_10
// DataOut: fs r10 r11 r12 r13 r13d r14d r15 r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

fn000000000040CD70_exit:
// DataOut: rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>



word64 fn000000000040CDC0(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word32 r8d, word32 r9d)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8d r9b r9d rcx rdi rdx rsi
// LiveOut: rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040CDC0_entry:
// DataOut: ebx fs r10 r11 r12d r8 r8d r9 r9b r9d rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040CDC0:
	word64 r15_360
	word64 rsi_129
	word64 qwLoc58_258
	word64 rbp_103
	word64 rax_329
	word64 rcx_100
	word32 eax_268
	word32 ecx_263
	word64 r12_104
	word64 rbx_26 = (uint64) r9d
	word64 rax_38 = DPB(rax, strlen(rdi), 0)
	word64 r13_12 = rsi
	word32 ebx_27 = (word32) rbx_26
	byte bl_28 = (byte) rbx_26
	word64 qwLoc60_257 = rdi
	word64 r14_106 = rax_38
	branch (bl_28 & 0x02) == 0x00 l000000000040CF60
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0060(64)

l000000000040CF60:
	branch DPB(rax, __ctype_get_mb_cur_max(), 0) <=u 0x0000000000000001 l000000000040CDFA
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax -96(fp):rdi -80(fp):rdx -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0060(64)

l000000000040CF6F:
	rsi_129 = rdi
	word64 rax_447 = DPB(rax, mbstowcs(0x0000000000000000, rdi, 0x0000000000000000), 0)
	branch rax_447 != 0xFFFFFFFFFFFFFFFF l000000000040CFA8
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax -96(fp):rdi -80(fp):rdx -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0060(64)

l000000000040CFA8:
	word64 r15_477 = (rax_447 + 0x0000000000000001) * 0x0000000000000004
	word64 rax_481 = malloc(r15_477)
	qwLoc58_258 = rax_481
	branch rax_481 == 0x0000000000000000 l000000000040D160
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:<invalid> rdi:<invalid> -96(fp):rdi -80(fp):rdx -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D160:
	branch (bl_28 & 0x01) == 0x00 l000000000040CF8C
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:<invalid> rdi:(rax + 0x0000000000000003) * 0x0000000000000004 rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D169:
	r15_360 = rax_38
	rbp_103 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:<invalid> rdi:(rax + 0x0000000000000003) * 0x0000000000000004 rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CFCF:
	rsi_129 = rdi
	branch DPB(rax_481, mbstowcs(rax_481, rdi, rax_447 + 0x0000000000000001), 0) == 0x0000000000000000 l000000000040CE03
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:<invalid> rdi:(rax + 0x0000000000000003) * 0x0000000000000004 rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CFEC:
	word64 qwLoc48_505
	Mem498[rax_481 - 0x0000000000000004 + r15_477:word32] = 0x00000000
	word64 rdi_499 = (uint64) Mem498[rax_481:word32]
	branch (word32) rdi_499 == 0x00000000 l000000000040D106
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D106:
	r15_360 = (int64) wcswidth(rax_481, rax_447 + 0x0000000000000001)
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D004:
	byte bLoc39_632 = 0x00
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0039(0) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D010:
	branch iswprint(rdi_499) != 0x00000000 l000000000040D025
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0039(0) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D019:
	Mem665[rdi_499:word32] = 0x0000FFFD
	bLoc39_632 = 0x01
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0039(0) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D025:
	rdi_499 = (uint64) Mem498[rdi_499:word32]
	branch (word32) rdi_499 != 0x00000000 l000000000040D010
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0039(0) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D030:
	r15_360 = (int64) wcswidth(rax_481, rax_447 + 0x0000000000000001)
	branch bLoc39_632 == 0x00 l000000000040D118
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D118:
	rsi_129 = rax_447 + 0x0000000000000001
	rax_329 = Mem498[rcx:word64]
	branch r15_360 <=u rax_329 l000000000040CF28
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CF28:
	rbp_103 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D125:
	qwLoc48_505 = rax_38 + 0x0000000000000001
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D04D:
	rsi_129 = rax_481
	qwLoc48_505 = DPB(rax_481, wcstombs(0x0000000000000000, rax_481, 0x0000000000000000), 0) + 0x0000000000000001
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D064:
	word64 rax_517 = malloc(qwLoc48_505)
	rbp_103 = rax_517
	branch rax_517 == 0x0000000000000000 l000000000040D138
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D138:
	branch (bl_28 & 0x01) != 0x00 l000000000040CE08
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D141:
// DataOut: fs r10 r11 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040D07A:
	word64 rdi_529 = (uint64) Mem498[rax_481:word32]
	word64 rax_523 = Mem498[rcx:word64]
	word64 rax_525 = rax_481
	branch (word32) rdi_529 == 0x00000000 l000000000040D173
// DataOut: bl ebx fs r10 r11 r12 r13 r8 r9 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(0)

l000000000040D173:
	r15_360 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64)

l000000000040D092:
	r15_360 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(0)

l000000000040D0BA:
	word32 eax_565 = wcwidth(rdi_529)
	byte al_568 = (byte) eax_565
	branch eax_565 != 0xFFFFFFFF l000000000040D0A0
// DataOut: al bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(0)

l000000000040D0A0:
	rax_525 = DPB(rax_525, (int16) al_568, 0) + r15_360
	branch rax_523 <u rax_525 l000000000040D0E0
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(0)

l000000000040D0C4:
	Mem585[rsi_129:word32] = 0x0000FFFD
	rax_525 = r15_360 + 0x0000000000000001
	branch rax_523 >=u rax_525 l000000000040D0AC
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(0)

l000000000040D0AC:
	rdi_529 = (uint64) Mem498[rsi_129:word32]
	r15_360 = rax_525
	branch (word32) rdi_529 == 0x00000000 l000000000040D0E0
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(0)

l000000000040D0DA:
// DataOut: bl ebx fs r10 r11 r12 r13 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64)

l000000000040D0E0:
	Mem547[rax_481:word32] = 0x00000000
	rsi_129 = rax_481
	qwLoc60_257 = rax_517
	r14_106 = DPB(rax_525, wcstombs(rax_517, rax_481, qwLoc48_505), 0)
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CF83:
	branch (bl_28 & 0x01) != 0x00 l000000000040D14D
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:<invalid> rdi:<invalid> -96(fp):rdi -80(fp):rdx -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0060(64)

l000000000040D14D:
	r15_360 = rax_38
	qwLoc58_258 = 0x0000000000000000
	rbp_103 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:<invalid> rdi:<invalid> -96(fp):rdi -80(fp):rdx -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CF8C:
	qwLoc58_258 = 0x0000000000000000
	rbp_103 = 0x0000000000000000
// DataOut: fs r10 r11 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CDFA:
	qwLoc58_258 = 0x0000000000000000
	rsi_129 = rsi
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax -96(fp):rdi -80(fp):rdx -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE03:
	r15_360 = rax_38
	rbp_103 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rdi rdx:rax + 0x0000000000000002 rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE08:
	rax_329 = Mem0[rcx:word64]
	branch r15_360 <=u rax_329 l000000000040CF2A
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CF2A:
	branch r15_360 >=u rax_329 l000000000040D180
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D180:
	rax_329 = r15_360
// DataOut: bl ebx ecx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CF33:
	Mem367[rcx:word64] = r15_360
	word64 rax_363 = rax_329 - r15_360
	rcx_100 = rax_363
	ecx_263 = (word32) rax_363 (alias)
	eax_268 = (word32) (uint64) r8d (alias)
	branch eax_268 != 0x00000000 l000000000040CE2A
// DataOut: bl eax ebx ecx fs r10 r11 r13 r14 r8 r9 rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE15:
	r14_106 = rax_329
// DataOut: bl ebx ecx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE1A:
	Mem333[rcx:word64] = rax_329
	ecx_263 = 0x00000000
	rcx_100 = 0x0000000000000000
	eax_268 = (word32) (uint64) r8d (alias)
	branch eax_268 == 0x00000000 l000000000040CF4C
// DataOut: bl eax ebx ecx fs r10 r11 r13 r14 r8 r9 rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CF4C:
	r12_104 = rcx_100
	rcx_100 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE2A:
	r12_104 = 0x0000000000000000
	branch eax_268 == 0x00000001 l000000000040CE3E
// DataOut: bl ebx ecx fs r10 r11 r12 r13 r14 r8 r9 rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE32:
	r12_104 = rcx_100 >>u 0x0000000000000001
	rcx_100 = (uint64) (ecx_263 & 0x00000001) + r12_104
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE3E:
	branch (bl_28 & 0x04) == 0x00 l000000000040CE47
// DataOut: ebx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE43_1:
	rcx_100 = 0x0000000000000000
// DataOut: ebx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE47:
	branch (word32) (uint64) (ebx_27 & 0x00000008) == 0x00000000 l000000000040CE4E
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE4A_1:
	r12_104 = 0x0000000000000000
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE4E:
	branch rdx == 0x0000000000000000 l000000000040CEF9
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(64) Local -0058(64) Local -0060(64)

l000000000040CE5A:
	word64 rdx_154 = rcx_100 - 0x0000000000000001
	word64 rbx_156 = rsi - 0x0000000000000001 + rdx
	branch rcx_100 == 0x0000000000000000 l000000000040CE97
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64) Local -0060(64)

l000000000040CE6D:
	branch rsi >=u rbx_156 l000000000040CE97
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:rdx rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64) Local -0060(64)

l000000000040CE72:
	word64 rax_230 = 0x0000000000000000
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:rdx rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64) Local -0060(64)

l000000000040CE89:
	Mem244[rbp_103 - 0x0000000000000001:byte] = 0x20
	r13_12 = r13_12 + 0x0000000000000001
	branch rdx_154 != rax_230 l000000000040CE80
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64) Local -0060(64)

l000000000040CE80:
	rax_230 = rax_230 + 0x0000000000000001
	branch r13_12 == rbx_156 l000000000040CE97
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64) Local -0060(64)

l000000000040CE97:
	Mem169[rbp_103:byte] = 0x00
	word64 rdx_170 = rbx_156 - r13_12
	branch rdx_170 <=u r14_106 l000000000040CEB6
// DataOut: fs r10 r11 r12 r14 r8 r9 rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(64) Local -0058(64)

l000000000040CEB2_1:
	rdx_170 = r14_106
// DataOut: fs r10 r11 r12 r14 r8 r9 rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(64) Local -0058(64)

l000000000040CEB6:
	word64 rax_178 = mempcpy(r13_12, qwLoc60_257, rdx_170)
	word64 rdx_185 = rax_178
	rsi_129 = r12_104 - 0x0000000000000001
	branch r12_104 == 0x0000000000000000 l000000000040CEF6
// DataOut: fs r10 r11 r12 r14 r8 r9 rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CECD:
	branch rbx_156 <=u rax_178 l000000000040CEF6
// DataOut: fs r10 r11 r12 r14 r8 r9 rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CED2:
	word64 rax_204 = 0x0000000000000000
// DataOut: fs r10 r11 r12 r14 r8 r9 rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CEE9:
	rdx_185 = rdx_185 + 0x0000000000000001
	Mem219[rdx_185 - 0x0000000000000001:byte] = 0x20
	branch rsi_129 != rax_204 l000000000040CEE0
// DataOut: fs r10 r11 r12 r14 r8 r9 rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CEE0:
	rax_204 = rax_204 + 0x0000000000000001
	branch rdx_185 == rbx_156 l000000000040CEF6
// DataOut: fs r10 r11 r12 r14 r8 r9 rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CEF6:
	Mem201[rdx_185:byte] = 0x00
// DataOut: fs r10 r11 r12 r14 r8 r9 rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CEF9:
// DataOut: fs r10 r11 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CEFF:
	free(qwLoc58_258)
	free(rbp_103)
	return rsi_129
// DataOut: ebx fs r10 r11 r12d r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> rcx:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040CDC0_exit:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r13:r13 r12:r12 rbx:rbx eax:<invalid> r14:r14 rbp:rbp rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:r15 rcx:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word32 fn000000000040D240(word32 edx, word64 rsi, word64 rdi, selector fs, ptr64 & rsiOut, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs rdi rsi
// LiveOut: eax rdi rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040D240_entry:
	*rdiOut = rdi
// DataOut: ebx edx fs r10 r11 r13d r15d r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -004C(64)

l000000000040D240:
	word32 eax_105
	word64 rax_30 = Mem0[fs:0x00000028:word64]
	word32 r15d_7 = (word32) (uint64) edx
	word64 r13_16 = rdi + rsi
	word64 rbp_174 = rdi
	word64 rax_169 = (uint64) __ctype_get_mb_cur_max()
	branch rax_169 <=u 0x0000000000000001 l000000000040D370
// DataOut: fs r10 r11 r13 r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D370:
	branch rdi >=u r13_16 l000000000040D406
// DataOut: fs r10 r11 r13 r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> eax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D379:
	word64 rcx_349 = Mem0[__ctype_b_loc():word64]
	eax_105 = 0x00000000 (alias)
	word32 esi_354 = (word32) (uint64) ((word32) (uint64) r15d_7 & 0x00000002)
// DataOut: eax esi fs r10 r11 r13 r8 r9 rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> eax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D398:
	rbp_174 = rbp_174 + 0x0000000000000001
	word32 edx_366 = (word32) Mem0[rcx_349 + DPB(rdx, (word32) Mem0[rbp_174 - 0x0000000000000001:byte], 0) * 0x0000000000000002:word16]
	rdx = DPB(rdx, edx_366, 0) (alias)
	branch (SLICE(edx_366, byte, 8) & 0x40) != 0x00 l000000000040D3B2
// DataOut: eax edx esi fs r10 r11 r13 r8 r9 rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D3A9:
	branch esi_354 != 0x00000000 l000000000040D369
// DataOut: eax edx esi fs r10 r11 r13 r8 r9 rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D3AD:
	rdx = (uint64) (edx_366 & 0x00000002)
	branch (word32) rdx != 0x00000000 l000000000040D393
// DataOut: eax esi fs r10 r11 r13 r8 r9 rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D3B2:
	branch eax_105 != 0x7FFFFFFF l000000000040D390
// DataOut: eax esi fs r10 r11 r13 r8 r9 rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D390:
	eax_105 = (word32) (uint64) (eax_105 + 0x00000001) (alias)
// DataOut: eax esi fs r10 r11 r13 r8 r9 rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D393:
	branch rbp_174 == r13_16 l000000000040D3C5
// DataOut: eax esi fs r10 r11 r13 r8 r9 rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D3B9:
// DataOut: fs r10 r11 r8 r9 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D277:
	branch rdi >=u r13_16 l000000000040D406
// DataOut: fs r10 r11 r13 r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> eax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D406:
	eax_105 = 0x00000000 (alias)
// DataOut: eax fs r10 r11 r8 r9 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> eax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D280:
	word32 r12d_152 = 0x00000000
	word32 r15d_154 = (word32) (uint64) (r15d_7 & 0x00000001)
	word32 r14d_156 = (word32) (uint64) ((word32) (uint64) r15d_7 & 0x00000002)
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> eax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2AC:
	word32 eax_176 = (word32) Mem0[rbp_174:byte]
	rax_169 = DPB(rax_169, eax_176, 0) (alias)
	byte al_178 = (byte) eax_176
	branch al_178 <= 0x3F l000000000040D290
// DataOut: al fs r10 r11 r12d r13 r14d r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D290:
	branch al_178 >= 0x25 l000000000040D29B
// DataOut: al fs r10 r11 r12d r13 r14d r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D294:
	rax_169 = (uint64) (eax_176 - 0x00000020)
	branch (byte) rax_169 >u 0x03 l000000000040D2C3
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2B4:
	branch al_178 < 0x41 l000000000040D2C3
// DataOut: al fs r10 r11 r12d r13 r14d r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2B8:
	branch al_178 <= 0x5F l000000000040D29B
// DataOut: al fs r10 r11 r12d r13 r14d r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2BC:
	rax_169 = (uint64) (eax_176 - 0x00000061)
	branch (byte) rax_169 <=u 0x1D l000000000040D29B
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2C3:
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2F4:
	rax_169 = DPB(rax_169, mbrtowc(fp - 0x000000000000004C, rbp_174, r13_16 - rbp_174, fp - 0x0000000000000048), 0) (alias)
	word64 rdi_260 = fp - 0x000000000000004C
	*rdiOut = rdi_260
	word64 rbx_268 = rax_169
	branch rax_169 == 0xFFFFFFFFFFFFFFFF l000000000040D360
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D360:
	branch r15d_154 == 0x00000000 l000000000040D29B
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D29B:
	rbp_174 = rbp_174 + 0x0000000000000001
	r12d_152 = (word32) (uint64) (r12d_152 + 0x00000001) (alias)
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D315:
	branch rax_169 == 0xFFFFFFFFFFFFFFFE l000000000040D3E8
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D3E8:
	branch r15d_154 != 0x00000000 l000000000040D369
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D3F1:
	rbp_174 = r13_16
	r12d_152 = (word32) (uint64) (r12d_152 + 0x00000001) (alias)
	branch r13_16 >u r13_16 l000000000040D2AC
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D31F:
	word64 rdi_272 = (uint64) dwLoc4C
	*rdiOut = rdi_272
	branch rax_169 != 0x0000000000000000 l000000000040D32F
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D32B_1:
	rbx_268 = 0x0000000000000001
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:0x0000000000000001 eax:0x00000001 r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D32F:
	word32 eax_278 = wcwidth(rdi_272)
	rax_169 = DPB(0x0000000000000001, eax_278, 0) (alias)
	branch eax_278 >= 0x00000000 l000000000040D2D0
// DataOut: eax fs r10 r11 r12d r13 r14d r15d r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:0x0000000000000001 eax:0x00000001 r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2D0:
	branch eax_278 > (word32) ((uint64) (0x7FFFFFFF - r12d_152)) l000000000040D3C0
// DataOut: eax fs r10 r11 r12d r13 r14d r15d r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2E0:
	r12d_152 = (word32) (uint64) (r12d_152 + eax_278) (alias)
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D338:
	branch r14d_156 != 0x00000000 l000000000040D369
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D369:
	eax_105 = 0xFFFFFFFF (alias)
// DataOut: eax fs r10 r11 r8 r9 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rdi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D33D:
	word64 rdi_299 = (uint64) dwLoc4C
	*rdiOut = rdi_299
	branch iswcntrl(rdi_299) != 0x00000000 l000000000040D2E3
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D34A:
	branch r12d_152 == 0x7FFFFFFF l000000000040D3C0
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D3C0:
	eax_105 = 0x7FFFFFFF (alias)
// DataOut: eax fs r10 r11 r8 r9 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D353:
	r12d_152 = (word32) (uint64) (r12d_152 + 0x00000001) (alias)
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2E3:
	word64 rdi_289
	*rdiOut = fp - 0x0000000000000048
	rbp_174 = rbp_174 + rbx_268
	branch mbsinit(fp - 0x0000000000000048) != 0x00000000 l000000000040D2A3
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2A3:
	branch r13_16 <=u rbp_174 l000000000040D401
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D401:
	eax_105 = (word32) (uint64) r12d_152 (alias)
// DataOut: eax fs r10 r11 r8 r9 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D3C5:
	word64 rsi_59 = rax_30 ^ Mem0[fs:0x00000028:word64]
	*rsiOut = rsi_59
	branch rsi_59 != 0x0000000000000000 l000000000040D40A
// DataOut: eax fs r10 r11 r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32)

l000000000040D40A:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D3D5:
	return eax_105
// DataOut: eax ebx fs r10 r11 r13d r15d r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040D240_exit:
// DataOut: eax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r15:r15 r13:r13 rbp:rbp rax:<invalid> eax:<invalid> rsi:<invalid> rbx:rbx r12:r12 r14:r14 rcx:<invalid> edx:<invalid> rdx:<invalid> rdi:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word32 fn000000000040D420(word32 esi, word64 rdi, selector fs, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi fs rdi
// LiveOut: eax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rbp rbx rdi rsp
fn000000000040D420_entry:
// DataOut: ebx esi fs r10 r11 r12 r13d r14 r15 r15d r8 r9 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D420:
	word64 rax_16 = DPB(rax, strlen(rdi), 0)
	word32 edx_22 = (word32) (uint64) (word32) (uint64) esi
// DataOut: ebx edx fs r10 r11 r12 r13d r14 r15 r15d r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D43E_thunk_fn000000000040D240:
	word64 rsi_31
	word64 rdi_32
	return fn000000000040D240(edx_22, rax_16, rdi, fs, out rsi_31, out rdi_32)
// DataOut: eax ebx fs r10 r11 r12 r13d r14 r15 r15d r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx eax:<invalid> rdi:rdi rdx:(uint64) ebp rsi:rax -16(fp):rbx -8(fp):rbp

fn000000000040D420_exit:
// DataOut: eax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx eax:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> edx:<invalid> -16(fp):rbx -8(fp):rbp



word32 fn000000000040D450(word32 eax, word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r15, ptr64 & rsiOut, ptr64 & r13dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax r11 r15 r8 rdi rsi
// LiveOut: eax r13d rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040D450_entry:
// DataOut: eax fs r10 r11 r13d r15 r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D450:
	rsp = fp
	rsp = fp - 0x0000000000000008
	qwLoc08 = r15
	rsp = fp - 0x0000000000000010
	qwLoc10 = r14
	rsp = fp - 0x0000000000000018
	qwLoc18 = r13
	rsp = fp - 0x0000000000000020
	qwLoc20 = r12
	rsp = fp - 0x0000000000000028
	qwLoc28 = rbp
	rbp = rcx
	rsp = fp - 0x0000000000000030
	qwLoc30 = rbx
	rbx = rdi
	rsp = fp - 0x0000000000000068
	SCZO = cond(rsi - 0x0000000000000002)
	Z = (bool) SCZO (alias)
	SZO = SCZO (alias)
	CZ = SCZO (alias)
	C = (bool) SCZO (alias)
	qwLoc68 = rsi
	qwLoc50 = rdx
	branch Test(UGT,CZ) l000000000040D490
// DataOut: eax fs r10 r11 r15 r8 r9 rdi rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(32) Local -0068(64)

l000000000040D490:
	rsi = qwLoc68
	rdx = qwLoc50
	rax = rsi
	rax = rax >>u 0x0000000000000001
	r15 = rax
	qwLoc60 = rax
	rax = rdi + rax * 0x0000000000000008
	rsi = rsi - r15
	SCZO = cond(rsi)
	rdi = rax
	qwLoc40 = rax
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r15, out rsi, out r13d)
	rsp = rsp + 0x0000000000000008
	SCZO = cond(r15 - 0x0000000000000001)
	branch Test(EQ,Z) l000000000040D570
// DataOut: fs r10 r11 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbp:rcx rbx:rdi -104(fp):rsi -80(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D570:
	r12 = Mem0[r11:word64]
	rax = Mem0[rsp + 0x0000000000000018:word64]
	Mem0[r8:word64] = r12
// DataOut: fs r10 r11 r12 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):rdi + (rsi >>u 0x0000000000000001) * 0x0000000000000008 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D4C5:
	rax = Mem0[rsp:word64]
	r15 = Mem0[rsp + 0x0000000000000018:word64]
	rcx = rbp
	rsi = Mem0[rsp + 0x0000000000000008:word64]
	rax = rax >>u 0x0000000000000002
	rdx = r15
	r13 = rbx + rax * 0x0000000000000008
	r14 = rax
	rsi = rsi - rax
	SCZO = cond(rsi)
	Mem0[rsp + 0x0000000000000020:word64] = rax
	rdi = r13
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r15, out rsi, out r13d)
	rsp = rsp + 0x0000000000000008
	rdx = r15
	rcx = rbp
	rsi = r14
	rdi = rbx
	r15 = r15 + 0x0000000000000008
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r15, out rsi, out r13d)
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[r11:word64]
	r13 = Mem0[r13 + 0x0000000000000000:word64]
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):rdi + (rsi >>u 0x0000000000000001) * 0x0000000000000008 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D53B:
	rsi = r13
	rdi = r12
	call rbp (retsize: 8; depth: 8)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l000000000040D520
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D520:
	r14 = r14 + 0x0000000000000001
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - r14)
	Mem0[r15 - 0x0000000000000008:word64] = r13
	branch Test(EQ,Z) l000000000040D634
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D533:
	r13 = Mem0[rbx + r14 * 0x0000000000000008:word64]
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D547:
	v23 = Mem0[rsp + 0x0000000000000010:word64] + 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = v23
	Mem0[r15 - 0x0000000000000008:word64] = r12
	rax = Mem0[rsp + 0x0000000000000010:word64]
	SCZO = cond(Mem0[rsp + 0x0000000000000020:word64] - rax)
	branch Test(EQ,Z) l000000000040D625
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D625:
	rax = Mem0[rsp + 0x0000000000000008:word64]
	Mem0[rsp + 0x0000000000000010:word64] = r14
	Mem0[rsp + 0x0000000000000020:word64] = rax
// DataOut: fs r10 r11 r15 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D634:
	rax = Mem0[rsp + 0x0000000000000010:word64]
	rdx = Mem0[rsp + 0x0000000000000020:word64]
	rdi = r15
	rdx = rdx - rax
	rsi = rbx + rax * 0x0000000000000008
	rdx = rdx << 0x0000000000000003
	SCZO = cond(rdx)
	rax = memcpy(rdi, rsi, rdx)
	rax = Mem0[rsp + 0x0000000000000018:word64]
	r12 = Mem0[r8:word64]
// DataOut: fs r10 r11 r12 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D57B:
	rax = Mem0[rsp + 0x0000000000000028:word64]
	r14 = Mem0[rsp + 0x0000000000000008:word64]
	r15 = 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
	r13 = Mem0[r8:word64]
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5B7:
	rsi = r13
	rdi = r12
	call rbp (retsize: 8; depth: 8)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l000000000040D5A0
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5A0:
	r14 = r14 + 0x0000000000000001
	SCZO = cond(Mem0[rsp:word64] - r14)
	Mem0[rbx - 0x0000000000000008 + r15 * 0x0000000000000008:word64] = r13
	branch Test(EQ,Z) l000000000040D5F0
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5F0:
	rax = Mem0[rsp + 0x0000000000000010:word64]
	rdi = rbx + r15 * 0x0000000000000008
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	r15 = Mem0[rsp + 0x0000000000000008:word64]
	rsp = rsp + 0x0000000000000038
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r13 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r15 = r15 - rax
	SCZO = cond(r15)
	rsi = rcx + rax * 0x0000000000000008
	r14 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdx = 0x00000000 + r15 * 0x0000000000000008
	r15 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rax = memcpy(rdi, rsi, rdx)
	return eax
// DataOut: eax fs r10 r11 r13d r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5AF:
	r13 = Mem0[rbx + r14 * 0x0000000000000008:word64]
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5C3:
	v24 = Mem0[rsp + 0x0000000000000010:word64] + 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = v24
	Mem0[rbx - 0x0000000000000008 + r15 * 0x0000000000000008:word64] = r12
	rax = Mem0[rsp + 0x0000000000000010:word64]
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - rax)
	branch Test(EQ,Z) l000000000040D479
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5DE:
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	r12 = Mem0[rcx + rax * 0x0000000000000008:word64]
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5B3:
	r15 = r15 + 0x0000000000000001
	SCZO = cond(r15)
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D561:
	r12 = Mem0[rbx + rax * 0x0000000000000008:word64]
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D537:
	r15 = r15 + 0x0000000000000008
	SCZO = cond(r15)
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D473:
	branch Test(EQ,Z) l000000000040D660
// DataOut: eax fs r10 r11 r15 r8 r9 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbp:rcx rbx:rdi -104(fp):rsi -80(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l000000000040D660:
	r13 = Mem0[r15 + 0x0000000000000008:word64]
	r13d = (word32) r13 (alias)
	r12 = Mem0[r15:word64]
	rsi = r13
	rdi = r12
	call rcx (retsize: 8; depth: 112)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l000000000040D479
// DataOut: eax fs r10 r11 r12 r13 r8 r9 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbp:rcx rbx:rdi -104(fp):rsi -80(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l000000000040D677:
	Mem0[r11:word64] = r13
	Mem0[r11 + 0x0000000000000008:word64] = r12
	rsp = fp - 0x0000000000000030
	SCZO = cond(fp - 0x0000000000000030)
	rbx = qwLoc30
	rsp = fp - 0x0000000000000028
	rbp = qwLoc28
	rsp = fp - 0x0000000000000020
	r12 = qwLoc20
	rsp = fp - 0x0000000000000018
	r13 = qwLoc18
	rsp = fp - 0x0000000000000010
	r14 = qwLoc10
	rsp = fp - 0x0000000000000008
	r15 = qwLoc08
	rsp = fp
	return eax
// DataOut: eax fs r10 r11 r13d r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbp:rcx rbx:rdi r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> -104(fp):rsi -80(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D479:
	rsp = rsp + 0x0000000000000038
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r13 = Mem0[rsp:word64]
	r13d = (word32) r13 (alias)
	rsp = rsp + 0x0000000000000008
	r14 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r15 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return eax
// DataOut: eax fs r10 r11 r13d r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040D450_exit:
	use rsi (=> rsiOut)
	use r13d (=> r13dOut)
// DataOut: eax r13d rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> r15:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040D690(word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r15, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r11 r15 r8 rdi rsi
// LiveOut: r13 r13d r14 r15 rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040D690_entry:
	*r15Out = r15
	*r13Out = r13
	*r14Out = r14
// DataOut: edi fs r10 r11 r15 r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D690:
	word32 eax_5 = (word32) (rdi + rsi * 0x0000000000000008)
// DataOut: eax fs r10 r11 r15 r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D69A_thunk_fn000000000040D450:
	word64 rsi_12
	word32 r13d_13
	fn000000000040D450(eax_5, rsi, rdi, r8, r11, r15, out rsi_12, out r13d_13)
	return rsi_12
// DataOut: fs r10 r11 r13 r13d r14 r15 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:rdi + rsi * 0x0000000000000008 rcx:rdx rdx:rdi + rsi * 0x0000000000000008

fn000000000040D690_exit:
// DataOut: r13 r13d r14 r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> r15:<invalid>



void fn000000000040D6A0(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rbx rsp
fn000000000040D6A0_entry:
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D6A0:
	word64 rbx_119 = rdi
	branch rdi == 0x0000000000000000 l000000000040D713
// DataOut: fs r10 r11 r13 r14 r15 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0008(32)

l000000000040D713:
	fwrite(0x0000000000415FA0, 0x0000000000000001, 0x0000000000000037, Mem0[0x000000000061A650:word64])
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi -8(fp):rbx

l000000000040D6A9:
	word64 rax_11 = strrchr(rdi, 0x000000000000002F)
	branch rax_11 == 0x0000000000000000 l000000000040D703
// DataOut: fs r10 r11 r13 r14 r15 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6B8:
	word64 rcx_49 = rax_11 + 0x0000000000000001 - rdi
	byte SCZO_50 = cond(rcx_49 - 0x0000000000000006)
	bool C_110 = (bool) SCZO_50
	bool Z_143 = (bool) SCZO_50
	byte CZ_112 = SCZO_50
	branch rcx_49 <= 0x0000000000000006 l000000000040D703
// DataOut: fs r10 r11 r13 r14 r15 r9 rax rbp rbx rdx
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rsi:0x000000000000002F rax:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6C8:
	word64 rsi_145 = rax_11 - 0x0000000000000006
	word64 rdi_148 = 0x0000000000415FD8
	word64 rcx_150 = 0x0000000000000007
// DataOut: fs r10 r11 r13 r14 r15 r9 rax rbp rbx rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rsi:0x000000000000002F rax:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6D6:
	branch rcx_150 == 0x0000000000000000 l000000000040D6D8
// DataOut: fs r10 r11 r13 r14 r15 r9 rax rbp rbx rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6D6_1:
	byte SCZO_140 = cond(Mem0[rsi_158:byte] - Mem0[rdi_159:byte])
	C_110 = (bool) SCZO_140 (alias)
	Z_143 = (bool) SCZO_140 (alias)
	CZ_112 = SCZO_140 (alias)
	rsi_145 = rsi_158 + 0x0000000000000001
	rdi_148 = rdi_159 + 0x0000000000000001
	rcx_150 = rcx_150 - 0x0000000000000001
	word64 rsi_158 = rsi_145
	word64 rdi_159 = rdi_148
	branch Mem0[rsi_158:byte] != Mem0[rdi_159:byte] l000000000040D6D6
// DataOut: fs r10 r11 r13 r14 r15 r9 rax rbp rbx rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6D8:
	branch Z_143 l000000000040D703
// DataOut: fs r10 r11 r13 r14 r15 r9 rax rbp rbx rdx
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6DA:
	word64 rcx_104 = 0x0000000000000003
	word64 rsi_100 = rax_11 + 0x0000000000000001
	word64 rdi_102 = 0x0000000000415FE0
// DataOut: fs r10 r11 r13 r14 r15 r9 rax rbp rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6E7:
	branch rcx_104 == 0x0000000000000000 l000000000040D6E9
// DataOut: fs r10 r11 r13 r14 r15 r9 rax rbp rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6E7_2:
	byte SCZO_127 = cond(Mem0[rsi_160:byte] - Mem0[rdi_161:byte])
	C_110 = (bool) SCZO_127 (alias)
	CZ_112 = SCZO_127 (alias)
	rsi_100 = rsi_160 + 0x0000000000000001
	rdi_102 = rdi_161 + 0x0000000000000001
	rcx_104 = rcx_104 - 0x0000000000000001
	word64 rsi_160 = rsi_100
	word64 rdi_161 = rdi_102
	branch Mem0[rsi_160:byte] != Mem0[rdi_161:byte] l000000000040D6E7
// DataOut: fs r10 r11 r13 r14 r15 r9 rax rbp rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6E9:
	rbx_119 = rax_11 + 0x0000000000000001
	branch CZ_112 != C_110 l000000000040D703
// DataOut: fs r10 r11 r13 r14 r15 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6F8:
	Mem125[0x000000000061A600:word64] = rax_11 + 0x0000000000000004
	rbx_119 = rax_11 + 0x0000000000000004
// DataOut: fs r10 r11 r13 r14 r15 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D703:
	Mem42[0x000000000061B200:word64] = rbx_119
	Mem43[0x000000000061A648:word64] = rbx_119
	return
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -8(fp):rbx

fn000000000040D6A0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -8(fp):rbx



void fn000000000040D740(word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi rdi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx rax rcx rdi rdx
// Preserved: rsp
fn000000000040D740_entry:
// DataOut: ebx esi fs r11 r12 r13 r14 r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D740:
	word64 rcx_16 = 0x0000000000000007
	word64 rdi_15 = fp - 0x0000000000000048
// DataOut: ebx esi fs r11 r12 r13 r14 r15 rax rbp rbx rcx rdi rdx
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D754:
	branch rcx_16 == 0x0000000000000000 l000000000040D757
// DataOut: ebx esi fs r11 r12 r13 r14 r15 rax rbp rbx rcx rdi rdx
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>
// LocalsOut: Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D757:
	branch esi == 0x00000008 l000000000040D7A1
// DataOut: ebx esi fs r11 r12 r13 r14 r15 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>
// LocalsOut: Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D7A1:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>

l000000000040D759:
	Mem26[rdi:word64] = DPB(qwLoc48, esi, 0)
	Mem29[rdi + 0x0000000000000008:word64] = qwLoc40
	Mem32[rdi + 0x0000000000000010:word64] = qwLoc38
	Mem35[rdi + 0x0000000000000018:word64] = qwLoc30
	Mem38[rdi + 0x0000000000000020:word64] = qwLoc28
	Mem41[rdi + 0x0000000000000028:word64] = qwLoc20
	Mem44[rdi + 0x0000000000000030:word64] = qwLoc18
	return
// DataOut: ebx fs r11 r12 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>

fn000000000040D740_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):esi

l000000000040D754_1:
	Mem18[rdi_15:word64] = 0x0000000000000000
	rdi_15 = rdi_15 + 0x0000000000000008
	rcx_16 = rcx_16 - 0x0000000000000001
// DataOut: ebx esi fs r11 r12 r13 r14 r15 rax rbp rbx rcx rdi rdx
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>
// LocalsOut: Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)



word64 fn000000000040D7B0(word32 esi, word64 rdi, word64 r8, selector fs, ptr64 & r10Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi fs r8 rdi
// LiveOut: r10 rax
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 rbp rbx rsp
fn000000000040D7B0_entry:
	*r10Out = r10
// DataOut: ebx esi fs r10 r15 r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D7B0:
	word64 rax_24 = dcgettext(0x0000000000000000, rdi, 0x0000000000000005)
	word32 r12d_11 = (word32) (uint64) esi
	word64 rbx_122 = rax_24
	branch rax_24 == rdi l000000000040D7E8
// DataOut: fs r10 r12d r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(32)

l000000000040D7E8:
	word64 r10_54
	word64 rax_55 = fn0000000000411900(rdi, rdi, r8, fs, out r10_54)
	byte dl_61 = (byte) (uint64) ((word32) Mem0[rax_55:byte] & 0xFFFFFFDF)
	branch dl_61 != 0x55 l000000000040D850
// DataOut: dl fs r10 r12d r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:0x0000000000000005 r12:(uint64) esi rsi:rdi rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D850:
	branch dl_61 != 0x47 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D855:
	branch (byte) (uint64) ((word32) Mem0[rax_55 + 0x0000000000000001:byte] & 0xFFFFFFDF) != 0x42 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D861:
	branch Mem0[rax_55 + 0x0000000000000002:byte] != 0x31 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D867:
	branch Mem0[rax_55 + 0x0000000000000003:byte] != 0x38 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D86D:
	branch Mem0[rax_55 + 0x0000000000000004:byte] != 0x30 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D873:
	branch Mem0[rax_55 + 0x0000000000000005:byte] != 0x33 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D879:
	branch Mem0[rax_55 + 0x0000000000000006:byte] != 0x30 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D87F:
	branch Mem0[rax_55 + 0x0000000000000007:byte] != 0x00 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D885:
	rbx_122 = 0x0000000000415FED
	branch Mem0[rdi:byte] == 0x60 l000000000040D89B
// DataOut: fs r10 r15 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D897_1:
	rbx_122 = 0x0000000000415FE8
// DataOut: fs r10 r15 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:0x0000000000415FE8 rbx:0x0000000000415FED edx:<invalid> r13:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00415FE8 edi:<invalid> r10:<invalid> al:0xE8 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D89B:
// DataOut: fs r10 r15 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:0x0000000000415FE8 rbx:<invalid> edx:<invalid> r13:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00415FE8 edi:<invalid> r10:<invalid> al:0xE8 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D7F8:
	branch (byte) (uint64) ((word32) Mem0[rax_55 + 0x0000000000000001:byte] & 0xFFFFFFDF) != 0x54 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D804:
	branch (byte) (uint64) ((word32) Mem0[rax_55 + 0x0000000000000002:byte] & 0xFFFFFFDF) != 0x46 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D810:
	branch Mem0[rax_55 + 0x0000000000000003:byte] != 0x2D l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D816:
	branch Mem0[rax_55 + 0x0000000000000004:byte] != 0x38 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D81C:
	branch Mem0[rax_55 + 0x0000000000000005:byte] != 0x00 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D838:
	rbx_122 = 0x0000000000415FEB
	branch r12d_11 == 0x00000007 l000000000040D84A
// DataOut: fs r10 r15 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D846_1:
	rbx_122 = 0x0000000000416DEA
// DataOut: fs r10 r15 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:0x0000000000416DEA rbx:0x0000000000415FEB edx:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00416DEA edi:<invalid> r10:<invalid> al:0xEA -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D84A:
// DataOut: fs r10 r15 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:0x0000000000416DEA rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00416DEA edi:<invalid> r10:<invalid> al:0xEA -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D822:
	rbx_122 = 0x0000000000415FE4
	branch Mem0[rax_24:byte] != 0x60 l000000000040D833
// DataOut: fs r10 r15 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D82F_1:
	rbx_122 = 0x0000000000415FF1
// DataOut: fs r10 r15 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:0x0000000000415FF1 rbx:0x0000000000415FE4 edx:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00415FF1 edi:<invalid> r10:<invalid> al:0xF1 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D833:
// DataOut: fs r10 r15 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:0x0000000000415FF1 rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00415FF1 edi:<invalid> r10:<invalid> al:0xF1 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D7D7:
	return rbx_122
// DataOut: ebx fs r10 r15 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

fn000000000040D7B0_exit:
// DataOut: r10 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> r12:r12 rsi:<invalid> rbp:rbp rdi:<invalid> rax:<invalid> rbx:rbx r13:r13 edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13



word64 fn000000000040D8A0(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 r8, word32 r9d, selector fs, word64 qwArg08, word64 qwArg10, word64 qwArg18, ptr64 & rbxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12dOut, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r8 r8d r9b r9d rcx rdi rdx rsi
// LiveOut: ebp r10 r11 r12d r13 r14 r15 r8 r9 rax rbp rbx rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 rcx rdi rdx
// Stack args: Stack +0008(64) Stack +0010(64) Stack +0018(64)
fn000000000040D8A0_entry:
	*r10Out = r10
// DataOut: fs r10 r8 r8d r9b r9d rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -004C(64) Stack +0008(64) Stack +0010(64) Stack +0018(64)

l000000000040D8A0:
	byte al_59 = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (word32) (uint64) r9d >>u 0x00000001) & 0x00000001)
	word64 r15_1092 = rcx
	word32 r14d_12 = (word32) (uint64) r8d
	word64 rsp_256 = fp - 0x00000000000000F8
	word32 dwLocC4_1530 = r8d
	word64 qwLoc88_1605 = qwArg10
	word64 qwLoc90_1606 = qwArg18
	word64 rax_52 = (uint64) __ctype_get_mb_cur_max()
	byte bLocC5_1504 = al_59
	branch r14d_12 >u 0x00000008 l000000000040E280
// DataOut: fs r10 r13 r14d r15 r8 rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(32) Local -00C5(0) Local -00D0(64) Local -00D8(64)

l000000000040E280:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:<invalid> eax:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D92D:
	word64 rbx_1491
	word64 rdx_1021
	word64 r14_1506
	word64 qwLoc98_1508
	byte bLocD8_1505
	word64 rax_1614 = (uint64) r14d_12
	switch (r14d_12) { l000000000040D940 l000000000040E070 l000000000040DF10 l000000000040DF50 l000000000040DFB0 l000000000040DF90 l000000000040DFE0 l000000000040DFE0 l000000000040DFE0 }
// DataOut: fs r10 r11 r13 r15 r8 rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:<invalid> eax:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(32) Local -00C5(0) Local -00D0(64)

l000000000040DFE0:
	branch r14d_12 == 0x00000008 l000000000040E012
// DataOut: fs r10 r11 r13 r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(32) Local -00C5(0) Local -00D0(64)

l000000000040DFE2:
	word32 ebx_1678 = (word32) (uint64) r8d
	esi = (word32) (uint64) ebx_1678 (alias)
	word64 r10_1684
	qwLoc88_1605 = fn000000000040D7B0((word32) (uint64) ebx_1678, 0x0000000000415FF5, r8, fs, out r10_1684)
	word64 r10_1690
	rax_1614 = fn000000000040D7B0(esi, 0x0000000000416DEA, r8, fs, out r10_1690)
	qwLoc90_1606 = rax_1614
// DataOut: fs r10 r11 r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(0) Local -00D0(64)

l000000000040E012:
	rbx_1491 = 0x0000000000000000
	rdx_1021 = rdx
	branch al_59 != 0x00 l000000000040E044
// DataOut: fs r10 r11 r13 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E01B:
	word32 eax_1650 = (word32) Mem0[qwLoc88_1605:byte]
	rdx_1021 = qwLoc88_1605
	rax_1614 = DPB(rax_1614, eax_1650, 0) (alias)
	byte al_1652 = (byte) eax_1650
	branch al_1652 == 0x00 l000000000040E044
// DataOut: al fs r10 r11 r13 r15 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E027:
// DataOut: al fs r10 r11 r13 r15 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E030:
	branch rbx_1491 >=u rsi l000000000040E038
// DataOut: al fs r10 r11 r13 r15 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:rdi edx:<invalid> ebp:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E035:
	Mem1676[rdi + rbx_1491:byte] = al_1652
// DataOut: fs r10 r11 r13 r15 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:rdi edx:<invalid> ebp:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E038:
	rbx_1491 = rbx_1491 + 0x0000000000000001
	word32 eax_1670 = (word32) Mem0[qwLoc88_1605 + rbx_1491:byte]
	rax_1614 = DPB(rax_1614, eax_1670, 0) (alias)
	al_1652 = (byte) eax_1670 (alias)
	branch al_1652 != 0x00 l000000000040E030
// DataOut: al fs r10 r11 r13 r15 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:rdi edx:<invalid> ebp:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E044:
	qwLoc98_1508 = qwLoc90_1606
	r14_1506 = DPB(rax_1614, strlen(qwLoc90_1606), 0)
	bLocD8_1505 = 0x01
// DataOut: fs r10 r11 r13 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DF90:
	bLocC5_1504 = 0x00
	bLocD8_1505 = 0x01
	r14_1506 = 0x0000000000000000
	qwLoc98_1508 = 0x0000000000000000
	rbx_1491 = 0x0000000000000000
	rdx_1021 = rdx
// DataOut: fs r10 r11 r13 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DFB0:
	bLocC5_1504 = 0x01
	bLocD8_1505 = 0x01
	r14_1506 = 0x0000000000000001
	qwLoc98_1508 = 0x0000000000415FEB
	rbx_1491 = 0x0000000000000000
	dwLocC4_1530 = 0x00000003
	rdx_1021 = rdx
// DataOut: fs r10 r11 r13 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DF50:
	branch al_59 != 0x00 l000000000040E428
// DataOut: fs r10 r11 r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E428:
	bLocD8_1505 = 0x01
	r14_1506 = 0x0000000000000001
	qwLoc98_1508 = 0x0000000000415FEB
	rbx_1491 = 0x0000000000000000
	rdx_1021 = rdx
// DataOut: fs r10 r11 r13 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DF5B:
	branch rsi == 0x0000000000000000 l000000000040E2B3
// DataOut: fs r10 r11 r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E2B3:
	bLocD8_1505 = 0x01
	r14_1506 = 0x0000000000000001
	qwLoc98_1508 = 0x0000000000415FEB
	rbx_1491 = 0x0000000000000001
	rdx_1021 = rdx
// DataOut: fs r10 r11 r13 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DF64:
	Mem1570[rdi:byte] = 0x22
	bLocD8_1505 = 0x01
	r14_1506 = 0x0000000000000001
	qwLoc98_1508 = 0x0000000000415FEB
	rbx_1491 = 0x0000000000000001
	rdx_1021 = rdx
// DataOut: fs r10 r11 r13 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DF10:
	branch al_59 != 0x00 l000000000040E408
// DataOut: fs r10 r11 r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E408:
	bLocD8_1505 = 0x00
	r14_1506 = 0x0000000000000001
	qwLoc98_1508 = 0x0000000000416DEA
	rbx_1491 = 0x0000000000000000
	rdx_1021 = rdx
// DataOut: fs r10 r11 r13 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DF1B:
	branch rsi == 0x0000000000000000 l000000000040E2D1
// DataOut: fs r10 r11 r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E2D1:
	bLocD8_1505 = 0x00
	r14_1506 = 0x0000000000000001
	qwLoc98_1508 = 0x0000000000416DEA
	rbx_1491 = 0x0000000000000001
	rdx_1021 = rdx
// DataOut: fs r10 r11 r13 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DF24:
	Mem1543[rdi:byte] = 0x27
	bLocD8_1505 = 0x00
	r14_1506 = 0x0000000000000001
	qwLoc98_1508 = 0x0000000000416DEA
	rbx_1491 = 0x0000000000000001
	rdx_1021 = rdx
// DataOut: fs r10 r11 r13 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040E070:
	bLocC5_1504 = 0x01
	bLocD8_1505 = 0x00
	r14_1506 = 0x0000000000000001
	qwLoc98_1508 = 0x0000000000416DEA
	rbx_1491 = 0x0000000000000000
	dwLocC4_1530 = 0x00000002
	rdx_1021 = rdx
// DataOut: fs r10 r11 r13 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040D940:
	bLocC5_1504 = 0x00
	bLocD8_1505 = 0x00
	r14_1506 = 0x0000000000000000
	qwLoc98_1508 = 0x0000000000000000
	rbx_1491 = 0x0000000000000000
	rdx_1021 = rdx
// DataOut: fs r10 r11 r13 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d eax:<invalid> r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040D960:
	word64 r13_1110
	word64 r11_1295
	word64 rax_242
	word64 rax_110 = (uint64) ((word32) bLocD8_1505 ^ 0x00000001)
	byte al_115 = 0x0000000000000000 != rcx
	word64 r9_1478
	*r9Out = r14_1506
	word64 rbp_100 = 0x0000000000000000
	word64 r14_102 = rsi
	word64 r8_104
	*r8Out = rdx
	byte al_107 = (byte) (uint64) ((word32) bLocC5_1504 ^ 0x00000001)
	byte al_111 = (byte) rax_110
	word64 rax_116 = DPB(rax_110, al_115, 0)
	branch rcx == 0xFFFFFFFFFFFFFFFF l000000000040DB76
// DataOut: al ebp fs r10 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> rbp:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):rsi -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040D996:
// DataOut: al ebp fs r10 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:rsi r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:rsi r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> edi:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040D9A0:
	branch al_115 == 0x00 l000000000040DB86
// DataOut: ebp fs r10 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040D9A8:
	byte r11b_1083
	word64 r13_1415
	word32 r11d_1417
	branch r9_1478 == 0x0000000000000000 l000000000040E0A0
// DataOut: ebp ecx fs r10 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(64) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040D9B4:
	branch bLocD8_1505 == 0x00 l000000000040E0A0
// DataOut: ebp ecx fs r10 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) cl:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(64) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(8)

l000000000040D9BF:
	rax_116 = rbp_100 + r9_1478
	branch r15_1092 <u rax_116 l000000000040E0A0
// DataOut: ebp ecx fs r10 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) cl:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(64) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(8)

l000000000040E0A0:
	r13_1415 = r8_104 + rbp_100
	r11d_1417 = 0x00000000 (alias)
	r11b_1083 = 0x00 (alias)
// DataOut: ebp fs r10 r11 r11b r11d r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040D9CD:
	r13_1415 = r8_104 + rbp_100
	rdx_1021 = r9_1478
	branch memcmp(r13_1415, qwLoc98_1508, r9_1478) != 0x00000000 l000000000040E0B0
// DataOut: ebp fs r10 r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(8)

l000000000040E0B0:
	r11d_1417 = 0x00000000 (alias)
	r11b_1083 = 0x00 (alias)
// DataOut: ebp fs r10 r11 r11b r11d r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):rdx -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040DA05:
	branch bLocC5_1504 != 0x00 l000000000040DC40
// DataOut: ebp fs r10 r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):rdx -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040DA10:
	r11d_1417 = 0x00000001 (alias)
	r11b_1083 = 0x01 (alias)
// DataOut: ebp fs r10 r11 r11b r11d r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):rdx -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040DA20:
	word32 r12d_1148 = (word32) Mem0[r13_1415:byte]
	byte r12b_1147 = (byte) r12d_1148
	branch r12b_1147 >u 0x7E l000000000040DE18
// DataOut: ebp fs r10 r11 r11b r11d r12b r12d r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040DE18:
	word64 rax_1005
	word64 rdx_1073
	byte dl_1076
	byte r11b_1059
	word64 rbx_1006
	byte dl_1180
	branch rax_52 != 0x0000000000000001 l000000000040E0C0
// DataOut: fs r10 r11b r11d r12b r12d r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E0C0:
	branch r15_1092 == 0xFFFFFFFFFFFFFFFF l000000000040E285
// DataOut: fs r10 r11b r11d r12b r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E285:
	r15_1092 = DPB(rax_116, strlen(r8_104), 0)
	r11b_1083 = (byte) (uint64) r11d_1417 (alias)
// DataOut: fs r10 r11b r12b r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E0D6:
	esi = 0x00000001 (alias)
	word64 rbx_1101 = 0x0000000000000000
	word32 r12d_1106 = 0x00000001
	r13_1110 = r8_104
// DataOut: fs r10 r12b r12d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E11D:
	word64 r14_1126 = rbx_1101 + rbp_100
	word64 r15_1128 = r8_104 + r14_1126
	word64 rdx_1129 = r15_1092 - r14_1126
	word64 rdi_1125 = fp - 0x000000000000004C
	word64 rax_1135 = DPB(rbp_100, mbrtowc(fp - 0x000000000000004C, r15_1128, rdx_1129, fp - 0x0000000000000048), 0)
	branch rax_1135 == 0x0000000000000000 l000000000040E30E
// DataOut: fs r10 r12b r12d r13 r14 r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E30E:
	r12d_1148 = (word32) r12b_1147
	rdx_1073 = (uint64) ((word32) (uint64) r12d_1106 ^ 0x00000001)
	rax_1005 = rbx_1101
	r11b_1059 = (byte) (word32) r11b_1083 (alias)
	r12b_1147 = (byte) r12d_1148 (alias)
	dl_1076 = (byte) rdx_1073 (alias)
// DataOut: dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E157:
	branch rax_1135 == 0xFFFFFFFFFFFFFFFF l000000000040E350
// DataOut: fs r10 r12b r12d r13 r14 r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(8)

l000000000040E350:
	r12d_1148 = (word32) r12b_1147
	rax_1005 = rbx_1101
	r12b_1147 = (byte) r12d_1148 (alias)
	r11b_1059 = (byte) (word32) r11b_1083 (alias)
	rdx_1073 = 0x0000000000000001
	dl_1076 = 0x01 (alias)
// DataOut: dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E161:
	branch rax_1135 == 0xFFFFFFFFFFFFFFFE l000000000040E391
// DataOut: fs r10 r12b r12d r13 r14 r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(8)

l000000000040E391:
	r12d_1148 = (word32) r12b_1147
	word64 r10_1299
	*r10Out = r15_1128
	rax_1005 = rbx_1101
	r12b_1147 = (byte) r12d_1148 (alias)
	r11b_1059 = (byte) (word32) r11b_1083 (alias)
	branch r15_1092 <=u r14_1126 l000000000040E3FE
// DataOut: fs r10 r11b r12b r12d r13 r14 r15 r8 r9 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E3DB:
	branch Mem0[rdx_1129:byte] != 0x00 l000000000040E3F0
// DataOut: fs r10 r11b r12b r12d r13 r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E3F0:
	rax_1005 = rax_1005 + 0x0000000000000001
	branch r15_1092 >u rbp_100 + rax_1005 l000000000040E3E8
// DataOut: fs r10 r11b r12b r12d r13 r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E3E8:
	branch Mem0[r13_1415 + rax_1005:byte] == 0x00 l000000000040E3FE
// DataOut: fs r10 r11b r12b r12d r13 r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E3E1:
// DataOut: fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E3FE:
	rdx_1073 = 0x0000000000000001
	dl_1076 = 0x01 (alias)
// DataOut: dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E16B:
	branch bLocC5_1504 == 0x00 l000000000040E1BF
// DataOut: fs r10 r12b r12d r13 r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E172:
	branch dwLocC4_1530 != 0x00000002 l000000000040E1BF
// DataOut: fs r10 r12b r12d r13 r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E179:
	branch rax_1135 == 0x0000000000000001 l000000000040E1BF
// DataOut: fs r10 r12b r12d r13 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E17F:
	word64 rdx_1257 = 0x0000000000000001
// DataOut: fs r10 r12b r12d r13 r15 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:fp - 0x0000000000000048 rdi:fp - 0x000000000000004C edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E190:
	rdi_1125 = DPB(rdi_1125, (word32) Mem0[r15_1128 + rdx_1257:byte], 0) (alias)
	byte cl_1275 = (byte) (rdi_1125 - 0x000000000000005B)
	branch cl_1275 >u 0x21 l000000000040E1B6
// DataOut: cl fs r10 r12b r12d r13 r15 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:0x0000000000000001 eax:0x00000001 r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:0x01 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E19D:
	rdi_1125 = 0x000000000000002B
	branch (0x0000000000000001 << cl_1275 & 0x000000000000002B) != 0x0000000000000000 l000000000040E260
// DataOut: fs r10 r12b r12d r13 r15 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:0x0000000000000001 eax:0x00000001 r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:0x01 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E260:
	r11_1295 = r14_102
// DataOut: fs r11 r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:0x0000000000000001 eax:0x00000001 r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:0x01 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:0x000000000000002B edi:0x0000002B ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0068(32) Local -0088(64) Local -0090(64) Local -00C4(64) Local -00D0(64)

l000000000040E1B6:
	rdx_1257 = rdx_1257 + 0x0000000000000001
	branch rdx_1257 != rax_1135 l000000000040E190
// DataOut: fs r10 r12b r12d r13 r15 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:0x0000000000000001 eax:0x00000001 r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:0x01 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E1BF:
	branch iswprint((uint64) dwLoc4C) != 0x00000000 l000000000040E1DE
// DataOut: fs r10 r12b r12d r13 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E1DA_1:
	r12d_1106 = 0x00000000
// DataOut: fs r10 r12b r12d r13 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:0x0000000000000000 eax:0x00000000 r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:0x00 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:fp - 0x0000000000000048 edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E1DE:
	rbx_1101 = rbx_1101 + rax_1135
	branch mbsinit(fp - 0x0000000000000048) == 0x00000000 l000000000040E11D
// DataOut: fs r10 r12b r12d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:0x0000000000000000 eax:0x00000000 r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:0x00 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:fp - 0x0000000000000048 edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E1EE:
	esi = (word32) (uint64) r12d_1106 (alias)
	r12d_1148 = (word32) r12b_1147
	rdx_1073 = (uint64) ((word32) (uint64) esi ^ 0x00000001)
	r11b_1059 = (byte) (word32) r11b_1083 (alias)
	r12b_1147 = (byte) r12d_1148 (alias)
	rax_1005 = rbx_1101
	dl_1076 = (byte) rdx_1073 (alias)
// DataOut: dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:fp - 0x0000000000000048 edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E22D:
	branch rax_1005 <=u 0x0000000000000001 l000000000040DE61
// DataOut: dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r10:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E237:
	dl_1180 = dl_1076 & bLocD8_1505
	rdx_1021 = DPB(rdx_1073, dl_1180, 0) (alias)
// DataOut: dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r10:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(0)

l000000000040DE24:
	word32 edx_1064 = (word32) Mem0[Mem0[__ctype_b_loc():word64] + DPB(rdx_1021, (word32) r12b_1147, 0) * 0x0000000000000002:word16]
	rdx_1073 = (uint64) ((word32) (uint64) (DPB(edx_1064, (word16) edx_1064 >>u 0x000E, 0) ^ 0x00000001) & 0x00000001)
	r11b_1059 = (byte) (uint64) r11d_1417 (alias)
	rax_1005 = 0x0000000000000001
	dl_1076 = (byte) rdx_1073 (alias)
// DataOut: dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040DE61:
	dl_1180 = dl_1076 & bLocD8_1505
	rbx_1006 = rbx_1491
	rdx_1021 = DPB(rdx_1073, dl_1180, 0) (alias)
	branch dl_1180 == 0x00 l000000000040DAF8
// DataOut: dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(0)

l000000000040DAF8:
	branch al_107 == 0x00 l000000000040DB09
// DataOut: fs r10 r11b r12b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DAFF:
	branch al_111 != 0x00 l000000000040DB2E
// DataOut: fs r10 r11b r12b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB09:
	branch qwArg08 == 0x0000000000000000 l000000000040DB2E
// DataOut: fs r10 r11b r12b r14 r15 r8 r9 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB13:
	word64 rdx_1033 = (uint64) r12d_1148
	rax_1005 = (uint64) (0x00000001 << (byte) ((uint64) ((word32) ((uint64) r12d_1148) & 0x0000001F)))
	rdx_1021 = DPB(rdx_1033, (word32) ((byte) rdx_1033 >>u 0x05), 0) (alias)
	branch (Mem0[qwArg08 + rdx_1021 * 0x0000000000000004:word32] & (word32) rax_1005) != 0x00000000 l000000000040DB33
// DataOut: fs r10 r11b r12b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB2E:
	branch r11b_1059 == 0x00 l000000000040DB50
// DataOut: fs r10 r12b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB33:
	branch bLocC5_1504 != 0x00 l000000000040DC40
// DataOut: fs r10 r12b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB3E:
	branch rbx_1491 >=u r14_102 l000000000040DB4C
// DataOut: fs r10 r12b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB43:
	Mem1010[rdi + rbx_1491:byte] = 0x5C
	rax_1005 = rdi
// DataOut: fs r10 r12b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB4C:
	rbx_1006 = rbx_1491 + 0x0000000000000001
// DataOut: fs r10 r12b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB50:
	rbp_100 = rbp_100 + 0x0000000000000001
// DataOut: ebp fs r10 r12b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DE6B:
	rbx_1006 = rbx_1491
	rax_1005 = rax_1005 + rbp_100
	byte dil_807 = (byte) (word32) bLocC5_1504
// DataOut: dil dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEF0:
	branch dl_1180 != 0x00 l000000000040DE80
// DataOut: dil dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DE80:
	branch dil_807 != 0x00 l000000000040DC40
// DataOut: dil dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DC40:
	r11_1295 = r14_102
	r13_1110 = r8_104
// DataOut: fs r11 r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> sil:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0068(32) Local -0088(64) Local -0090(64) Local -00C4(64) Local -00D0(64)

l000000000040DE89:
	branch rbx_1006 >=u r14_102 l000000000040DE92
// DataOut: dil dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DE8E:
	Mem913[rdi + rbx_1006:byte] = 0x5C
// DataOut: dil dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DE92:
	branch r14_102 <=u rbx_1006 + 0x0000000000000001 l000000000040DEAA
// DataOut: dil dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DE9B:
	word64 rsi_908 = (uint64) (DPB(esi, (byte) (uint64) r12d_1148 >>u 0x06, 0) + 0x00000030)
	Mem912[rdi + 0x0000000000000001 + rbx_1006:byte] = (byte) rsi_908
	esi = (word32) rsi_908 (alias)
// DataOut: dil dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rsi:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEAA:
	branch r14_102 <=u rbx_1006 + 0x0000000000000002 l000000000040DEC5
// DataOut: dil dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rsi:<invalid> sil:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEB3:
	word64 rsi_899 = (uint64) ((word32) (uint64) (DPB(esi, (byte) (uint64) r12d_1148 >>u 0x03, 0) & 0x00000007) + 0x00000030)
	Mem903[rdi + 0x0000000000000002 + rbx_1006:byte] = (byte) rsi_899
	esi = (word32) rsi_899 (alias)
// DataOut: dil dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rsi:<invalid> sil:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEC5:
	rbx_1006 = rbx_1006 + 0x0000000000000003
	r12b_1147 = (byte) (uint64) ((word32) (uint64) (r12d_1148 & 0x00000007) + 0x00000030) (alias)
// DataOut: dil dl fs r10 r11b r12b r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rsi:<invalid> sil:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEF4:
	branch r11b_1059 == 0x00 l000000000040DED1
// DataOut: dil dl fs r10 r11b r12b r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEF9:
	branch rbx_1006 >=u r14_102 l000000000040DF02
// DataOut: dil dl fs r10 r12b r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEFE:
	Mem868[rdi + rbx_1006:byte] = 0x5C
// DataOut: dil dl fs r10 r12b r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DF02:
	rbx_1006 = rbx_1006 + 0x0000000000000001
	r11b_1059 = 0x00 (alias)
// DataOut: dil dl fs r10 r11b r12b r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DED1:
	rbp_100 = rbp_100 + 0x0000000000000001
	branch rax_1005 <=u rbp_100 l000000000040DB54
// DataOut: dil dl ebp fs r10 r11b r12b r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB54:
	*r8Out = r8_104
	*r9Out = r9_1478
	branch rbx_1006 >=u r14_102 l000000000040DB62
// DataOut: ebp fs r10 r12b r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB59:
	Mem758[rdi + rbx_1006:byte] = r12b_1147
	rax_1005 = rdi
// DataOut: ebp fs r10 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB62:
	al_115 = rbp_100 != r15_1092
	rbx_1491 = rbx_1006 + 0x0000000000000001
	rax_116 = DPB(rax_1005, al_115, 0) (alias)
	branch r15_1092 != 0xFFFFFFFFFFFFFFFF l000000000040D9A0
// DataOut: al ebp fs r10 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB76:
	branch Mem0[r8_104 + rbp_100:byte] != 0x00 != 0x00 l000000000040D9A8
// DataOut: ebp fs r10 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB86:
	r11_1295 = r14_102
	*r11Out = r11_1295
	r13_1110 = r8_104
	branch rbx_1491 != 0x0000000000000000 l000000000040DBA3
// DataOut: fs r10 r11 r13 r15 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0068(32) Local -0088(64) Local -0090(64) Local -0098(0) Local -00C4(0) Local -00C5(0) Local -00D0(64)

l000000000040DB91:
	branch dwLocC4_1530 != 0x00000002 l000000000040DBA3
// DataOut: fs r10 r11 r13 r15 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0068(32) Local -0088(64) Local -0090(64) Local -0098(0) Local -00C4(64) Local -00C5(0) Local -00D0(64)

l000000000040DB98:
	branch bLocC5_1504 != 0x00 l000000000040DC46
// DataOut: fs r10 r11 r13 r15 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0068(32) Local -0088(64) Local -0090(64) Local -0098(0) Local -00C4(64) Local -00C5(0) Local -00D0(64)

l000000000040DC46:
	word64 rbx_332
	word64 rbp_334
	word64 r8_335
	word64 r9_336
	word64 r10_337
	word64 r11_338
	word32 r12d_339
	word64 r13_340
	word64 r14_341
	word64 r15_342
	rax_242 = fn000000000040D8A0(r15_1092, r13_1110, r11_1295, rdi, (uint64) dwLocC4_1530, (word32) (uint64) ((word32) (uint64) r9d & 0xFFFFFFFD), fs, 0x0000000000000000, qwLoc88_1605, qwLoc90_1606, out rbx_332, out rsp_256, out rbp_334, out r8_335, out r9_336, out r10_337, out r11_338, out r12d_339, out r13_340, out r14_341, out r15_342)
// DataOut: fs r10 r11 r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> cl:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r12:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040DBA3:
	branch bLocC5_1504 != 0x00 l000000000040DBE4
// DataOut: fs r10 r11 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0098(0) Local -00D0(64)

l000000000040DBAA:
	branch qwLoc98_1508 == 0x0000000000000000 l000000000040DBE4
// DataOut: fs r10 r11 r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0098(64) Local -00D0(64)

l000000000040DBB2:
	byte al_430 = (byte) (word32) Mem0[qwLoc98_1508:byte]
	branch al_430 == 0x00 l000000000040DBE4
// DataOut: al fs r10 r11 r8 r9 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -00D0(64)

l000000000040DBBE:
	word64 rdx_437 = qwLoc98_1508 - rbx_1491
// DataOut: al fs r10 r11 r8 r9 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -00D0(64)

l000000000040DBD0:
	branch r14_102 <=u rbx_1491 l000000000040DBD8
// DataOut: al fs r10 r11 r8 r9 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> rdx:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -00D0(64)

l000000000040DBD5:
	Mem460[rdi + rbx_1491:byte] = al_430
// DataOut: fs r10 r11 r8 r9 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> rdx:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -00D0(64)

l000000000040DBD8:
	rbx_1491 = rbx_1491 + 0x0000000000000001
	al_430 = (byte) (word32) Mem0[rdx_437 + rbx_1491:byte] (alias)
	branch al_430 != 0x00 l000000000040DBD0
// DataOut: al fs r10 r11 r8 r9 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> rdx:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -00D0(64)

l000000000040DBE4:
	rax_242 = rbx_1491
	branch rbx_1491 >=u r14_102 l000000000040DC86
// DataOut: fs r10 r11 r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -00D0(64)

l000000000040DBF0:
	Mem421[rdi + rbx_1491:byte] = 0x00
// DataOut: fs r10 r11 r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040DC86:
	branch (Mem0[rsp_256 + 0x00000000000000B8:word64] ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l000000000040E423
// DataOut: fs r10 r11 r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r12:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040E423:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r12:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040DC9D:
	word64 rsp_262 = rsp_256 + 200
	word64 rbx_264
	*rbxOut = Mem0[rsp_262:word64]
	word64 rbp_267
	*rbpOut = Mem0[rsp_262 + 0x0000000000000008:word64]
	word32 r12d_271
	*r12dOut = (word32) Mem0[rsp_262 + 0x0000000000000010:word64]
	word64 r13_274
	*r13Out = Mem0[rsp_262 + 0x0000000000000018:word64]
	word64 r14_276
	*r14Out = Mem0[rsp_262 + 0x0000000000000020:word64]
	word64 r15_279
	*r15Out = Mem0[rsp_262 + 0x0000000000000028:word64]
	word64 rsp_280
	*rspOut = rsp_262 + 0x0000000000000030
	return rax_242
// DataOut: ebp fs r10 r11 r12d r13 r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r12:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040DEDE:
	branch rbx_1006 >=u r14_102 l000000000040DEE7
// DataOut: dil dl fs r10 r11b r12b r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEE3:
	Mem855[rdi + rbx_1006:byte] = r12b_1147
// DataOut: dil dl fs r10 r11b r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEE7:
	r12d_1148 = (word32) Mem0[r8_104 + rbp_100:byte]
	r12b_1147 = (byte) r12d_1148 (alias)
	rbx_1006 = rbx_1006 + 0x0000000000000001
// DataOut: dil dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DA2F:
	word32 eax_649 = (word32) r12b_1147
	word64 rax_650 = DPB(rax_116, eax_649, 0)
	word64 rsp_652
	word64 r15_653
	word64 rcx_654
	word64 r14_655
	word32 r14d_656
	word32 r8d_657
	word64 r13_658
	word64 rdx_659
	word64 r12_660
	word64 rbp_661
	word64 rbx_662
	word32 ebx_663
	word32 r9d_664
	byte SCZO_665
	word64 rax_666
	word64 rdi_667
	word64 rsi_668
	selector fs_669
	word32 eax_670
	byte SZO_671
	bool C_672
	byte al_673
	byte CZ_674
	word64 r11_675
	bool Z_676
	word32 edi_677
	word32 esi_678
	word64 r9_679
	word32 ebp_680
	word64 r8_681
	byte cl_682
	word32 ecx_683
	word32 r11d_684
	word32 r12d_685
	byte r12b_686
	word32 edx_687
	word16 dx_688
	byte dl_689
	byte r11b_690
	word64 r10_691
	byte dil_692
	byte sil_693
	call Mem0[rax_650 * 0x0000000000000008 + 0x00416068:word64] (retsize: 8; depth: 256)
		uses: al_651,bLoc61_525,bLoc62_522,bLoc63_112,bLocC0_108,bLocC5_75,bLocD8_76,C_633,cl_569,CZ_648,dil_531,dl_534,dwLoc68_38,dwLocA8_624,dwLocB0_520,dwLocB8_529,dwLocC4_74,dx_535,eax_649,ebp_542,ebx_555,ecx_571,edi_545,edx_536,esi_544,fs,qwLoc08_4,qwLoc10_9,qwLoc18_15,qwLoc20_20,qwLoc28_23,qwLoc30_26,qwLoc40_49,qwLoc48_519,qwLoc60_523,qwLoc70_524,qwLoc78_521,qwLoc80_53,qwLoc88_71,qwLoc90_72,qwLoc98_77,qwLocA0_39,qwLocA8_527,qwLocB0_626,qwLocB8_625,qwLocC0_73,qwLocD0_34,qwLocD8_70,qwLocE8,qwLocF0,qwLocF8,r10_532,r11_632,r11b_627,r11d_628,r12_645,r12b_646,r12d_644,r13_641,r14_563,r14d_562,r15_565,r8_629,r8d_642,r9_630,r9d_639,rax_650,rbp_557,rbx_556,rcx_643,rdi_637,rdx_640,rsi_636,rsp_30,SCZO_647,sil_530,SZO_634,Z_631
		defs: al_673,C_672,cl_682,CZ_674,dil_692,dl_689,dx_688,eax_670,ebp_680,ebx_663,ecx_683,edi_677,edx_687,esi_678,fs_669,r10_691,r11_675,r11b_690,r11d_684,r12_660,r12b_686,r12d_685,r13_658,r14_655,r14d_656,r15_653,r8_681,r8d_657,r9_679,r9d_664,rax_666,rbp_661,rbx_662,rcx_654,rdi_667,rdx_659,rsi_668,rsp_652,SCZO_665,sil_693,SZO_671,Z_676
	return rax_666
// DataOut: ebp fs r10 r11 r12d r13 r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040D8A0_exit:
// DataOut: ebp r10 r11 r12d r13 r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040E450(word64 rcx, word64 rdx, word64 rbx, word64 rbp, word64 rsi, word32 edi, word64 r11, word64 r12, word64 r13, word64 r14, word64 r15, selector fs, ptr64 & rbxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 r12 r13 r14 r15 rbp rbx rcx rdx rsi
// LiveOut: ebx r10 r11 r12 r12b r12d r13 r13b r14 r15 r15b r8 r9 rax rbp rbx rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040E450_entry:
// DataOut: edi fs r11 r12 r13 r14 r15 rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: v3(64)

l000000000040E450:
	Mem4[v3 - 0x0000000000000008:word64] = r15
	Mem10[v3 - 0x0000000000000010:word64] = r14
	Mem13[v3 - 0x0000000000000018:word64] = r13
	Mem16[v3 - 0x0000000000000020:word64] = r12
	Mem19[v3 - 0x0000000000000028:word64] = rbp
	Mem22[v3 - 0x0000000000000030:word64] = rbx
	Mem27[v3 - 0x0000000000000058:word64] = rsi
	Mem29[v3 - 0x0000000000000050:word64] = rdx
	word32 eax_33 = (word32) (uint64) Mem29[__errno_location():word32]
	word64 r12_195 = Mem29[0x000000000061A5D8:word64]
	Mem39[v3 - 0x0000000000000044:word32] = eax_33
	word64 r15_6 = (int64) edi
	word32 r15d_7 = (word32) r15_6
	branch r15d_7 < 0x00000000 l000000000040E5F7
// DataOut: edi fs r11 r12 r15 r15d rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E5F7:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000078 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid>

l000000000040E48C:
	branch r15d_7 <u Mem39[0x000000000061A5F0:word32] l000000000040E4FA
// DataOut: edi fs r11 r12 r15 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000078 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid>

l000000000040E495:
	word64 r14_185 = (uint64) (rdi + 0x0000000000000001)
	branch r12_195 != 0x000000000061A5E0 l000000000040E5E0
// DataOut: ebp fs r11 r12 r14 r15 rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000078 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid>

l000000000040E5E0:
	word64 r8_221
	word64 rax_222 = fn0000000000410C90(rdx, r14_185 << 0x0000000000000004, r12_195, out r8_221)
	Mem225[0x000000000061A5D8:word64] = rax_222
	r12_195 = rax_222
// DataOut: ebp fs r11 r12 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000078 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:<invalid> rsi:<invalid>

l000000000040E4B0:
	word64 r8_211
	word64 rax_212 = fn0000000000410C90(rdx, r14_185 << 0x0000000000000004, 0x0000000000000000, out r8_211)
	word64 rsi_213 = Mem39[0x000000000061A5E0:word64]
	word64 rdi_214 = Mem39[0x000000000061A5E8:word64]
	Mem217[0x000000000061A5D8:word64] = rax_212
	Mem218[rax_212:word64] = rsi_213
	Mem219[rax_212 + 0x0000000000000008:word64] = rdi_214
	r12_195 = rax_212
// DataOut: ebp fs r11 r12 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000078 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:<invalid> rsi:<invalid>

l000000000040E4D6:
	word64 rdi_197 = (uint64) Mem39[0x000000000061A5F0:word32]
	memset((rdi_197 << 0x0000000000000004) + r12_195, 0x0000000000000000, r14_185 - rdi_197 << 0x0000000000000004)
	Mem206[0x000000000061A5F0:word32] = rdi + 0x0000000000000001
// DataOut: fs r11 r12 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000078 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> cl:<invalid>

l000000000040E4FA:
	word64 r12_52 = r12_195 + (r15_6 << 0x0000000000000004)
	word32 ebp_51 = (word32) (uint64) Mem39[rcx + 0x0000000000000004:word32]
	word64 r8_55 = (uint64) Mem39[r11:word32]
	word64 r11_58 = Mem39[r12_52:word64]
	word64 r14_59 = Mem39[r12_52 + 0x0000000000000008:word64]
	Mem60[v3 - 0x0000000000000068:word64] = Mem39[rcx + 0x0000000000000030:word64]
	word64 rax_61 = Mem60[rcx + 0x0000000000000028:word64]
	word64 rcx_66 = Mem60[v3 - 0x0000000000000050:word64]
	word64 rdx_67 = Mem60[v3 - 0x0000000000000058:word64]
	Mem71[v3 - 0x0000000000000078:word64] = r11 + 0x0000000000000008
	Mem73[v3 - 0x0000000000000070:word64] = rax_61
	Mem74[v3 - 0x0000000000000040:word64] = r11_58
	word32 ebp_63 = (word32) (uint64) (ebp_51 | 0x00000001)
	word64 rbx_79
	word64 r8_82
	word64 r9_83
	word64 r10_84
	word64 r11_85
	word32 r12d_86
	word64 r13_87
	word64 r15_89
	word64 rbp_106
	word64 r14_107
	word64 rsp_108
	word64 rax_90 = fn000000000040D8A0(rcx_66, rdx_67, r11_58, r14_59, r8_55, (word32) (uint64) ebp_63, fs, qwArg00, qwArg08, qwArg10, out rbx_79, out rsp_108, out rbp_106, out r8_82, out r9_83, out r10_84, out r11_85, out r12d_86, out r13_87, out r14_107, out r15_89)
	word64 r11_92 = Mem74[rsp_108 + 0x0000000000000038:word64]
	*r11Out = r11_92
	branch r11_92 >u rax_90 l000000000040E5BF
// DataOut: ebp fs r10 r11 r12 r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000078 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid>

l000000000040E554:
	Mem146[r12_52:word64] = rax_90 + 0x0000000000000001
	word64 rsi_142 = rax_90 + 0x0000000000000001
	branch r14_107 == 0x000000000061B220 l000000000040E577
// DataOut: ebp fs r11 r12 r14 r15 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid>

l000000000040E565:
	Mem179[rsp_108 + 0x0000000000000038:word64] = rax_90 + 0x0000000000000001
	free(r14_107)
	rsi_142 = Mem179[rsp_108 + 0x0000000000000038:word64]
// DataOut: ebp fs r11 r12 r15 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid>

l000000000040E577:
	Mem150[rsp_108 + 0x0000000000000038:word64] = rsi_142
	word64 rax_151 = fn0000000000410C40(rsi_142, rsi_142)
	Mem152[r12_52 + 0x0000000000000008:word64] = rax_151
	word64 r8_155 = (uint64) Mem152[r11_92:word32]
	word64 rcx_156 = Mem152[rsp_108 + 0x0000000000000028:word64]
	word64 rdx_159 = Mem152[rsp_108 + 0x0000000000000020:word64]
	word64 rsi_160 = Mem152[rsp_108 + 0x0000000000000038:word64]
	Mem162[rsp_108 + 0x0000000000000010:word64] = Mem152[rbx_79 + 0x0000000000000030:word64]
	word64 rax_163 = Mem162[rbx_79 + 0x0000000000000028:word64]
	Mem164[rsp_108:word64] = r15_89
	Mem165[rsp_108 + 0x0000000000000008:word64] = rax_163
	word64 rbx_166
	word64 r8_169
	word64 r9_170
	word64 r10_171
	word64 r11_172
	word32 r12d_173
	word64 r13_174
	word64 r15_176
	fn000000000040D8A0(rcx_156, rdx_159, rsi_160, rax_151, r8_155, (word32) (uint64) ebp_63, fs, qwArg00, qwArg08, qwArg10, out rbx_166, out rsp_108, out rbp_106, out r8_169, out r9_170, out r10_171, out r11_172, out r12d_173, out r13_174, out r14_107, out r15_176)
// DataOut: fs r10 r11 r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid>

l000000000040E5BF:
	Mem111[rbp_106:word32] = (word32) (uint64) Mem74[rsp_108 + 0x0000000000000034:word32]
	word64 rsp_112 = rsp_108 + 0x0000000000000048
	word64 rbx_116
	*rbxOut = Mem111[rsp_112:word64]
	word64 rbp_118
	*rbpOut = Mem111[rsp_112 + 0x0000000000000008:word64]
	word64 r12_121
	*r12Out = Mem111[rsp_112 + 0x0000000000000010:word64]
	word64 r13_124
	*r13Out = Mem111[rsp_112 + 0x0000000000000018:word64]
	word64 r14_126
	*r14Out = Mem111[rsp_112 + 0x0000000000000020:word64]
	word64 r15_128
	*r15Out = Mem111[rsp_112 + 0x0000000000000028:word64]
	word64 rsp_130
	*rspOut = rsp_112 + 0x0000000000000030
	return r14_107
// DataOut: ebx fs r10 r11 r12 r12b r12d r13 r13b r14 r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid>

fn000000000040E450_exit:
// DataOut: ebx r10 r11 r12 r12b r12d r13 r13b r14 r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid>



word64 fn000000000040E600(word64 rdi, word64 r8, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rdi
// LiveOut: rax
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: r12 rbp rbx rsp
fn000000000040E600_entry:
// DataOut: ebx fs r10 r11 r13b r14 r15 r8 r9 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E600:
	__errno_location()
	word32 r12d_17 = (word32) (uint64) Mem0[r8:word32]
	word64 rdi_21 = 0x000000000061B320
	branch rdi == 0x0000000000000000 l000000000040E61E
// DataOut: fs r10 r11 r12d r13b r14 r15 r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(32)

l000000000040E61A_1:
	rdi_21 = rdi
// DataOut: fs r10 r11 r12d r13b r14 r15 r8 r9 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rax:<invalid> r12:<invalid> rdi:0x000000000061B320 rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l000000000040E61E:
	word64 rax_27 = fn0000000000410E00(0x0000000000000038, rdi_21)
	Mem28[r11:word32] = r12d_17
	return rax_27
// DataOut: ebx fs r10 r11 r13b r14 r15 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rax:<invalid> r12:<invalid> rdi:0x000000000061B320 rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040E600_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rax:<invalid> r12:r12 rdi:<invalid> rbx:rbx rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word32 fn000000000040E630(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: eax
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn000000000040E630_entry:
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E630:
	word64 rax_12 = 0x000000000061B320
	branch rdi == 0x0000000000000000 l000000000040E63C
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E638_1:
	rax_12 = rdi
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320

l000000000040E63C:
	return (word32) (uint64) Mem0[rax_12:word32]
// DataOut: eax ebx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

fn000000000040E630_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



void fn000000000040E640(word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi rdi
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn000000000040E640_entry:
// DataOut: ebx esi fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E640:
	word64 rax_12 = 0x000000000061B320
	branch rdi == 0x0000000000000000 l000000000040E64C
// DataOut: ebx esi fs r10 r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E648_1:
	rax_12 = rdi
// DataOut: ebx esi fs r10 r11 r12 r13 r13b r14 r15 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320

l000000000040E64C:
	Mem11[rax_12:word32] = esi
	return
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

fn000000000040E640_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



word64 fn000000000040E650(word32 edx, word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx esi rdi sil
// LiveOut: rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040E650_entry:
// DataOut: ebx edx esi fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx rdi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E650:
	word64 rax_12 = 0x000000000061B320
	word32 ecx_10 = (word32) (uint64) esi
	branch rdi == 0x0000000000000000 l000000000040E65E
// DataOut: cl ebx edx fs r10 r11 r12 r13b r14 r15 r8 r9 rax rbp rbx rdi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E65A_1:
	rax_12 = rdi
// DataOut: cl ebx edx fs r10 r11 r12 r13b r14 r15 r8 r9 rax rbp rbx sil
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320 rcx:(uint64) esi

l000000000040E65E:
	word64 rsi_20 = rax_12 + DPB(rsi, (word32) (sil >>u 0x05), 0) * 0x0000000000000004
	word32 edi_25 = (word32) (uint64) Mem0[rsi_20 + 0x0000000000000008:word32]
	byte cl_16 = (byte) (uint64) (ecx_10 & 0x0000001F)
	Mem42[rsi_20 + 0x0000000000000008:word32] = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) (edx ^ (word32) ((uint64) ((word32) ((uint64) edi_25) >>u cl_16))) & 0x00000001) << cl_16) ^ edi_25)
	return rsi_20
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rcx:(uint64) esi

fn000000000040E650_exit:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid>



void fn000000000040E6B0(word64 rdx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi rax rdi
// Preserved: rsp
fn000000000040E6B0_entry:
// DataOut: rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6B0:
	branch rdi != 0x0000000000000000 l000000000040E6C0
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E6BC_1:
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320

l000000000040E6C0:
	Mem13[0x000000000061B320:word32] = 0x00000008
	branch rsi == 0x0000000000000000 l000000000040E6DD
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320

l000000000040E6CB:
	branch rdx == 0x0000000000000000 l000000000040E6DD
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320

l000000000040E6DD:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320

l000000000040E6D0:
	Mem21[0x000000000061B348:word64] = rsi
	Mem22[0x000000000061B350:word64] = rdx
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320

fn000000000040E6B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320 rdi:0x000000000061B320



word64 fn000000000040E6F0(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 r8, word64 r11, selector fs, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r8 rcx rdi rdx rsi
// LiveOut: r10 r11 r8 r9 rax
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 r15 rbp rbx rcx rdi rdx rsi rsp
fn000000000040E6F0_entry:
// DataOut: fs r11 r8 rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6F0:
	word64 rbx_28 = r8
	branch r8 != 0x0000000000000000 l000000000040E716
// DataOut: ebx fs r11 r13 r14 r15 r8 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E712_1:
	rbx_28 = 0x000000000061B320
// DataOut: ebx fs r11 r13 r14 r15 r8 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 rax:0x000000000061B320 r15:rcx r14:rdx r13:rsi rbx:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040E716:
	__errno_location()
	word64 rbx_57
	word64 rsp_58
	word64 rbp_59
	word64 r8_60
	word64 r9_61
	word64 r10_62
	word64 r11_63
	word32 r12d_64
	word64 r13_65
	word64 r14_66
	word64 r15_67
	word64 rax_68 = fn000000000040D8A0(rcx, rdx, rsi, rdi, (uint64) Mem0[r11:word32], (word32) (uint64) Mem0[r11 + 0x0000000000000004:word32], fs, rbx_28 + 0x0000000000000008, Mem0[rbx_28 + 0x0000000000000028:word64], Mem0[rbx_28 + 0x0000000000000030:word64], out rbx_57, out rsp_58, out rbp_59, out r8_60, out r9_61, out r10_62, out r11_63, out r12d_64, out r13_65, out r14_66, out r15_67)
	Mem70[r13_65:word32] = r12d_64
	return rax_68
// DataOut: fs r10 r11 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 rax:0x000000000061B320 r15:rcx r14:rdx r13:rsi rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040E6F0_exit:
// DataOut: r10 r11 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> eax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):rdi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040E930(word64 rbx, word64 rbp, word64 rdi, word64 r11, word64 r12, word64 r13, word64 r14, word64 r15, selector fs, ptr64 & rbxOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r12 r13 r14 r15 rbp rbx rdi
// LiveOut: ebx r10 r11 r12 r12d r13 r13b r14 r15 r8 r9 rax rbp rbx
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040E930_entry:
// DataOut: fs r11 r12 r13 r14 r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E930:
// DataOut: edi fs r11 r12 r13 r14 r15 rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E941_thunk_fn000000000040E450:
	word64 rbx_20
	word64 rsp_21
	word64 rbp_22
	word64 r8_23
	word64 r9_24
	word64 r10_25
	word64 r11_26
	word64 r12_27
	word64 r13_28
	word64 r14_29
	word64 r15_30
	return fn000000000040E450(0x000000000061B320, 0xFFFFFFFFFFFFFFFF, rbx, rbp, rdi, 0x00000000, r11, r12, r13, r14, r15, fs, out rbx_20, out rsp_21, out rbp_22, out r8_23, out r9_24, out r10_25, out r11_26, out r12_27, out r13_28, out r14_29, out r15_30)
// DataOut: ebx fs r10 r11 r12 r12d r13 r13b r14 r15 r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:rdi rcx:0x000000000061B320 rdx:0xFFFFFFFFFFFFFFFF rdi:<invalid>

fn000000000040E930_exit:
// DataOut: ebx r10 r11 r12 r12d r13 r13b r14 r15 r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid>



word64 fn000000000040E970(word64 rdx, word32 esi, word32 edi, word64 r11, word64 r12, word64 r13, word64 r14, word64 r15, selector fs, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi esi fs r11 r12 r13 r14 r15 rdx
// LiveOut: r10 r11 r12 r13 r14 r15 r9
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbp rbx rsp
fn000000000040E970_entry:
// DataOut: edi esi fs r11 r12 r13 r14 r15 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E970:
	fn000000000040D740(esi, fp - 0x0000000000000058)
	word64 rbx_11 = (uint64) edi
	word64 rbx_28
	word64 rsp_29
	word64 rbp_30
	word64 r8_31
	word64 r9_32
	word64 r10_33
	word64 r11_34
	word64 r12_35
	word64 r13_36
	word64 r14_37
	word64 r15_38
	fn000000000040E450(fp - 0x0000000000000058, 0xFFFFFFFFFFFFFFFF, rbx_11, rdx, rdx, (word32) (uint64) (word32) rbx_11, r11, r12, r13, r14, r15, fs, out rbx_28, out rsp_29, out rbp_30, out r8_31, out r9_32, out r10_33, out r11_34, out r12_35, out r13_36, out r14_37, out r15_38)
	return r9_32
// DataOut: fs r10 r11 r12 r13 r14 r15 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn000000000040E970_exit:
// DataOut: r10 r11 r12 r13 r14 r15 r9
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -16(fp):rbx -8(fp):rbp



word64 fn000000000040EAB0(word64 rbx, word64 rbp, word64 rdi, word64 r11, word64 r12, word64 r13, word64 r14, word64 r15, selector fs, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r12 r13 r14 r15 rbp rbx rdi
// LiveOut: r10 r11 r12 r12b r13 r14 r15 r15b r8 r9 rbp rbx
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040EAB0_entry:
// DataOut: fs r11 r12 r13 r14 r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EAB0:
// DataOut: dl fs r11 r12 r13 r14 r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EA00:
	word64 r8_8 = (uint64) edx
	word64 r8_15 = DPB(r8_8, (word32) ((byte) r8_8 >>u 0x05), 0)
	word32 r9d_34 = (word32) (uint64) Mem0[fp - 0x0000000000000040 + r8_15 * 0x0000000000000004:word32]
	byte cl_18 = (byte) (uint64) ((word32) (uint64) edx & 0x0000001F)
	Mem53[fp - 0x0000000000000040 + r8_15 * 0x0000000000000004:word32] = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) r9d_34 >>u cl_18) ^ 0x00000001) & 0x00000001) << cl_18) ^ r9d_34)
	word64 rbx_62
	word64 rsp_63
	word64 rbp_64
	word64 r8_65
	word64 r9_66
	word64 r10_67
	word64 r11_68
	word64 r12_69
	word64 r13_70
	word64 r14_71
	word64 r15_72
	fn000000000040E450(fp - 0x0000000000000048, 0xFFFFFFFFFFFFFFFF, rbx, rbp, rdi, 0x00000000, r11, r12, r13, r14, r15, fs, out rbx_62, out rsp_63, out rbp_64, out r8_65, out r9_66, out r10_67, out r11_68, out r12_69, out r13_70, out r14_71, out r15_72)
	return rbx_62
// DataOut: fs r10 r11 r12 r12b r13 r14 r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:0x000000000000003A rsi:0xFFFFFFFFFFFFFFFF

fn000000000040EAB0_exit:
// DataOut: r10 r11 r12 r12b r13 r14 r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r8b:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> r9:<invalid> r15:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):<invalid>



word64 fn000000000040EBF0(word64 rbx, word64 rbp, word64 rsi, word32 edi, word64 r11, word64 r12, word64 r13, word64 r14, word64 r15, selector fs, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 r12 r13 r14 r15 rbp rbx rsi
// LiveOut: r11 r12 r13 r14 r15 rbx
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040EBF0_entry:
// DataOut: edi fs r11 r12 r13 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EBF0:
// DataOut: edi fs r11 r12 r13 r14 r15 rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EBFC_thunk_fn000000000040E450:
	word64 rbx_15
	word64 rsp_16
	word64 rbp_17
	word64 r8_18
	word64 r9_19
	word64 r10_20
	word64 r11_21
	word64 r12_22
	word64 r13_23
	word64 r14_24
	word64 r15_25
	fn000000000040E450(0x000000000061A5A0, 0xFFFFFFFFFFFFFFFF, rbx, rbp, rsi, edi, r11, r12, r13, r14, r15, fs, out rbx_15, out rsp_16, out rbp_17, out r8_18, out r9_19, out r10_20, out r11_21, out r12_22, out r13_23, out r14_24, out r15_25)
	return rbx_15
// DataOut: fs r11 r12 r13 r14 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:0x000000000061A5A0 rdx:0xFFFFFFFFFFFFFFFF

fn000000000040EBF0_exit:
// DataOut: r11 r12 r13 r14 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rdx:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid>



word64 fn000000000040EC10(word64 rbx, word64 rbp, word64 rdi, word64 r11, word64 r12, word64 r13, word64 r14, word64 r15, selector fs, ptr64 & rbxOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r12 r13 r14 r15 rbp rbx rdi
// LiveOut: ebx r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040EC10_entry:
// DataOut: fs r11 r12 r13 r14 r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EC10:
// DataOut: edi fs r11 r12 r13 r14 r15 rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EC21_thunk_fn000000000040E450:
	word64 rbx_19
	word64 rsp_20
	word64 rbp_21
	word64 r8_22
	word64 r9_23
	word64 r10_24
	word64 r11_25
	word64 r12_26
	word64 r13_27
	word64 r14_28
	word64 r15_29
	return fn000000000040E450(0x000000000061A5A0, 0xFFFFFFFFFFFFFFFF, rbx, rbp, rdi, 0x00000000, r11, r12, r13, r14, r15, fs, out rbx_19, out rsp_20, out rbp_21, out r8_22, out r9_23, out r10_24, out r11_25, out r12_26, out r13_27, out r14_28, out r15_29)
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:rdi rcx:0x000000000061A5A0 rdx:0xFFFFFFFFFFFFFFFF rdi:<invalid>

fn000000000040EC10_exit:
// DataOut: ebx r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid>



void fn000000000040EC30(word64 rdx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx rax rcx rdx
// Preserved: r12 rbp rbx rsp
fn000000000040EC30_entry:
// DataOut: rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EC30:
	word64 rbx_17 = rdx - 0x0000000000000001
	branch rdx == 0x0000000000000000 l000000000040EC69
// DataOut: rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EC40:
	word64 rax_37 = __ctype_tolower_loc()
// DataOut: r12 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:rdx - 0x0000000000000001 -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040EC50:
	rcx = DPB(rcx, (word32) Mem0[rsi + rbx_17:byte], 0) (alias)
	Mem46[rdi + rbx_17:byte] = (byte) (uint64) Mem0[Mem0[rax_37:word64] + rcx * 0x0000000000000004:word32]
	rbx_17 = rbx_17 - 0x0000000000000001
	branch rbx_17 != 0xFFFFFFFFFFFFFFFF l000000000040EC50
// DataOut: r12 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:<invalid> r12:rsi rax:<invalid> ecx:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040EC69:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:<invalid> r12:rsi rax:<invalid> ecx:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040EC30_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:rdi r12:r12 ecx:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040EC80(word64 rdx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: rax
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx rax rcx rdx
// Preserved: r12 rbp rbx rsp
fn000000000040EC80_entry:
// DataOut: fs r11 r13 r14 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EC80:
	word64 rbx_17 = rdx - 0x0000000000000001
	branch rdx == 0x0000000000000000 l000000000040ECB9
// DataOut: fs r11 r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EC90:
	word64 rax_37 = __ctype_toupper_loc()
// DataOut: fs r11 r12 r13 r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:rdx - 0x0000000000000001 -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040ECA0:
	rcx = DPB(rcx, (word32) Mem0[rsi + rbx_17:byte], 0) (alias)
	Mem46[rdi + rbx_17:byte] = (byte) (uint64) Mem0[Mem0[rax_37:word64] + rcx * 0x0000000000000004:word32]
	rbx_17 = rbx_17 - 0x0000000000000001
	branch rbx_17 != 0xFFFFFFFFFFFFFFFF l000000000040ECA0
// DataOut: fs r11 r12 r13 r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:<invalid> r12:rsi rax:<invalid> ecx:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040ECB9:
	return rdi
// DataOut: fs r11 r13 r14 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:<invalid> r12:rsi rax:<invalid> ecx:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040EC80_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:rdi r12:r12 ecx:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040ECD0(word64 rax, word64 rcx, word64 rdx, word64 rsi, byte dil, selector fs, ptr64 & r8Out, ptr64 & r11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil fs rax rcx rdx rsi
// LiveOut: r11 r8 rax
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040ECD0_entry:
	*r8Out = r8
	*r11Out = r11
// DataOut: dil fs r11 r8 rax rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ECD0:
	word64 rax_29 = Mem0[rax + 0x0000000000000030:word64]
	word64 r12_17 = rsi
	word64 rbx_25 = rcx
	word64 rsi_31 = Mem0[fs:0x00000028:word64]
	word32 esi_35 = (word32) (uint64) Mem0[rax_29 + 0x0000000000000008:word32]
	branch esi_35 <= 0x0000000C l000000000040EEE0
// DataOut: fs r10 r11 r12 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0040(64) Local -04C8(32) Local -04F9(32)

l000000000040EEE0:
	rax_29 = 0x000000000000000C
	branch (word32) (uint64) esi_35 == 0x00000000 l000000000040EEEE
// DataOut: fs r10 r11 r12 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> -1273(fp):dil -1272(fp):r8 -1224(fp):esi -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EEEB_1:
// DataOut: fs r10 r11 r12 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:rsi rbx:rcx rax:0x000000000000000C rsi:<invalid> -1273(fp):dil -1272(fp):r8 -1224(fp):esi -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EEEE:
// DataOut: fs r10 r11 r12 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> eax:esi -1273(fp):dil -1272(fp):r8 -1224(fp):esi -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED26:
// DataOut: fs r10 r11 r12 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> -1273(fp):dil -1272(fp):r8 -1224(fp):esi -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED2B:
	word64 rax_148
	word32 eax_51 = (word32) Mem0[rcx:byte]
	word64 rax_259 = DPB(rax_29, eax_51, 0)
	byte al_261 = (byte) eax_51
	word64 r13_195 = 0x0000000000000000
	branch al_261 == 0x00 l000000000040F053
// DataOut: al fs r10 r11 r12 r13 r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> eax:esi -1273(fp):dil -1272(fp):r8 -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED39:
// DataOut: al fs r11 r12 r13 r14 r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> -1273(fp):dil -1272(fp):r8 -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED85:
	branch al_261 != 0x25 l000000000040ED50
// DataOut: al fs r11 r12 r13 r14 r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED50:
	branch rdx - r13_195 <=u 0x0000000000000001 l000000000040EE98
// DataOut: al fs r11 r12 r13 r14 r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED60:
	branch r12_17 == 0x0000000000000000 l000000000040ED6D
// DataOut: al fs r11 r12 r13 r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED65:
	Mem758[r12_17:byte] = al_261
	r12_17 = r12_17 + 0x0000000000000001
// DataOut: fs r11 r12 r13 r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED6D:
	r13_195 = r13_195 + 0x0000000000000001
	word64 r8_757
	*r8Out = rbx_25
// DataOut: fs r11 r12 r13 r14 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED89:
	word32 r9d_339 = (word32) dil
	byte r9b_341 = (byte) r9d_339
	word64 r11_346
	*r11Out = 0x0000000000000000
	word32 r11d_347 = 0x00000000
// DataOut: fs r11 r11d r12 r13 r14 r8 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED94:
	rbx_25 = rbx_25 + 0x0000000000000001
	byte dil_363 = (byte) (word32) Mem0[rbx_25:byte]
	byte SZO_366 = cond(dil_363 - 0x30)
	branch dil_363 == 0x30 l000000000040EDC0
// DataOut: dil fs r11 r11d r12 r13 r14 r8 r9b rax rbx
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EDA1:
	branch SZO_366 l000000000040EDD0
// DataOut: dil fs r11 r11d r12 r13 r14 r8 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EDD0:
	branch dil_363 != 0x5E l000000000040EE70
// DataOut: dil fs r11 r11d r12 r13 r14 r8 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE70:
	branch dil_363 != 0x5F l000000000040EDEE
// DataOut: dil fs r11 r11d r12 r13 r14 r8 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE7A:
	r11d_347 = (int32) dil_363
	*r11Out = DPB(r11_346, r11d_347, 0)
// DataOut: fs r11 r11d r12 r13 r14 r8 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EDDA:
	r9d_339 = 0x00000001 (alias)
	r9b_341 = 0x01 (alias)
// DataOut: fs r11 r11d r12 r13 r14 r8 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EDA3:
	branch dil_363 != 0x23 l000000000040EDE8
// DataOut: dil fs r11 r11d r12 r13 r14 r8 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EDE8:
	branch dil_363 == 0x2D l000000000040EDC0
// DataOut: dil fs r11 r11d r12 r13 r14 r8 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EDEE:
	word64 rdx_405 = (uint64) ((int32) dil_363 - 0x00000030)
	word32 ebp_404 = 0xFFFFFFFF
	branch (word32) rdx_405 >u 0x00000009 l000000000040EE40
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r8 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EDFF:
	word64 rbp_668 = 0x0000000000000000
	ebp_404 = 0x00000000 (alias)
// DataOut: ebp fs r11 r11d r12 r13 r14 r8 r9b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:0x00000000FFFFFFFF rdx:<invalid> r11d:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:0xFFFFFFFF -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE28:
	branch ebp_404 <= 0x0CCCCCCC l000000000040EE08
// DataOut: ebp fs r11 r11d r12 r13 r14 r8 r9b rax rbp rbx
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE08:
	word32 edx_706 = (int32) Mem0[rbx_25:byte]
	word64 rdx_707 = DPB(rdx_405, edx_706, 0)
	byte dl_708 = (byte) edx_706
	branch ebp_404 == 0x0CCCCCCC l000000000040EE88
// DataOut: dl ebp edx fs r11 r11d r12 r13 r14 r8 r9b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE88:
	branch dl_708 <= 0x37 l000000000040EE0D
// DataOut: ebp edx fs r11 r11d r12 r13 r14 r8 r9b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE8D:
	rbp_668 = 0x000000007FFFFFFF
	ebp_404 = 0x7FFFFFFF (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r8 r9b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE0D:
	rcx = DPB(rcx, rbp_668 * 0x0000000000000005, 0) (alias)
	ebp_404 = rdx_707 - 0x0000000000000030 + rcx * 0x0000000000000002
	rbp_668 = DPB(rbp_668, ebp_404, 0) (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r8 r9b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE30:
	rbp_668 = 0x000000007FFFFFFF
	ebp_404 = 0x7FFFFFFF (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r8 r9b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE15:
	rbx_25 = rbx_25 + 0x0000000000000001
	dil_363 = (byte) (word32) Mem0[rbx_25:byte] (alias)
	rdx_405 = (uint64) ((int32) dil_363 - 0x00000030)
	branch (word32) rdx_405 >u 0x00000009 l000000000040EE40
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r8 r9b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> ecx:<invalid> ebp:<invalid> r11d:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE40:
	branch dil_363 == 0x45 l000000000040EEC8
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r8 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> r9:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE4A:
	branch dil_363 == 0x4F l000000000040EEC8
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r8 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> r9:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EEC8:
	rbx_25 = rbx_25 + 0x0000000000000001
	dil_363 = (byte) (word32) Mem0[rbx_25:byte] (alias)
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r8 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> r11d:<invalid> r9:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE52:
	branch dil_363 >u 0x7A l000000000040FF4D
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r8 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> r8:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040FF4D:
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r8 r9b
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r11d:<invalid> r9:<invalid> ebp:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F39F:
	word64 r15_481
	word64 rcx_480
	branch dil_363 != 0x25 l000000000040F0B2
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r8 r9b
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F0B2:
	word64 rax_637 = rbx_25 - 0x0000000000000001
	word32 ecx_642 = 0x00000001
// DataOut: bpl ebp ecx fs r11 r11d r12 r13 r14 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F0C1:
	r15_481 = rax_637
	rax_637 = rax_637 - 0x0000000000000001
	ecx_642 = (word32) (uint64) (ecx_642 + 0x00000001) (alias)
	branch Mem0[rax_637 + 0x0000000000000001:byte] != 0x25 l000000000040F0C1
// DataOut: bpl ebp ecx fs r11 r11d r12 r13 r14 r15 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F0D1:
	rcx_480 = (int64) ecx_642
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15 r8 r9b rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F3A9:
	r15_481 = rbx_25
	rcx_480 = 0x0000000000000001
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15 r8 r9b rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F0D7:
	word64 r8_479
	*r8Out = rbx_25
	word64 rax_485 = 0x0000000000000000
	byte al_487 = 0x00
	branch ebp_404 < 0x00000000 l000000000040F0E1
// DataOut: al bpl ebp fs r11 r11d r12 r13 r14 r15 r8 r9b rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F0DE_1:
	rax_485 = (uint64) ebp_404 (alias)
	al_487 = (byte) ebp_404 (alias)
// DataOut: al ebp fs r11 r11d r12 r13 r14 r15 r8 r9b rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F0E1:
	rax_259 = DPB(rax_485, (int16) al_487, 0) (alias)
	word64 rbx_504 = rax_259
	branch rcx_480 <u rax_259 l000000000040F0ED
// DataOut: ebp fs r11 r11d r12 r13 r14 r15 r8 r9b rax rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F0E9_1:
	rbx_504 = rcx_480
// DataOut: ebp fs r11 r11d r12 r13 r14 r15 r8 r9b rax rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F0ED:
	branch rbx_504 >=u rdx - r13_195 l000000000040EE98
// DataOut: ebp fs r11 r11d r12 r13 r14 r15 r8 r9b rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE98:
	rax_148 = 0x0000000000000000
// DataOut: fs r11 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64)

l000000000040F0F9:
	branch r12_17 == 0x0000000000000000 l000000000040F16E
// DataOut: ebp fs r11 r11d r12 r13 r14 r15 r8 r9b rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F0FE:
	branch rax_259 <=u rcx_480 l000000000040F144
// DataOut: ebp fs r11 r11d r12 r13 r14 r15 r8 r9b rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F103:
	word64 rbp_598 = (int64) ebp_404 - rcx_480
	branch r11d_347 == 0x00000030 l000000000040F1C1
// DataOut: fs r11 r12 r13 r14 r15 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04D8(64) Local -04E0(8) Local -04F0(64) Local -04F9(32)

l000000000040F1C1:
	memset(r12_17, 0x0000000000000030, rbp_598)
	r12_17 = r12_17 + rbp_598
	r9b_341 = (byte) (uint64) r9d_339 (alias)
// DataOut: fs r11 r12 r13 r14 r15 r8 r9b rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F125:
	memset(r12_17, 0x0000000000000020, rbp_598)
	r12_17 = r12_17 + rbp_598
	r9b_341 = (byte) (uint64) r9d_339 (alias)
// DataOut: fs r11 r12 r13 r14 r15 r8 r9b rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F144:
	branch r9b_341 == 0x00 l000000000040F180
// DataOut: fs r11 r12 r13 r14 rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> rdi:<invalid> r9:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04E0(64) Local -04F0(64) Local -04F9(32)

l000000000040F180:
	rax_259 = memcpy(r12_17, r15_481, rcx_480)
// DataOut: fs r11 r12 r13 r14 r8 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F15C:
	rax_259 = fn000000000040EC80(rcx_480, r15_481, r12_17)
// DataOut: fs r11 r12 r13 r14 r8 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F16B:
	r12_17 = r12_17 + rcx_480
// DataOut: fs r11 r12 r13 r14 r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F16E:
	word64 r8_523
	*r8Out = rbx_25
	rcx = rcx_480
	r13_195 = r13_195 + rbx_504
// DataOut: fs r11 r12 r13 r14 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED74:
	word32 eax_301 = (word32) Mem0[rax_259 + 0x0000000000000001:byte]
	rax_259 = DPB(rax_259, eax_301, 0) (alias)
	al_261 = (byte) eax_301 (alias)
	rbx_25 = rax_259 + 0x0000000000000001
	branch al_261 == 0x00 l000000000040F050
// DataOut: al fs r11 r12 r13 r14 r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F050:
// DataOut: fs r10 r11 r12 r13 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64)

l000000000040F053:
	branch r12_17 == 0x0000000000000000 l000000000040F191
// DataOut: fs r10 r11 r12 r13 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64)

l000000000040F05C:
	branch rdx == 0x0000000000000000 l000000000040F191
// DataOut: fs r11 r12 r13 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64)

l000000000040F191:
	rax_148 = r13_195
// DataOut: fs r11 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64)

l000000000040F065:
	Mem226[r12_17:byte] = 0x00
	rax_148 = r13_195
// DataOut: fs r11 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64)

l000000000040EE9A:
	branch (rsi_31 ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l00000000004105EA
// DataOut: fs r11 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004105EA:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040EEB1:
	return rax_148
// DataOut: fs r11 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040EE60:
	word32 edx_436 = (word32) dil_363
	word64 rdx_437 = DPB(rdx_405, edx_436, 0)
	word64 rsp_438
	word64 r15_439
	word64 r10_440
	word64 rdx_441
	word64 r14_442
	word64 r13_443
	word64 r12_444
	word64 rsi_445
	word64 rbp_446
	word64 rbx_447
	word64 rcx_448
	byte SCZO_449
	word64 rax_450
	selector fs_451
	word32 esi_452
	byte SZO_453
	bool C_454
	word64 r8_455
	word32 r9d_456
	byte dil_457
	word32 eax_458
	word32 r13d_459
	byte al_460
	bool Z_461
	word32 r11d_462
	word64 r11_463
	word32 edi_464
	word32 edx_465
	word32 ebp_466
	byte CZ_467
	word64 r9_468
	word32 ecx_469
	byte dl_470
	bool S_471
	word16 ax_472
	word64 rdi_473
	byte r9b_474
	call Mem0[rdx_437 * 0x0000000000000008 + 0x004164E8:word64] (retsize: 8; depth: 1296)
		uses: al_393,ax_394,bLoc04F9_41,C_421,CZ_434,dil_430,dl_409,dwLoc04C4_39,dwLoc04C8_46,dwLoc04E0_235,eax_392,ebp_411,ecx_426,edi_429,edx_436,esi_435,fs,qwLoc04C0_42,qwLoc04D8_234,qwLoc04E0_236,qwLoc04E8_233,qwLoc04F0_237,qwLoc04F8_37,qwLoc08_4,qwLoc10_9,qwLoc18_12,qwLoc20_15,qwLoc28_20,qwLoc30_23,qwLoc40_32,r10_6,r11_360,r11d_359,r12_251,r13_252,r13d_244,r14_232,r15_254,r8_246,r9_351,r9b_350,r9d_352,rax_391,rbp_414,rbx_428,rcx_427,rdi_431,rdx_437,rsi_250,rsp_26,S_423,SCZO_433,SZO_420,Z_432
		defs: al_460,ax_472,C_454,CZ_467,dil_457,dl_470,eax_458,ebp_466,ecx_469,edi_464,edx_465,esi_452,fs_451,r10_440,r11_463,r11d_462,r12_444,r13_443,r13d_459,r14_442,r15_439,r8_455,r9_468,r9b_474,r9d_456,rax_450,rbp_446,rbx_447,rcx_448,rdi_473,rdx_441,rsi_445,rsp_438,S_471,SCZO_449,SZO_453,Z_461
	return rax_450
// DataOut: fs r11 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r11d:<invalid> r9:<invalid> ebp:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040ECD0_exit:
// DataOut: r11 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rbp:<invalid> r14:<invalid> r15:<invalid> rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040EDA9:
	rbx_25 = rbx_25 + 0x0000000000000001
	dil_363 = (byte) (word32) Mem0[rbx_25:byte] (alias)
	SZO_366 = cond(dil_363 - 0x30) (alias)
	branch dil_363 != 0x30 l000000000040EDA1
// DataOut: dil fs r11 r11d r12 r13 r14 r8 r9b rax rbx
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EDBB:
// DataOut: dil fs r12 r13 r14 r8 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:0x0000000000000001 rsi:<invalid> eax:0x00000001 r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:0x0001 rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EDC0:
	r11d_347 = (int32) dil_363
	*r11Out = DPB(r11_346, r11d_347, 0)
// DataOut: fs r11 r11d r12 r13 r14 r8 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)



word64 fn0000000000410600(word64 rax, word64 rdx, word64 rsi, word64 rdi, word32 r8d, selector fs, ptr64 & r8Out, ptr64 & r11Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r8d rax rdi rdx rsi
// LiveOut: r11 r15 r8 rax
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn0000000000410600_entry:
	*r15Out = r15
// DataOut: fs r8d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410600:
	word64 r8_23
	word64 r11_24
	return fn000000000040ECD0(rax, rdx, rsi, rdi, 0x00, fs, out r8_23, out r11_24)
// DataOut: fs r11 r15 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn0000000000410600_exit:
// DataOut: r11 r15 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r10:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rbx:<invalid> r13:<invalid> rbp:<invalid> r14:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> ax:<invalid> r15:<invalid> -24(fp):r9d



word64 fn0000000000410630(word64 rsi, word64 rdi, word64 r8, word64 r9, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 r9 rdi rsi
// LiveOut: rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r13 r14 r15
fn0000000000410630_entry:
// DataOut: r11 r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0090(0)

l0000000000410630:
	branch rsi == 0x0000000000000000 l0000000000410A30
// DataOut: r11 r12 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0090(0)

l0000000000410A30:
	__fprintf_chk(rdi, 0x0000000000000001, 0x00000000004168CC, tLoc90)
// DataOut: r11 r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000088 r12:r9 rbp:rdi rbx:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0090(0)

l0000000000410650:
	__fprintf_chk(rdi, 0x0000000000000001, 0x00000000004168C0, tLoc90)
// DataOut: r11 r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000088 r12:r9 rbp:rdi rbx:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0090(0)

l000000000041066A:
	dcgettext(0x0000000000000000, 0x00000000004168D3, 0x0000000000000005)
	__fprintf_chk(rdi, 0x0000000000000001, 0x0000000000416BA0, tLoc90)
	word64 rax_49 = dcgettext(0x0000000000000000, 0x0000000000416930, 0x0000000000000005)
	word32 eax_52 = fputs_unlocked(rax_49, rdi)
	branch r9 >u 0x0000000000000009 l0000000000410A50
// DataOut: r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000088 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rax:<invalid> eax:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0090(0)

l0000000000410A50:
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000088 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:0x00000000000007DD rcx:<invalid> rdx:0x0000000000000005 rsi:rdi rax:<invalid> eax:<invalid> rdi:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0090(0)

l00000000004107A1:
	__fprintf_chk(rdi, 0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000416B08, 0x0000000000000005), tLoc90)
	return fp
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000088 r12:<invalid> rbp:rdi rbx:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> rdx:0x0000000000000005 rsi:0x0000000000416B08 rax:<invalid> eax:<invalid> rdi:<invalid> r10:<invalid> r13:<invalid> r15:<invalid> r14:<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004106BE:
	word64 rsp_108
	word64 r15_109
	word64 r14_110
	word64 r13_111
	word64 r12_112
	word64 r9_113
	word64 rbp_114
	word64 rdi_115
	word64 rbx_116
	word64 r8_117
	byte SCZO_118
	word64 rsi_119
	byte SZO_120
	bool C_121
	bool Z_122
	word64 rcx_123
	word64 rdx_124
	word32 edx_125
	word32 esi_126
	word32 eax_127
	word64 rax_128
	word32 edi_129
	word32 r8d_130
	byte CZ_131
	word64 r10_132
	word64 r11_133
	call Mem0[0x00416B48:word64] (retsize: 8; depth: 144)
		uses: C_31,CZ_54,eax_52,edi,edx,esi,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_18,qwLoc30_23,qwLoc40,qwLoc48,qwLoc50,qwLoc58,qwLoc60,qwLoc68,qwLoc70,qwLoc78,qwLoc80,qwLoc88,r10,r11,r12_15,r13,r14,r15,r8_38,r8d,r9_33,rax_49,rbp_20,rbx_25,rcx_39,rdi_51,rdx_47,rsi_50,rsp_26,SCZO_53,SZO_32,tLoc90,Z_29
		defs: C_121,CZ_131,eax_127,edi_129,edx_125,esi_126,r10_132,r11_133,r12_112,r13_111,r14_110,r15_109,r8_117,r8d_130,r9_113,rax_128,rbp_114,rbx_116,rcx_123,rdi_115,rdx_124,rsi_119,rsp_108,SCZO_118,SZO_120,Z_122
	return rsp_108
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000088 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:0x00000000000007DD rcx:<invalid> rdx:0x0000000000000005 rsi:rdi rax:<invalid> eax:<invalid> rdi:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000410630_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> r10:<invalid> r13:r13 r15:r15 r14:r14 -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



void fn0000000000410AC0(word64 rax, word64 rdx, word64 rsi, word64 rdi, word64 r8, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rax rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn0000000000410AC0_entry:
// DataOut: r11 r8 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410AC0:
	word64 r9_13 = 0x0000000000000000
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410AF3:
	word32 eax_18 = (word32) (uint64) Mem0[rax:word32]
	branch eax_18 <u 0x00000030 l0000000000410AD0
// DataOut: eax r11 r8 r9 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410AD0:
	word64 rax_58 = (uint64) (eax_18 + 0x00000008)
	Mem60[rax_58:word32] = (word32) rax_58
	rax = Mem60[rdx:word64]
	Mem66[fp - 0x0000000000000058 + r9_13 * 0x0000000000000008:word64] = rax
	branch rax == 0x0000000000000000 l0000000000410B18
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410AFB:
	Mem49[rdx + 0x0000000000000010:word64] = rdx + 0x0000000000000008
	rax = Mem49[rdx:word64]
	Mem55[fp - 0x0000000000000058 + r9_13 * 0x0000000000000008:word64] = rax
	branch rax != 0x0000000000000000 l0000000000410AE9
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410AE9:
	r9_13 = r9_13 + 0x0000000000000001
	branch r9_13 == 0x000000000000000A l0000000000410B18
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410B13:
// DataOut: r11 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410B18:
	fn0000000000410630(rsi, rdi, fp - 0x0000000000000058, r9_13, r11)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>

fn0000000000410AC0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r9:<invalid> rax:<invalid> r10:<invalid> r8:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid>



void fn0000000000410B30(byte al, word64 rdx, word64 rsi, word64 rdi, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al r11 rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn0000000000410B30_entry:
// DataOut: al r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410B30:
	branch al == 0x00 l0000000000410B7C
// DataOut: r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410B45:
// DataOut: r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 -152(fp):r8 -144(fp):r9
// LocalsOut: fp(64)

l0000000000410B7C:
	fn0000000000410AC0(fp - 0x00000000000000B8, rdx, rsi, rdi, fp - 0x00000000000000D0, r11)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 -152(fp):r8 -144(fp):r9 -136(fp):xmm0 -120(fp):xmm1 -104(fp):xmm2 -88(fp):xmm3 -72(fp):xmm4 -56(fp):xmm5 -40(fp):xmm6 -24(fp):xmm7

fn0000000000410B30_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> -208(fp):0x00000020 -204(fp):0x00000030 -200(fp):fp + 0x0000000000000008 -192(fp):fp - 0x00000000000000B8 -152(fp):r8 -144(fp):r9 -136(fp):xmm0 -120(fp):xmm1 -104(fp):xmm2 -88(fp):xmm3 -72(fp):xmm4 -56(fp):xmm5 -40(fp):xmm6 -24(fp):xmm7



word64 fn0000000000410C40(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: rax
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx rax rdi rdx
// Preserved: rbx rsp
fn0000000000410C40_entry:
// DataOut: ebp ebx fs r10 r11 r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410C40:
	word64 rax_13 = malloc(rdi)
	branch rax_13 == 0x0000000000000000 l0000000000410C50
// DataOut: ebp ebx fs r10 r11 r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> rax:<invalid> rdi:rdi *s rsi -8(fp):rbx
// LocalsOut: fp(64) Local -0008(32)

l0000000000410C50:
	branch rdi == 0x0000000000000000 l0000000000410C4E
// DataOut: ebp ebx fs r10 r11 r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -8(fp):rbx
// LocalsOut: fp(64) Local -0008(32)

l0000000000410C55:
	fn0000000000410E50()
	word64 rax_32 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi)
	branch rax_32 <u rdi l0000000000410C7A
// DataOut: ebp ebx fs r10 r11 r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -8(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410C7A:
	Mem39[fp - 0x0000000000000010:word64] = rax_32
	fn0000000000410E50()
// DataOut: ebp ebx fs r10 r11 r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rdx:<invalid> rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410C71:
	rdi = rdi *s rsi
// DataOut: ebp ebx fs r10 r11 r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rdx:<invalid> rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410C4E:
	return rax_13
// DataOut: ebp ebx fs r10 r11 r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -8(fp):rbx

fn0000000000410C40_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -8(fp):rbx



word64 fn0000000000410C90(word64 rdx, word64 rsi, word64 rdi, ptr64 & r8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: al r8 rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r8 r8b r8d r8w rax rcx rdi rdx rsi si sil
// Preserved: rbx rsi rsp
fn0000000000410C90_entry:
	*r8Out = r8
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410C90:
	branch rsi == 0x0000000000000000 l0000000000410CB0
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:rdx cl:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410CB0:
	branch rdi == 0x0000000000000000 l0000000000410C99
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:rdx cl:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410CB5:
	free(rdi)
	return 0x0000000000000000
// DataOut: al ebp fs r10 r11 r13 r13d r14 r15 r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:rdx cl:<invalid> -8(fp):rbx

l0000000000410C99:
	word64 rax_59 = realloc(rdi, rsi)
	branch rax_59 == 0x0000000000000000 l0000000000410CBE
// DataOut: al ebp fs r10 r11 r13 r13d r14 r15 r8 r9 rax rbp rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:rdx cl:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410CBE:
	branch rsi == 0x0000000000000000 l0000000000410CA6
// DataOut: al ebp fs r10 r11 r13 r13d r14 r15 r8 r9 rax rbp rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> r8:rdx cl:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410CC3:
	fn0000000000410E50()
	rdx = (uint64) (0xFFFFFFFFFFFFFFFF % rdx)
	word64 rax_82 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdx)
	branch rax_82 <u rsi l0000000000410CED
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 r9 rax rbp rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> r8:rdx cl:<invalid> -8(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410CED:
	Mem91[fp - 0x0000000000000010:word64] = rax_82
	fn0000000000410E50()
	word64 r8_95
	*r8Out = rdx
	word64 rcx_109 = Mem91[rsi:word64]
	branch rdi == 0x0000000000000000 l0000000000410D40
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rcx:rdx rax:<invalid> rdx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410D40:
	branch rcx_109 != 0x0000000000000000 l0000000000410D29
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410D45:
	word64 rax_196 = (uint64) (0x0000000000000080 /u rdx)
	rdx = (uint64) (0x0000000000000080 % rdx)
	rcx_109 = (uint64) (rax_196 == 0x0000000000000000) + rax_196
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410D0B:
	rdx = (uint64) (0xFFFFFFFFAAAAAAAA % rdx)
	word64 rax_121 = (uint64) (0xFFFFFFFFAAAAAAAA /u rdx)
	branch rcx_109 >=u rax_121 l0000000000410D5C
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 r9 rax rbp rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410D5C:
	Mem134[fp - 0x0000000000000018:word64] = rax_121
	fn0000000000410E50()
	word64 rax_138 = Mem134[rsi:word64]
	branch rdi == 0x0000000000000000 l0000000000410DA0
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410DA0:
	rdx = 0x0000000000000080
	branch rax_138 != 0x0000000000000000 l0000000000410DAC
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 r9 rax rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410DA8_1:
	rax_138 = 0x0000000000000080
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 r9 rax rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x0000000000000080 -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410DAC:
	Mem180[rsi:word64] = rax_138
	rsi = rax_138
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x0000000000000080 -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410D78:
	branch rax_138 >u 0x00000000AAAAAAA9 l0000000000410DB7
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410DB7:
	Mem155[fp - 0x0000000000000020:word64] = rax_138
	fn0000000000410E50()
	Mem157[fp - 0x0000000000000028:word64] = rsi
	return memset(fn0000000000410C40(rsi, rdi), 0x0000000000000000, rdi)
// DataOut: al ebp fs r10 r11 r13 r13d r14 r15 r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x00000000AAAAAAA9 -8(fp):rbx
// Terminates process

l0000000000410D87:
	rdx = rax_138 + 0x0000000000000001 >>u 0x0000000000000001
	word64 rax_148 = rax_138 + rdx
	Mem151[rsi:word64] = rax_148
	rsi = rax_148
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x00000000AAAAAAA9 -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410D1F:
	rcx_109 = rcx_109 + (rcx_109 + 0x0000000000000001 >>u 0x0000000000000001)
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410D29:
	Mem110[rsi:word64] = rcx_109
	rsi = rcx_109 *s rdx
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> rdx:<invalid> rax:<invalid> cl:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410CE4:
	rsi = rsi *s rdx
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rcx:rdx rax:<invalid> rdx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410CA6:
	return rax_59
// DataOut: al ebp fs r10 r11 r13 r13d r14 r15 r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> r8:rdx cl:<invalid> -8(fp):rbx

fn0000000000410C90_exit:
// DataOut: al r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r8:rdx cl:<invalid> -8(fp):rbx



word64 fn0000000000410E00(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: rax
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: rbp rbx rsi rsp
fn0000000000410E00_entry:
// DataOut: ebx fs r10 r11 r12 r12d r13 r13b r14 r14d r15 r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E00:
	return memcpy(fn0000000000410C40(rsi, rsi), rdi, rsi)
// DataOut: ebx fs r10 r11 r12 r12d r13 r13b r14 r14d r15 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn0000000000410E00_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rdi:<invalid> rbx:rbx rdx:rsi rsi:<invalid> rax:<invalid> -16(fp):rbx -8(fp):rbp



word64 fn0000000000410E30(word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax rsi
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: rbx rsp
fn0000000000410E30_entry:
// DataOut: ebx fs r10 r11 r12 r12d r13 r13b r14 r14d r15 r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E30:
	word64 rax_9 = DPB(rax, strlen(rdi), 0)
	word64 rsi_11
	*rsiOut = rax_9 + 0x0000000000000001
// DataOut: ebx fs r10 r11 r12 r12d r13 r13b r14 r14d r15 r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000410E41_thunk_fn0000000000410E00:
	return fn0000000000410E00(rax_9 + 0x0000000000000001, rdi)
// DataOut: ebx fs r10 r11 r12 r12d r13 r13b r14 r14d r15 r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx eax:<invalid> rdi:rdi rsi:rax + 0x0000000000000001 -8(fp):rbx

fn0000000000410E30_exit:
// DataOut: rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx eax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx



void fn0000000000410E50()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000410E50_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000410E50_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(0)

l0000000000410E50:
	dcgettext(0x0000000000000000, 0x0000000000416BCF, 0x0000000000000005)
	error((uint64) Mem0[0x000000000061A580:word32], 0x0000000000000000, 0x0000000000415E54, tLoc10)
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



word32 fn0000000000410E90(word32 edx, word64 rsi, word64 rdi, word64 r8, ptr64 & ebxOut, ptr64 & r9Out, ptr64 & r13bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx r8 rdi rsi
// LiveOut: eax ebx r13b r9
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 r15 rbp rbx rdi rsp
fn0000000000410E90_entry:
// DataOut: cl ebx edx fs r10 r11 r13b r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E90:
	word32 r14d_10 = (word32) (uint64) edx
	branch edx >u 0x00000024 l00000000004112B0
// DataOut: cl fs r10 r11 r14d r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l00000000004112B0:
	__assert_fail(0x0000000000416BF0, 0x0000000000416BE0, 0x0000000000000060, 0x0000000000416DC8)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000410EAA:
	word64 r15_31 = rsi
	branch rsi != 0x0000000000000000 l0000000000410EC2
// DataOut: fs r10 r11 r12 r13b r14d r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410EBE_1:
	r15_31 = fp - 0x0000000000000040
// DataOut: fs r10 r11 r12 r13b r14d r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:fp - 0x0000000000000040 rbp:rdi r15:rsi r13:rcx r12:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410EC2:
	byte bl_408 = (byte) (word32) Mem0[rdi:byte]
	word64 rdx_46 = Mem0[__ctype_b_loc():word64]
	word64 rax_402 = rdi
// DataOut: bl fs r10 r11 r12 r13b r14d r15 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:fp - 0x0000000000000040 rbp:rdi r15:<invalid> r13:rcx r12:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410EDF:
	word32 r9d_61 = (word32) bl_408
	r9 = DPB(r9, r9d_61, 0) (alias)
	*r9Out = r9
	branch (Mem0[rdx_46 + 0x0000000000000001 + r9 * 0x0000000000000002:byte] & 0x20) != 0x00 l0000000000410ED8
// DataOut: bl fs r10 r11 r12 r13b r14d r15 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410ED8:
	rax_402 = rax_402 + 0x0000000000000001
	bl_408 = (byte) (word32) Mem0[rax_402:byte] (alias)
// DataOut: bl fs r10 r11 r12 r13b r14d r15 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410EEB:
	word32 eax_128
	branch bl_408 != 0x2D l0000000000410F08
// DataOut: fs r10 r11 r12 r13b r14d r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410F08:
	word64 rbp_207
	word32 ebp_193
	word32 edx_218
	word64 rax_172 = __errno_location()
	Mem174[rax_172:word32] = 0x00000000
	word64 rax_180 = DPB(rax_172, strtoul(rdi, r15_31, (uint64) r14d_10), 0)
	word64 r14_181 = Mem174[r15_31:word64]
	word64 rbx_182 = rax_180
	branch r14_181 == rdi l0000000000410FE7
// DataOut: ebx fs r10 r11 r12 r13b r9 rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410FE7:
	branch r8 == 0x0000000000000000 l0000000000410EF0
// DataOut: fs r10 r11 r12 r13b r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410FF0:
	word32 edx_380 = (word32) Mem174[rdi:byte]
	byte dl_382 = (byte) edx_380
	branch dl_382 == 0x00 l0000000000410EF0
// DataOut: dl edx fs r10 r11 r12 r13b r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410FFC:
	rbp_207 = 0x0000000000000000
	ebp_193 = 0x00000000 (alias)
	rbx_182 = 0x0000000000000001
	edx_218 = (word32) (uint64) edx_380 (alias)
	branch strchr(r8, DPB(r15_31, (int32) dl_382, 0)) != 0x0000000000000000 l0000000000410F94
// DataOut: dl ebp ebx edx fs r10 r11 r12 r13b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l000000000041101F:
// DataOut: fs r10 r11 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:0x00000001 rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:r8 eax:<invalid> rbx:0x0000000000000001 rcx:<invalid> edx:<invalid> esi:(int32) dl -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410F3A:
	word32 eax_314 = (word32) (uint64) Mem174[rax_172:word32]
	branch eax_314 != 0x00000000 l0000000000410F68
// DataOut: eax ebx fs r10 r11 r12 r13b r9 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410F68:
	rbp_207 = 0x0000000000000001
	ebp_193 = 0x00000001 (alias)
	branch eax_314 != 0x00000022 l0000000000410EF0
// DataOut: ebp ebx fs r10 r11 r12 r13b r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410F76:
// DataOut: ebp ebx fs r10 r11 r12 r13b r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:0x0000000000000001 r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410F40:
	rbp_207 = 0x0000000000000000
	ebp_193 = 0x00000000 (alias)
// DataOut: ebp ebx fs r10 r11 r12 r13b r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410F42:
	branch r8 == 0x0000000000000000 l0000000000410F4F
// DataOut: ebp ebx fs r10 r11 r12 r13b r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410F47:
	word32 edx_352 = (word32) Mem174[r15_31:byte]
	byte dl_354 = (byte) edx_352
	branch dl_354 != 0x00 l0000000000410F78
// DataOut: dl ebp ebx edx fs r10 r11 r12 r13b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410F78:
	edx_218 = (word32) (uint64) edx_352 (alias)
	branch strchr(r8, DPB(r15_31, (int32) dl_354, 0)) == 0x0000000000000000 l0000000000411028
// DataOut: dl ebp ebx edx fs r10 r11 r12 r13b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410F94:
	word32 edx_234 = (word32) (uint64) edx_218
	branch strchr(r8, 0x0000000000000030) == 0x0000000000000000 l0000000000410FCB
// DataOut: dl ebp ebx fs r10 r11 r13b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:(int32) dl -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410FAE:
	byte al_291 = (byte) (word32) Mem174[0x0000000000000031:byte]
	branch al_291 == 0x44 l0000000000411262
// DataOut: al dl ebp ebx fs r10 r11 r13b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410FBB:
	branch al_291 == 0x69 l000000000041124A
// DataOut: al dl ebp ebx fs r10 r11 r13b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l000000000041124A:
// DataOut: dl eax ebp ebx fs r10 r11 r13b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410FC3:
	branch al_291 == 0x42 l0000000000411262
// DataOut: dl ebp ebx fs r10 r11 r13b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000411262:
// DataOut: dl eax ebp ebx fs r10 r11 r13b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410FCB:
// DataOut: dl eax ebp ebx fs r10 r11 r13b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410FD5:
	word64 rdx_243 = (uint64) (edx_234 - 0x00000042)
	byte dl_245 = (byte) rdx_243
	branch dl_245 >u 0x35 l0000000000411028
// DataOut: dl eax ebp ebx fs r10 r11 r13b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000411028:
	Mem210[rbp_207:word64] = rbx_182
	eax_128 = (word32) (uint64) ((word32) (uint64) ebp_193 | 0x00000002) (alias)
// DataOut: eax fs r10 r11 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410FDD:
	word32 edx_248 = (word32) dl_245
	word64 rdx_249 = DPB(rdx_243, edx_248, 0)
	word64 rsp_250
	word64 r15_251
	word64 r14_252
	word32 r14d_253
	word32 edx_254
	word64 r13_255
	word64 r12_256
	word64 rbp_257
	word64 rbx_258
	byte SCZO_259
	byte CZ_260
	word64 rax_261
	word64 rdi_262
	word64 rsi_263
	byte SZO_264
	bool C_265
	word64 rcx_266
	word64 r8_267
	bool Z_268
	word32 ecx_269
	word64 rdx_270
	word32 esi_271
	word32 edi_272
	word32 ebx_273
	word32 r9d_274
	byte bl_275
	word64 r9_276
	word32 eax_277
	word32 ebp_278
	byte dl_279
	byte al_280
	byte cl_281
	byte r13b_282
	call Mem174[rdx_249 * 0x0000000000000008 + 0x00416C18:word64] (retsize: 8; depth: 96)
		uses: al_242,bl_224,C_232,cl_236,CZ_247,dl_245,dwLoc50_228,eax_241,ebp_216,ebx_223,ecx_237,edi,edx_248,esi_217,qwLoc08_4,qwLoc10_7,qwLoc18_13,qwLoc20_16,qwLoc28_19,qwLoc30_22,qwLoc50_178,r12_39,r13_36,r13b_37,r14_181,r14d_10,r15_40,r8,r9_62,r9d_61,rax_240,rbp_225,rbx_222,rcx_239,rdi_227,rdx_249,rsi_226,rsp_23,SCZO_246,SZO_230,Z_238
		defs: al_280,bl_275,C_265,cl_281,CZ_260,dl_279,eax_277,ebp_278,ebx_273,ecx_269,edi_272,edx_254,esi_271,r12_256,r13_255,r13b_282,r14_252,r14d_253,r15_251,r8_267,r9_276,r9d_274,rax_261,rbp_257,rbx_258,rcx_266,rdi_262,rdx_270,rsi_263,rsp_250,SCZO_259,SZO_264,Z_268
	return eax_277
// DataOut: eax ebx fs r10 r11 r13b r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000410F4F:
	Mem331[rbp_207:word64] = rax_180
	word32 ebx_338
	*ebxOut = (word32) rbx
	byte r13b_346
	*r13bOut = (byte) r13
	return (word32) (uint64) ebp_193
// DataOut: eax ebx fs r10 r11 r13b r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000410EF0:
	eax_128 = 0x00000004 (alias)
// DataOut: eax fs r10 r11 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:(int32) dl -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(8) Local -0030(32)

l0000000000410EF5:
	word32 ebx_133
	*ebxOut = (word32) rbx
	byte r13b_141
	*r13bOut = (byte) r13
	return eax_128
// DataOut: eax ebx fs r10 r11 r13b r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000410E90_exit:
// DataOut: eax ebx r13b r9
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> ebx:<invalid> rdx:<invalid> r9d:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



void fn00000000004112D0(word64 rcx, word32 esi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi esi rcx
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004112D0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004112D0_entry:
// DataOut: edi esi rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0040(0)

l00000000004112D0:
	word64 rsi_103
	word32 r10d_7 = (word32) (int64) esi
	word32 ebp_25 = (word32) (uint64) Mem0[0x000000000061A580:word32]
	branch edi >u 0x00000003 l000000000041133B
// DataOut: ebp edi r10 r10d rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0040(0)

l000000000041133B:
	rsi_103 = 0x0000000000416DD1
	branch edi == 0x00000004 l00000000004112FA
// DataOut: ebp r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0040(0)

l0000000000411345:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> rsi:0x0000000000416DD1 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l00000000004112EB:
	branch edi >=u 0x00000002 l0000000000411334
// DataOut: ebp edi r10 r10d rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0040(0)

l0000000000411334:
	rsi_103 = 0x0000000000416E10
// DataOut: ebp r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0040(0)

l00000000004112F0:
	rsi_103 = 0x0000000000416DEC
	branch (word32) (uint64) (edi - 0x00000001) != 0x00000000 l000000000041132F
// DataOut: ebp r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0040(0)

l00000000004112FA:
	branch r10d_7 < 0x00000000 l0000000000411347
// DataOut: ebp r10 rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0040(0)

l0000000000411347:
// DataOut: ebp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: Local -0040(0)

l00000000004112FF:
// DataOut: ebp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: Local -0040(0)

l000000000041130C:
	error((uint64) ebp_25, 0x0000000000000000, dcgettext(0x0000000000000000, rsi_103, 0x0000000000000005), tLoc40)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:<invalid> r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r13:<invalid> -56(fp):dl -55(fp):0x00 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000041132F:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:<invalid> r12:r8 rbp:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> r13:<invalid> rdx:<invalid> rax:<invalid> r9:r8 r8:<invalid> rcx:<invalid> -56(fp):dl -55(fp):0x00 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13



word32 fn0000000000411360(word32 edx, word64 rsi, word64 rdi, word64 r8, ptr64 & ebpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r14bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx r8 rdi rsi
// LiveOut: eax ebp r14b r8 r9
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 r15 rbp rbx rdi rsp
fn0000000000411360_entry:
	*r8Out = r8
// DataOut: ebp edx fs r10 r11 r14b r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411360:
	word32 r14d_10 = (word32) (uint64) edx
	branch edx >u 0x00000024 l0000000000411788
// DataOut: fs r10 r11 r14d r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411788:
	__assert_fail(0x0000000000416BF0, 0x0000000000416BE0, 0x0000000000000060, 0x0000000000416FE8)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000041137A:
	word64 r15_32 = rsi
	branch rsi != 0x0000000000000000 l0000000000411392
// DataOut: fs r10 r11 r12 r14d r15 r8 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041138E_1:
	r15_32 = fp - 0x0000000000000040
// DataOut: fs r10 r11 r12 r14d r15 r8 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:fp - 0x0000000000000040 rbp:rdi r15:rsi r13:rcx r12:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411392:
	byte bl_414 = (byte) (word32) Mem0[rdi:byte]
	word64 rdx_46 = Mem0[__ctype_b_loc():word64]
	word64 rax_408 = rdi
// DataOut: bl fs r10 r11 r12 r14d r15 r8 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:fp - 0x0000000000000040 rbp:rdi r15:<invalid> r13:rcx r12:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004113AF:
	word32 r9d_61 = (word32) bl_414
	r9 = DPB(r9, r9d_61, 0) (alias)
	*r9Out = r9
	branch (Mem0[rdx_46 + 0x0000000000000001 + r9 * 0x0000000000000002:byte] & 0x20) != 0x00 l00000000004113A8
// DataOut: bl fs r10 r11 r12 r14d r15 r8 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004113A8:
	rax_408 = rax_408 + 0x0000000000000001
	bl_414 = (byte) (word32) Mem0[rax_408:byte] (alias)
// DataOut: bl fs r10 r11 r12 r14d r15 r8 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004113BB:
	word32 eax_129
	branch bl_414 != 0x2D l00000000004113D8
// DataOut: fs r10 r11 r12 r14d r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004113D8:
	word32 ebp_213
	word64 rbp_212
	word32 edx_225
	word64 rax_176 = __errno_location()
	Mem179[rax_176:word32] = 0x00000000
	word64 rax_185 = DPB(rax_176, __strtoul_internal(rdi, r15_32, (uint64) r14d_10, 0x0000000000000000), 0)
	word64 r14_187 = Mem179[r15_32:word64]
	word64 rbx_190 = rax_185
	word64 r8_193 = rax_176
	*r8Out = r8_193
	branch r14_187 == rdi l00000000004114BF
// DataOut: fs r10 r11 r12 r14b r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114BF:
	branch r8 == 0x0000000000000000 l00000000004113C0
// DataOut: fs r10 r11 r12 r14b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114C8:
	word32 edx_386 = (word32) Mem179[rdi:byte]
	byte dl_388 = (byte) edx_386
	branch dl_388 == 0x00 l00000000004113C0
// DataOut: dl edx fs r10 r11 r12 r14b r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114D4:
	rbp_212 = 0x0000000000000000
	ebp_213 = 0x00000000 (alias)
	rbx_190 = 0x0000000000000001
	edx_225 = (word32) (uint64) edx_386 (alias)
	branch strchr(r8, DPB(r15_32, (int32) dl_388, 0)) != 0x0000000000000000 l000000000041146C
// DataOut: dl ebp edx fs r10 r11 r12 r14b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114F7:
// DataOut: fs r10 r11 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:0x00000001 rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:r8 eax:<invalid> rbx:0x0000000000000001 r8:<invalid> edx:<invalid> esi:(int32) dl -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041140C:
	word32 eax_320 = (word32) (uint64) Mem179[rax_185:word32]
	branch eax_320 != 0x00000000 l0000000000411440
// DataOut: eax fs r10 r11 r12 r14b r8 r9 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411440:
	rbp_212 = 0x0000000000000001
	ebp_213 = 0x00000001 (alias)
	branch eax_320 != 0x00000022 l00000000004113C0
// DataOut: ebp fs r10 r11 r12 r14b r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041144E:
// DataOut: ebp fs r10 r11 r12 r14b r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:0x0000000000000001 r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411413:
	rbp_212 = 0x0000000000000000
	ebp_213 = 0x00000000 (alias)
// DataOut: ebp fs r10 r11 r12 r14b r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411415:
	branch r8 == 0x0000000000000000 l0000000000411422
// DataOut: ebp fs r10 r11 r12 r14b r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041141A:
	word32 edx_358 = (word32) Mem179[r15_32:byte]
	byte dl_360 = (byte) edx_358
	branch dl_360 != 0x00 l0000000000411450
// DataOut: dl ebp edx fs r10 r11 r12 r14b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411450:
	edx_225 = (word32) (uint64) edx_358 (alias)
	branch strchr(r8, DPB(r15_32, (int32) dl_360, 0)) == 0x0000000000000000 l0000000000411500
// DataOut: dl ebp edx fs r10 r11 r12 r14b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041146C:
	word32 edx_240 = (word32) (uint64) edx_225
	branch strchr(r8, 0x0000000000000030) == 0x0000000000000000 l00000000004114A3
// DataOut: dl ebp fs r10 r11 r14b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:(int32) dl -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411486:
	byte al_297 = (byte) (word32) Mem179[0x0000000000000031:byte]
	branch al_297 == 0x44 l000000000041173A
// DataOut: al dl ebp fs r10 r11 r14b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411493:
	branch al_297 == 0x69 l0000000000411722
// DataOut: al dl ebp fs r10 r11 r14b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411722:
// DataOut: dl eax ebp fs r10 r11 r14b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041149B:
	branch al_297 == 0x42 l000000000041173A
// DataOut: dl ebp fs r10 r11 r14b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041173A:
// DataOut: dl eax ebp fs r10 r11 r14b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114A3:
// DataOut: dl eax ebp fs r10 r11 r14b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114AD:
	word64 rdx_249 = (uint64) (edx_240 - 0x00000042)
	byte dl_251 = (byte) rdx_249
	branch dl_251 >u 0x35 l0000000000411500
// DataOut: dl eax ebp fs r10 r11 r14b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411500:
	Mem216[rbp_212:word64] = rbx_190
	eax_129 = (word32) (uint64) ((word32) (uint64) ebp_213 | 0x00000002) (alias)
// DataOut: eax fs r10 r11 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114B5:
	word32 edx_254 = (word32) dl_251
	word64 rdx_255 = DPB(rdx_249, edx_254, 0)
	word64 rsp_256
	word64 r15_257
	word64 r14_258
	word32 r14d_259
	word32 edx_260
	word64 r13_261
	word64 r12_262
	word64 rbp_263
	word64 rbx_264
	byte SCZO_265
	byte CZ_266
	word64 rax_267
	word64 rdi_268
	word64 rsi_269
	byte SZO_270
	bool C_271
	word64 rcx_272
	word64 r8_273
	bool Z_274
	word32 ecx_275
	word64 rdx_276
	word32 esi_277
	word32 edi_278
	word32 ebx_279
	word32 r9d_280
	byte bl_281
	word64 r9_282
	word32 eax_283
	word32 ebp_284
	byte dl_285
	byte al_286
	byte cl_287
	byte r14b_288
	call Mem179[rdx_255 * 0x0000000000000008 + 0x00416E38:word64] (retsize: 8; depth: 96)
		uses: al_248,bl_222,C_238,cl_242,CZ_253,dl_251,dwLoc50_234,eax_247,ebp_231,ebx_223,ecx_243,edi,edx_254,esi_224,qwLoc08_4,qwLoc10_7,qwLoc18_14,qwLoc20_17,qwLoc28_20,qwLoc30_23,qwLoc50_183,r12_39,r13_37,r14_187,r14b_189,r14d_188,r15_40,r8_193,r9_62,r9d_61,rax_246,rbp_230,rbx_229,rcx_245,rdi_233,rdx_255,rsi_232,rsp_24,SCZO_252,SZO_236,Z_244
		defs: al_286,bl_281,C_271,cl_287,CZ_266,dl_285,eax_283,ebp_284,ebx_279,ecx_275,edi_278,edx_260,esi_277,r12_262,r13_261,r14_258,r14b_288,r14d_259,r15_257,r8_273,r9_282,r9d_280,rax_267,rbp_263,rbx_264,rcx_272,rdi_268,rdx_276,rsi_269,rsp_256,SCZO_265,SZO_270,Z_274
	return eax_283
// DataOut: eax ebp fs r10 r11 r14b r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000411422:
	Mem337[rbp_212:word64] = rax_185
	word32 ebp_346
	*ebpOut = (word32) rbp
	byte r14b_354
	*r14bOut = (byte) r14
	return (word32) (uint64) ebp_213
// DataOut: eax ebp fs r10 r11 r14b r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004113C0:
	eax_129 = 0x00000004 (alias)
// DataOut: eax fs r10 r11 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:(int32) dl -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004113C5:
	word32 ebp_136
	*ebpOut = (word32) rbp
	byte r14b_144
	*r14bOut = (byte) r14
	return eax_129
// DataOut: eax ebp fs r10 r11 r14b r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000411360_exit:
// DataOut: eax ebp r14b r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> ebx:<invalid> rdx:<invalid> r9d:<invalid> rbx:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word32 fn00000000004117B0(word64 rsi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn00000000004117B0_entry:
// DataOut: edi fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: v3(64)

l00000000004117B0:
	word32 eax_16
	branch edi == 0x00000000 l0000000000411800
// DataOut: edi fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411800:
	Mem65[__errno_location():word32] = 0x0000005F
	eax_16 = 0xFFFFFFFF (alias)
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008

l00000000004117B8:
	bool Z_21 = (bool) cond(edi - 0x0000000A)
	eax_16 = (word32) (uint64) edi (alias)
	branch edi == 0x0000000A l00000000004117C8
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008

l00000000004117C8:
	word64 rdx_30 = Mem0[rsi:word64]
	word64 rdi_31 = 0x00000000004137B1
	word64 rcx_33 = 0x000000000000000A
	word64 rsi_34 = rdx_30
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rcx rdi rdx rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi

l00000000004117D8:
	branch rcx_33 == 0x0000000000000000 l00000000004117DA
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rcx rdi rdx rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117D8_1:
	Z_21 = (bool) cond(Mem0[rsi_68:byte] - Mem0[rdi_69:byte]) (alias)
	rsi_34 = rsi_68 + 0x0000000000000001
	rdi_31 = rdi_69 + 0x0000000000000001
	rcx_33 = rcx_33 - 0x0000000000000001
	word64 rsi_68 = rsi_34
	word64 rdi_69 = rdi_31
	branch Mem0[rsi_68:byte] != Mem0[rdi_69:byte] l00000000004117D8
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rcx rdi rdx rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117DA:
	branch Z_21 l00000000004117BF
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117DC:
	freecon(rdx_30)
	Mem53[__errno_location():word32] = 0x0000003D
	eax_16 = 0xFFFFFFFF (alias)
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117BF:
	return eax_16
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

fn00000000004117B0_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:v3 rax:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>



word32 fn0000000000411820(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi rsp
fn0000000000411820_entry:
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411820:
	word32 edi_11 = (word32) (uint64) getfilecon(rdi, rsi)
// DataOut: edi fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000041182F_thunk_fn00000000004117B0:
	return fn00000000004117B0(rsi, edi_11)
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx eax:<invalid> rsi:rsi rdi:<invalid> -8(fp):rbx

fn0000000000411820_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rbx eax:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx



word32 fn0000000000411840(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi rsp
fn0000000000411840_entry:
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411840:
	word32 edi_11 = (word32) (uint64) lgetfilecon(rdi, rsi)
// DataOut: edi fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000041184F_thunk_fn00000000004117B0:
	return fn00000000004117B0(rsi, edi_11)
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx eax:<invalid> rsi:rsi rdi:<invalid> -8(fp):rbx

fn0000000000411840_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rbx eax:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx



void fn0000000000411880(word64 rdi, word64 r8, word64 r13)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r13 r8 rdi
// LiveOut:
// Trashed: SCZO ah al ax bl bx dh dl dx eax ebx edx esi rax rbx rdx rsi si sil
// Preserved: r12 rbp rbx rdi rsp
fn0000000000411880_entry:
// DataOut: r13 r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411880:
	word64 rax_15 = DPB(rax, __fpending(rdi), 0)
	word32 ebx_18 = (word32) (uint64) Mem0[rdi:word32]
	word64 rsi_23
	word32 eax_24 = fn0000000000411D30(rdi, r8, r13, out rsi_23)
	branch (word32) (uint64) (ebx_18 & 0x00000020) != 0x00000000 l00000000004118C0
// DataOut: dl ebx r12
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004118C0:
	branch eax_24 != 0x00000000 != 0x00 l00000000004118B4
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi eax:<invalid> rbx:<invalid> rdi:rdi r12:rax dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l00000000004118C9:
	Mem91[__errno_location():word32] = 0x00000000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi eax:<invalid> rbx:0x00000000FFFFFFFF rdi:rdi r12:rax dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l00000000004118A6:
	branch eax_24 != 0x00000000 == 0x00 l00000000004118B4
// DataOut: ebx r12
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi eax:<invalid> rbx:<invalid> rdi:rdi r12:rax dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l00000000004118AA:
	branch rax_15 == 0x0000000000000000 l00000000004118E0
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi eax:<invalid> rbx:<invalid> rdi:rdi r12:rax dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l00000000004118E0:
	__errno_location()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi eax:<invalid> rbx:0x00000000FFFFFFFF rdi:rdi r12:rax dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l00000000004118B4:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi eax:<invalid> rbx:<invalid> rdi:rdi r12:rax dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn0000000000411880_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp eax:<invalid> rbx:rbx rdi:rdi r12:r12 dl:Test(NE,Z) rax:(uint64) ebx bl:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn0000000000411900(word64 rbp, word64 rsi, word64 r8, selector fs, ptr64 & r10Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r8 rbp rsi
// LiveOut: r10 rax
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn0000000000411900_entry:
// DataOut: fs r10 r12d r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -00E0(0)

l0000000000411900:
	rsp = fp
	rsp = fp - 0x0000000000000008
	qwLoc08 = r15
	rdi = 0x000000000000000E
	rsp = fp - 0x0000000000000010
	qwLoc10 = r14
	rsp = fp - 0x0000000000000018
	qwLoc18 = r13
	rsp = fp - 0x0000000000000020
	qwLoc20 = r12
	rsp = fp - 0x0000000000000028
	qwLoc28 = rbp
	rsp = fp - 0x0000000000000030
	qwLoc30 = rbx
	rsp = fp - 0x00000000000000D8
	rax = Mem0[fs:0x00000028:word64]
	qwLoc40 = rax
	rax = 0x0000000000000000
	rax = nl_langinfo(0x000000000000000E)
	r14 = Mem0[0x000000000061B358:word64]
	SZO = cond(rax & rax)
	C = false
	rbx = rax
	rax = 0x0000000000416919
	branch Test(NE,Z) l0000000000411944
// DataOut: fs r10 r14 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00E0(0)

l0000000000411940_1:
	rbx = 0x0000000000416919
// DataOut: fs r10 r14 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:0x000000000000000E rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00E0(0)

l0000000000411944:
	SZO = cond(r14 & r14)
	C = false
	branch Test(NE,Z) l000000000041196A
// DataOut: fs r10 r14 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:0x000000000000000E rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00E0(0)

l0000000000411949:
// DataOut: fs r10 r14 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:0x000000000000000E rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00E0(0)

l00000000004119D4:
	rdi = 0x0000000000417002
	rax = getenv(0x0000000000417002)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	branch Test(EQ,Z) l00000000004119EF
// DataOut: fs r10 r14 r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:0x000000000000000E rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00E0(0)

l00000000004119E6:
	SCZO = cond(Mem0[rax:byte] - 0x00)
	branch Test(NE,Z) l0000000000411C52
// DataOut: fs r10 r14 r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:0x0000000000417002 rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00E0(0)

l0000000000411C52:
	rdi = rax
	eax = strlen(rdi)
	SZO = cond(rax & rax)
	C = false
	r12 = rax
	branch Test(EQ,Z) l0000000000411C42
// DataOut: fs r10 r12 r14 r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:0x0000000000417002 rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00E0(0)

l0000000000411C62:
	rax = rax - 0x0000000000000001
// DataOut: fs r10 r12 r14 r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> eax:<invalid> r12:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00E0(0)

l00000000004119EF:
	rax = 0x0000000000000007
	r12 = 0x0000000000000008
	r15 = 0x0000000000416FF3
// DataOut: fs r10 r12 r14 r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:0x0000000000417002 rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00E0(0)

l0000000000411A00:
	SCZO = cond(Mem0[r15 + rax:byte] - 0x2F)
	r13 = 0x0000000000000001
	dwLocD0 = 0x00000001
	branch Test(EQ,Z) l0000000000411C42
// DataOut: fs r10 r12 r13 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(32) Local -00E0(0)

l0000000000411C42:
	r13 = 0x0000000000000000
	SZO = cond(r13d)
	C = false
	dwLocD0 = 0x00000000
// DataOut: fs r10 r12 r13 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> eax:<invalid> r12:<invalid> r13:0x0000000000000001 -208(fp):0x00000001 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(32) Local -00E0(0)

l0000000000411A19:
	r13 = r13 + r12
	rdi = rbp + 0x000000000000000E
	rax = malloc(rdi)
	SZO = cond(rax & rax)
	C = false
	rbp = rax
	branch Test(EQ,Z) l0000000000411CF2
// DataOut: fs r10 r12 r13 r14 r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(32) Local -00E0(0)

l0000000000411CF2:
	r14 = 0x0000000000416919
// DataOut: fs r10 r14 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:rbp + 0x000000000000000E rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411A31:
	rdx = r12
	rsi = r15
	rdi = rax
	rax = memcpy(rdi, rsi, rdx)
	rdx = (uint64) dwLocD0
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000411A4D
// DataOut: fs r10 r13 r14 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:rbp + 0x000000000000000E rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00E0(0)

l0000000000411A47:
	Mem0[rbp + 0x0000000000000000:byte] = 0x2F
// DataOut: fs r10 r13 r14 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00E0(0)

l0000000000411A4D:
	r13 = r13 + rbp
	rax = 0x0000000072616863
	rsi = 0x0000000000020000
	Mem0[rbp + 0x0000000000000000:word64] = 0x0000000072616863
	rax = 0x0000000000000073
	Mem0[rbp + 0x0000000000000008:word32] = 0x61696C61
	Mem0[rbp + 0x000000000000000C:word16] = ax
	rdi = rbp
	rax = 0x0000000000000000
	eax = open(rdi, 0x0000000000020000)
	SZO = cond(eax & eax)
	C = false
	r12 = (uint64) eax
	branch Test(SG,S) l0000000000411C28
// DataOut: eax fs r10 r12d r13 r14 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00E0(0)

l0000000000411A8A:
	rsi = 0x0000000000413A21
	rdi = (uint64) eax
	rax = fdopen(rdi, 0x0000000000413A21)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	branch Test(EQ,Z) l0000000000411C20
// DataOut: fs r10 r12d r13 r14 r15 r8 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000020000 -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00E0(0)

l0000000000411C20:
	rdi = (uint64) r12d
	eax = close(rdi)
// DataOut: fs r10 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000413A21 -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411AA2:
	r12 = fp - 0x00000000000000B8
	qwLocD0 = 0x0000000000000000
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000413A21 -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411AB0:
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411C01
// DataOut: fs r10 r13 r14 r15 r8 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411ABE:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000008:word64] = rdx
	edi = (word32) Mem0[rax:byte]
// DataOut: edi fs r10 r13 r14 r15 r8 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411AC9:
	SCZO = cond(edi - 0x00000020)
	branch Test(EQ,Z) l0000000000411AB0
// DataOut: edi fs r10 r13 r14 r15 r8 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411ACE:
	eax = rdi - 0x0000000000000009
	SCZO = cond(eax - 0x00000001)
	branch Test(ULE,CZ) l0000000000411AB0
// DataOut: edi fs r10 r13 r14 r15 r8 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411AD6:
	SCZO = cond(edi - 0x00000023)
	branch Test(EQ,Z) l0000000000411C75
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411C75:
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411D1D
// DataOut: fs r10 r13 r14 r15 r8 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411D1D:
	rdi = r15
	eax = __uflow(rdi)
// DataOut: eax fs r10 r13 r14 r15 r8 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411C83:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000008:word64] = rdx
	eax = (word32) Mem0[rax:byte]
// DataOut: eax fs r10 r13 r14 r15 r8 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411C8E:
	SCZO = cond(eax - 0x0000000A)
	branch Test(NE,Z) l0000000000411C70
// DataOut: eax fs r10 r13 r14 r15 r8 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411C70:
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(EQ,Z) l0000000000411C93
// DataOut: eax fs r10 r13 r14 r15 r8 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411C93:
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(NE,Z) l0000000000411AB0
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411ADF:
	rsi = r15
	eax = ungetc(rdi, rsi)
	rcx = fp - 0x0000000000000078
	rax = 0x0000000000000000
	rdx = fp - 0x00000000000000B8
	rsi = 0x0000000000417012
	rdi = r15
	eax = fscanf(rdi, 0x0000000000417012, tLocE0)
	SCZO = cond(eax - 0x00000001)
	branch Test(LE,SZO) l0000000000411C9C
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411B07:
	rdx = fp - 0x00000000000000B8
// DataOut: fs r14 r15 r8 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:fp - 0x00000000000000B8 rsi:0x0000000000417012 edi:<invalid> rcx:fp - 0x0000000000000078 r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0) Local -00E0(0)

l0000000000411B0A:
	rcx = (uint64) Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000411B0A
// DataOut: al eax fs r14 r15 r8 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0) Local -00E0(0)

l0000000000411B21:
	rcx = (uint64) eax
	r10 = fp - 0x0000000000000078
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000411B33
// DataOut: al cl fs r10 r14 r15 r8 rbp rbx rdx
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0) Local -00E0(0)

l0000000000411B30_1:
	eax = ecx
// DataOut: al fs r10 r14 r15 r8 rbp rbx rdx
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:fp - 0x0000000000000078 al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0) Local -00E0(0)

l0000000000411B33:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000411B3B
// DataOut: al fs r10 r14 r15 r8 rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:fp - 0x0000000000000078 al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0) Local -00E0(0)

l0000000000411B37_1:
	rdx = rcx
// DataOut: al fs r10 r14 r15 r8 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:fp - 0x0000000000000078 al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0) Local -00E0(0)

l0000000000411B3B:
	al = al + al
	SCZO = cond(al)
	rdx = rdx - 0x03 - C
	rdx = rdx - (fp - 0x00000000000000B8)
	SCZO = cond(rdx)
// DataOut: fs r10 r14 r15 r8 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:fp - 0x0000000000000078 al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0) Local -00E0(0)

l0000000000411B44:
	rcx = (uint64) Mem0[rdx:word32]
	r10 = r10 + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000411B44
// DataOut: al eax fs r10 r14 r15 r8 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0) Local -00E0(0)

l0000000000411B5C:
	rcx = (uint64) eax
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000411B69
// DataOut: al cl fs r10 r14 r15 r8 rbp rbx rdx
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0) Local -00E0(0)

l0000000000411B66_1:
	eax = ecx
// DataOut: al fs r10 r14 r15 r8 rbp rbx rdx
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0) Local -00E0(0)

l0000000000411B69:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000411B71
// DataOut: al fs r10 r14 r15 r8 rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0) Local -00E0(0)

l0000000000411B6D_1:
	r10 = rcx
// DataOut: al fs r10 r14 r15 r8 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0) Local -00E0(0)

l0000000000411B71:
	al = al + al
	SCZO = cond(al)
	rax = fp - 0x0000000000000078
	r10 = r10 - 0x03 - C
	r10 = r10 - (fp - 0x0000000000000078)
	SCZO = cond(qwLocD0 - 0x0000000000000000)
	rax = r10 + rdx
	branch Test(NE,Z) l0000000000411CBC
// DataOut: fs r10 r14 r15 r8 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411CBC:
	rax = rax + qwLocD0
	SCZO = cond(rax)
	rdi = r14
	qwLocC0 = r10
	qwLocC8 = rdx
	rcx = rax + 0x0000000000000002
	rsi = rax + 0x0000000000000003
	qwLocD0 = rcx
	rax = realloc(rdi, rsi)
	r10 = qwLocC0
	r13 = rax
	rdx = qwLocC8
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411B8F:
	rcx = rax + 0x0000000000000002
	rdi = rax + 0x0000000000000003
	qwLocC0 = rdx
	qwLocC8 = r10
	qwLocD0 = rcx
	rax = malloc(rdi)
	r10 = qwLocC8
	rdx = qwLocC0
	r13 = rax
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000417012 edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411BB8:
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l0000000000411D02
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411D02:
	rdi = r14
	r14 = 0x0000000000416919
	free(rdi)
	rdi = r15
	eax = fn0000000000411D30(rdi, r8, r13, out rsi)
// DataOut: fs r10 r14 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411BC1:
	r14 = qwLocD0
	rdi = 0xFFFFFFFFFFFFFFFE
	rsi = fp - 0x00000000000000B8
	rdi = 0xFFFFFFFFFFFFFFFE - rdx
	r14 = r14 - r10
	rdi = rdi + r14
	rdi = rdi + r13
	rax = strcpy(rdi, fp - 0x00000000000000B8)
	rdi = r13 - 0x0000000000000001 + r14
	rsi = fp - 0x0000000000000078
	r14 = r13
	rax = strcpy(rdi, fp - 0x0000000000000078)
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(ULT,C) l0000000000411ABE
// DataOut: fs r10 r13 r14 r15 r8 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411C01:
	rdi = r15
	eax = __uflow(rdi)
	SCZO = cond(eax - 0xFFFFFFFF)
	rdi = (uint64) eax
	branch Test(EQ,Z) l0000000000411C9C
// DataOut: edi fs r10 r13 r14 r15 r8 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)

l0000000000411C9C:
	rdi = r15
	eax = fn0000000000411D30(rdi, r8, r13, out rsi)
	rax = qwLocD0
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000411C28
// DataOut: fs r10 r14 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411C28:
	r14 = 0x0000000000416919
// DataOut: fs r10 r14 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411CB2:
	Mem0[r14 + rax:byte] = 0x00
// DataOut: fs r10 r14 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411C2E:
	rdi = rbp
	free(rdi)
// DataOut: fs r10 r14 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411C36:
	Mem0[0x000000000061B358:word64] = r14
// DataOut: fs r10 r14 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l000000000041196A:
	ebp = (word32) Mem0[rsi:byte]
	SZO = cond(bpl & bpl)
	C = false
	branch Test(EQ,Z) l000000000041199C
// DataOut: bpl fs r10 r14 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411973:
	rsi = r14
	rdi = rbx
	eax = strcmp(rdi, rsi)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041198F
// DataOut: bpl fs r10 r14 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411982:
	SCZO = cond(bpl - 0x2A)
	branch Test(NE,Z) l0000000000411950
// DataOut: fs r10 r14 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411988:
	SCZO = cond(Mem0[rsi + 0x0000000000000001:byte] - 0x00)
	branch Test(NE,Z) l0000000000411950
// DataOut: fs r10 r14 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411950:
	rdi = r14
	eax = strlen(rdi)
	rbp = r14 + 0x0000000000000001 + rax
	rdi = rbp
	eax = strlen(rdi)
	r14 = rbp + 0x0000000000000001 + rax
// DataOut: fs r10 r14 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l000000000041198F:
	rdi = r14
	eax = strlen(rdi)
	rbx = r14 + 0x0000000000000001 + rax
// DataOut: fs r10 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l000000000041199C:
	SCZO = cond(Mem0[rbx:byte] - 0x00)
	rax = 0x0000000000416FFC
	branch Test(NE,Z) l00000000004119A8
// DataOut: fs r10 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l00000000004119A4_1:
	rbx = 0x0000000000416FFC
// DataOut: fs r10 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:0x0000000000416FFC r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:0x00416FFC rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:0xFC -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l00000000004119A8:
	rcx = qwLoc40
	rcx = rcx ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rcx)
	C = false
	rax = rbx
	branch Test(NE,Z) l0000000000411CFD
// DataOut: fs r10 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:0x0000000000416FFC r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:0x00416FFC rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:0xFC -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32)

l0000000000411CFD:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004119C2:
	rsp = fp - 0x0000000000000030
	SCZO = cond(fp - 0x0000000000000030)
	rbx = qwLoc30
	rsp = fp - 0x0000000000000028
	rbp = qwLoc28
	rsp = fp - 0x0000000000000020
	r12 = qwLoc20
	rsp = fp - 0x0000000000000018
	r13 = qwLoc18
	rsp = fp - 0x0000000000000010
	r14 = qwLoc10
	rsp = fp - 0x0000000000000008
	r15 = qwLoc08
	rsp = fp
	return rax
// DataOut: fs r10 r12d r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000411900_exit:
	use r10 (=> r10Out)
// DataOut: r10 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> r14:r14 rbx:rbx ebp:<invalid> rcx:<invalid> rbp:rbp r12:r12 r13:r13 r15:r15 rsi:<invalid> eax:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000411C14:
// DataOut: edi fs r10 r13 r14 r15 r8 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64) Local -00E0(0)



word32 fn0000000000411D30(word64 rdi, word64 r8, word64 r13, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r13 r8 rdi
// LiveOut: eax rsi
// Trashed: SCZO ah al ax dh dl dx eax edx esi rax rdx rsi si sil
// Preserved: r12 rbp rbx rdi rsp
fn0000000000411D30_entry:
	*rsiOut = rsi
// DataOut: ebx fs r10 r13 r14 r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411D30:
	branch fileno(rdi) < 0x00000000 l0000000000411D9F
// DataOut: fs r10 r13 r14 r8 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D43:
	branch __freading(rdi) != 0x00000000 l0000000000411D80
// DataOut: fs r10 r13 r14 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi eax:<invalid> rdi:rdi -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D80:
	word64 rsi_112
	*rsiOut = 0x0000000000000000
	branch DPB(rax, lseek((uint64) fileno(rdi), 0x0000000000000000, 0x0000000000000001), 0) != 0xFFFFFFFFFFFFFFFF l0000000000411D4C
// DataOut: fs r10 r13 r14 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi eax:<invalid> rdi:rdi -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D4C:
	word64 rsi_81
	branch fn0000000000411DB0(rdi, out rsi_81) == 0x00000000 l0000000000411D9C
// DataOut: fs r10 r13 r14 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi eax:<invalid> rdi:<invalid> rsi:<invalid> rdx:0x0000000000000001 -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D9C:
// DataOut: fs r10 r14 r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi eax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D9F:
	return fclose(rdi)
// DataOut: eax ebx fs r10 r14 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi eax:<invalid> rdi:rdi rsi:<invalid> rdx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l0000000000411D58:
	__errno_location()
	word32 r12d_90 = (word32) (uint64) Mem0[r8:word32]
	word32 eax_109 = fclose(rdi)
	branch r12d_90 == 0x00000000 l0000000000411D79
// DataOut: eax fs r10 r12d r13 r14 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi eax:<invalid> rdi:rdi rsi:<invalid> rdx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D70:
	Mem106[r13:word32] = r12d_90
	eax_109 = 0xFFFFFFFF (alias)
// DataOut: eax fs r10 r14 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi eax:<invalid> rdi:rdi rax:<invalid> r12:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D79:
	return eax_109
// DataOut: eax ebx fs r10 r14 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi eax:<invalid> rdi:rdi rax:<invalid> r12:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn0000000000411D30_exit:
// DataOut: eax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx eax:<invalid> rdi:rdi rbp:rbp r12:r12 rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word32 fn0000000000411DB0(word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: eax rsi
// Trashed: SCZO ah al ax dh dl dx eax edx esi rax rdx rsi si sil
// Preserved: rbx rdi rsp
fn0000000000411DB0_entry:
	*rsiOut = rsi
// DataOut: fs r10 r13 r14 r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DB0:
	branch rdi == 0x0000000000000000 l0000000000411DC2
// DataOut: fs r10 r13 r14 r8 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411DB9:
	branch __freading(rdi) != 0x00000000 l0000000000411DD0
// DataOut: fs r10 r13 r14 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi -8(fp):rbx

l0000000000411DD0:
	branch (Mem0[rdi:word32] & 0x00000100) == 0x00000000 l0000000000411DC2
// DataOut: fs r10 r13 r14 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi eax:<invalid> -8(fp):rbx

l0000000000411DD8:
	fn0000000000411DF0(0x0000000000000001, 0x0000000000000000, rdi)
	word64 rsi_41
	*rsiOut = 0x0000000000000000
	return fflush(rdi)
// DataOut: eax fs r10 r13 r14 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi eax:<invalid> -8(fp):rbx

l0000000000411DC2:
	return fflush(rdi)
// DataOut: eax fs r10 r13 r14 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi eax:<invalid> -8(fp):rbx

fn0000000000411DB0_exit:
// DataOut: eax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx eax:<invalid> rdi:rdi rdx:<invalid> rsi:<invalid> rax:<invalid> -8(fp):rbx



void fn0000000000411DF0(word64 rdx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx rax rdi rdx
// Preserved: rbx rdi rsi rsp
fn0000000000411DF0_entry:
// DataOut: edx fs r10 r13 r14 r8 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DF0:
	branch Mem0[rdi + 0x0000000000000010:word64] == Mem0[rdi + 0x0000000000000008:word64] l0000000000411E10
// DataOut: edx fs r10 r13 r14 r8 rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411E10:
	word64 rax_39 = Mem0[rdi + 0x0000000000000020:word64]
	branch Mem0[rdi + 0x0000000000000028:word64] != rax_39 l0000000000411E02
// DataOut: edx fs r10 r13 r14 r8 rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000411E1A:
	branch Mem0[rdi + 0x0000000000000048:word64] != 0x0000000000000000 l0000000000411E02
// DataOut: edx fs r10 r13 r14 r8 rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000411E21:
	word64 rax_52 = DPB(rax_39, lseek((uint64) fileno(rdi), rsi, (uint64) edx), 0)
	branch rax_52 == 0xFFFFFFFFFFFFFFFF l0000000000411E4F
// DataOut: fs r10 r13 r14 r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000411E43:
	Mem63[rdi:word32] = Mem0[rdi:word32] & 0xFFFFFFEF
	Mem65[rdi + 0x0000000000000090:word64] = rax_52
// DataOut: fs r10 r13 r14 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi rax:<invalid> eax:<invalid> rdx:<invalid> rsi:rsi rdi:<invalid> -24(fp):rsi -12(fp):edx -8(fp):rbx
// LocalsOut: fp(64)

l0000000000411E4F:
	return
// DataOut: fs r10 r13 r14 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi rax:<invalid> eax:<invalid> rdx:<invalid> rsi:rsi rdi:<invalid> -24(fp):rsi -12(fp):edx -8(fp):rbx

l0000000000411E02:
	fseeko(rdi, rsi, rdx)
	return
// DataOut: fs r10 r13 r14 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi rax:<invalid> -8(fp):rbx

fn0000000000411DF0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rax:<invalid> rdi:<invalid> eax:<invalid> rdx:<invalid> rsi:rsi -24(fp):rsi -12(fp):edx -8(fp):rbx



void fn0000000000411EE0(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO ah al ax dh dl dx eax edx esi rax rdx rsi si sil
// Preserved: rsp
fn0000000000411EE0_entry:
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411EE0:
	word64 rdx_16
	branch 0x000000000061A3A8 == 0x0000000000000000 l0000000000411EF6
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411EF6:
	rdx_16 = 0x0000000000000000
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8

l0000000000411EEC:
	rdx_16 = Mem0[0x000000000061A3A8:word64]
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8

l0000000000411EEF:
	__cxa_atexit(rdi, 0x0000000000000000, rdx_16)
	return
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8 rdx:<invalid>

fn0000000000411EE0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid>



void _fini()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO
// Preserved: rsp
_fini_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411EFC:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

_fini_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



