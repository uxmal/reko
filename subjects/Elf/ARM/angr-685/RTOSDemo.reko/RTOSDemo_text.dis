void NmiSR()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
NmiSR_exit:
NmiSR_entry:
l00008000:


void FaultISR()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
FaultISR_exit:
FaultISR_entry:
l00008004:


void ResetISR(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
ResetISR_exit:
ResetISR_entry:
l00008008:
	word32 r3_16 = Mem0[0x0000802C<p32>:word32]
	word32 r0_5 = Mem0[0x00008030<p32>:word32]
	branch r3_16 >=u r0_5 l00008026
l00008010:
	word32 r2_13 = (~r3_16 + r0_5 & 0xFFFFFFFC<32>) + 4<32> + r3_16
l0000801E:
	Mem17[r3_16:word32] = 0<32>
	r3_16 = r3_16 + 4<i32>
	branch r3_16 != r2_13 l0000801E
l00008026:
l00008026_thunk_Main:
	Main(cpsr)


void raise()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
raise_exit:
raise_entry:
l00008034:


void vPrintTask(word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31]
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vPrintTask_exit:
vPrintTask_entry:
	ptr32 fp
	word32 dwLoc14
l00008038:
	word32 r4_10 = 0<32>
	word32 r5_11 = Mem9[0x00008064<p32>:word32]
l00008040:
	lr = MPU_xQueueGenericReceive(Mem9[r5_11:word32], fp - 20<i32>, 0xFFFFFFFF<32>, 0<32>, lr, cpsr)
	OSRAMClear()
	r4_10 = r4_10 + 1<32>
	OSRAMStringDraw(dwLoc14, r4_10 & 0x3F<32>, r4_10 & 1<32>)


void vCheckTask(word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31]
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vCheckTask_exit:
vCheckTask_entry:
	ptr32 fp
l00008068:
	MPU_xTaskGetTickCount(cpsr)
	word32 r5_20 = Mem12[0x0000809C<p32>:word32]
l0000807C:
	MPU_vTaskDelayUntil(fp - 24<i32>, 0x1388<32>, cpsr)
	lr = MPU_xQueueGenericSend(Mem23[r5_20:word32], fp - 20<i32>, 0xFFFFFFFF<32>, 0<32>, lr, cpsr)


void Main(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      ResetISR
// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
Main_exit:
Main_entry:
l000080A0:
	MPU_xQueueGenericCreate(3<32>, 4<32>, cpsr)
	Mem19[Mem5[0x000080F0<p32>:word32]:word32] = 3<32>
	OSRAMInit(0<32>)
	MPU_xTaskCreate(Mem34[0x000080F8<p32>:word32], Mem31[0x000080F4<p32>:word32], 0x3B<32>, 0<32>, cpsr, 3<32>, 0<32>)
	MPU_xTaskCreate(Mem47[0x00008100<p32>:word32], Mem34[0x000080FC<p32>:word32], 0x3B<32>, 0<32>, cpsr, 2<32>, 0<32>)
	vTaskStartScheduler(cpsr)
	OSRAMStringDraw(Mem47[0x00008104<p32>:word32], 0<32>, 0<32>)
l000080EC:


void vUART_ISR(word32 r4, word32 r5, word32 r6, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31] r4:[0..31] r5:[0..31] r6:[0..31]
// LiveOut:
// Trashed: NZC r0 r1 r2 r3 r4 r5 r6
// Preserved: V lr sp
vUART_ISR_entry:
	ptr32 fp
	struct <anonymous> tLoc15
l00008108:
	Mem5[&tLoc15 + 5<i32>:word32] = r4
	Mem7[&tLoc15 + 9<i32>:word32] = r5
	Mem9[&tLoc15 + 13<i32>:word32] = r6
	Mem11[&tLoc15 + 17<i32>:word32] = lr
	word32 r5_13 = Mem11[0x00008174<p32>:word32]
	Mem17[&tLoc15 + 1<i32>:word32] = 0<32>
	word32 r0_18 = UARTIntStatus(r5_13, 1<32>)
	UARTIntClear(r5_13, r0_18)
	branch r0_18 << 27<i32> >= 0<32> l00008130
l00008128:
	branch Mem17[Mem17[0x00008178<p32>:word32]:word32] << 25<i32> < 0<32> l0000815E
l0000815E:
	Mem34[&tLoc15:byte] = Mem17[r5_13:byte]
	xQueueGenericSendFromISR(fp - 0x15<32>, r0_18, fp - 20<i32>, 0<32>, lr, cpsr)
l00008130:
	branch r0_18 << 26<i32> >= 0<32> l0000813C
l00008134:
	word32 r2_49 = Mem48[0x0000817C<p32>:word32]
	word32 r3_50 = CONVERT(Mem48[r2_49:byte], byte, word32)
	branch r3_50 <=u 0x7A<32> l0000814C
l0000814C:
	word32 r1_54 = Mem48[Mem48[0x00008178<p32>:word32]:word32]
	word32 r1_55 = r1_54 << 26<i32>
	branch r1_54 << 26<i32> < 0<32> l00008156
l00008154_1:
	r1_55 = Mem48[0x00008174<p32>:word32]
l00008156:
	Mem61[r1_55:word32] = r3_50
	Mem65[r2_49:byte] = SLICE(r3_50, byte, 0) + 1<8>
l0000813C:
	branch Mem69[&tLoc15 + 1<i32>:word32] == 0<32> l00008148
l00008140:
	Mem73[Mem69[0x00008180<p32>:word32]:word32] = 0x10000000<32>
l00008148:
	return
vUART_ISR_exit:


word32 vSetErrorLED(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      prvSetAndCheckRegisters
// MayUse:  cpsr:[0..31]
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: sp
vSetErrorLED_entry:
l00008184:
l00008188_thunk_vParTestSetLED:
	return vParTestSetLED(7<32>, 1<32>, cpsr)
vSetErrorLED_exit:


word32 prvSetAndCheckRegisters(word32 cpsr, ptr32 & r4Out, ptr32 & r5Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & r8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      vApplicationIdleHook
// MayUse:  cpsr:[0..31]
// LiveOut: r0 r4 r5 r6 r7 r8
// Trashed: NZCV fp ip r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: lr sp
prvSetAndCheckRegisters_entry:
l0000818C:
	branch false l00008200
l000081C6:
	branch false l00008200
l000081CA:
	branch false l00008200
l000081CE:
	branch false l00008200
l000081D2:
	branch false l00008200
l000081D6:
	branch false l00008200
l000081DA:
	branch false l00008200
l000081DE:
	branch false l00008200
l000081E2:
	branch false l00008200
l000081E6:
	branch false l00008200
l000081EC:
	branch false l00008200
l000081F2:
	branch false l00008200
l000081F8:
	branch false l00008200
l00008200:
	word32 r0_50 = vSetErrorLED(cpsr)
	r4Out = <invalid>
	r5Out = <invalid>
	r6Out = <invalid>
	r7Out = <invalid>
	r8Out = <invalid>
	return r0_50
l000081FE:
	r4Out = <invalid>
	r5Out = <invalid>
	r6Out = <invalid>
	r7Out = <invalid>
	r8Out = <invalid>
	return 0xB<32>
prvSetAndCheckRegisters_exit:


void vApplicationIdleHook(word32 r0, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      prvIdleTask
// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r4:[0..31] r5:[0..31] r6:[0..31] r7:[0..31] r8:[0..31]
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vApplicationIdleHook_exit:
vApplicationIdleHook_entry:
l00008210:
l00008212:
	lr = vCoRoutineSchedule(r0, r4, r5, r6, r7, r8, lr, cpsr, out cpsr)
	r0 = prvSetAndCheckRegisters(cpsr, out r4, out r5, out r6, out r7, out r8)


void PDCInit()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      vParTestInitialise
// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 r5 sp
PDCInit_entry:
l00008220:
	SysCtlPeripheralEnable(Mem9[0x0000828C<p32>:word32])
	SysCtlPeripheralEnable(Mem9[0x00008290<p32>:word32])
	GPIODirModeSet(0x40004000<32>, 0x34<32>, 2<32>)
	GPIODirModeSet(0x40004000<32>, 8<32>, 1<32>)
	GPIOPadConfigSet(0x40004000<32>, 4<32>, 2<32>, 0xA<32>)
	word32 r5_55 = Mem9[0x00008294<p32>:word32]
	SSIConfig(r5_55, 0<32>, 0<32>, Mem9[0x00008298<p32>:word32], 8<32>)
	SSIEnable(r5_55)
	GPIOPinWrite(0x40004000<32>, 8<32>, 0<32>)
l00008288_thunk_GPIOPinWrite:
	GPIOPinWrite(0x40004000<32>, 8<32>, 8<32>)
	return
PDCInit_exit:


word32 PDCWrite(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      vParTestInitialise
//      vParTestSetLED
//      vParTestToggleLED
// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut: r0
// Trashed: NZC r0 r1 r2 r3
// Preserved: r4 r5 sp
PDCWrite_entry:
	ptr32 fp
l0000829C:
	word32 r4_12 = Mem9[0x000082CC<p32>:word32]
	SSIDataPut(r4_12, r0 & 0xF<32>)
	SSIDataPut(r4_12, r1)
	SSIDataGet(r4_12, fp - 20<i32>)
	SSIDataGet(r4_12, fp - 20<i32>)
	return r4_12
PDCWrite_exit:


void vListInitialise(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      xQueueGenericReset
//      prvAddNewTaskToReadyList
//      xEventGroupCreate
//      xCoRoutineCreate
// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r1 r2 r3
// Preserved: sp
vListInitialise_entry:
l000082D0:
	Mem7[r0 + 8<i32>:word32] = 0xFFFFFFFF<32>
	Mem8[r0:word32] = 0<32>
	Mem9[r0 + 4<i32>:word32] = r0 + 8<32>
	Mem10[r0 + 12<i32>:word32] = r0 + 8<32>
	Mem11[r0 + 16<i32>:word32] = r0 + 8<32>
	return
vListInitialise_exit:


void vListInitialiseItem(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      prvInitialiseNewTask
//      xCoRoutineCreate
// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
vListInitialiseItem_entry:
l000082E8:
	Mem5[r0 + 16<i32>:word32] = 0<32>
	return
vListInitialiseItem_exit:


void vListInsertEnd(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      prvAddNewTaskToReadyList
//      xTaskGenericNotify
//      xTaskGenericNotifyFromISR
//      vTaskNotifyGiveFromISR
//      xTaskIncrementTick
//      xTaskResumeAll
//      vTaskPlaceOnUnorderedEventList
//      xTaskRemoveFromEventList
//      xTaskRemoveFromUnorderedEventList
//      vTaskPriorityInherit
//      xTaskPriorityDisinherit
//      xCoRoutineCreate
//      vCoRoutineSchedule
//      xCoRoutineRemoveFromEventList
// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r2 r3
// Preserved: r4 sp
vListInsertEnd_entry:
l000082F0:
	word32 r3_6 = Mem0[r0 + 4<i32>:word32]
	word32 r2_5 = Mem0[r0:word32]
	Mem14[r1 + 8<i32>:word32] = Mem9[r3_6 + 8<i32>:word32]
	word32 r4_15 = Mem14[r3_6 + 8<i32>:word32]
	Mem16[r1 + 4<i32>:word32] = r3_6
	Mem17[r4_15 + 4<i32>:word32] = r1
	Mem18[r3_6 + 8<i32>:word32] = r1
	Mem21[r1 + 16<i32>:word32] = r0
	Mem22[r0:word32] = r2_5 + 1<32>
	return
vListInsertEnd_exit:


bool vListInsert(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      prvAddCurrentTaskToDelayedList.isra.0
//      vTaskPlaceOnEventList
//      vCoRoutineAddToDelayedList
// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut: Z
// Trashed: NZCV r2 r3
// Preserved: r4 r5 sp
vListInsert_entry:
	bool Z
l0000830C:
	word32 r2_13
	word32 r3_14
	word32 r5_9 = Mem7[r1:word32]
	branch Z l00008338
l00008338:
	r2_13 = Mem7[r0 + 16<i32>:word32]
	r3_14 = Mem7[r2_13 + 4<i32>:word32]
l00008314:
	r2_13 = r0 + 8<32>
l0000831C:
	r3_14 = Mem7[r2_13 + 4<i32>:word32]
	branch r5_9 >=u Mem7[r3_14:word32] l0000831A
l0000831A:
	r2_13 = r3_14
l00008324:
	word32 r4_27 = Mem7[r0:word32]
	Mem31[r1 + 4<i32>:word32] = r3_14
	Mem34[r3_14 + 8<i32>:word32] = r1
	Mem36[r1 + 8<i32>:word32] = r2_13
	Mem37[r2_13 + 4<i32>:word32] = r1
	Mem38[r1 + 16<i32>:word32] = r0
	Mem39[r0:word32] = r4_27 + 1<32>
	return SLICE(cond(r4_27 + 1<32>), bool, 2)
vListInsert_exit:


word32 uxListRemove(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      prvAddCurrentTaskToDelayedList.isra.0
//      xTaskGenericNotify
//      xTaskGenericNotifyFromISR
//      vTaskNotifyGiveFromISR
//      xTaskIncrementTick
//      xTaskResumeAll
//      xTaskRemoveFromEventList
//      xTaskRemoveFromUnorderedEventList
//      vTaskPriorityInherit
//      xTaskPriorityDisinherit
//      vCoRoutineAddToDelayedList
//      vCoRoutineSchedule
//      xCoRoutineRemoveFromEventList
// MayUse:  r0:[0..31]
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 sp
uxListRemove_entry:
l00008340:
	word32 r2_5 = Mem0[r0 + 16<i32>:word32]
	word32 r3_6 = Mem0[r0 + 4<i32>:word32]
	Mem11[r3_6 + 8<i32>:word32] = Mem0[r0 + 8<i32>:word32]
	word32 r4_12 = Mem11[r2_5 + 4<i32>:word32]
	word32 r1_13 = Mem11[r0 + 8<i32>:word32]
	Mem15[r1_13 + 4<i32>:word32] = r3_6
	branch r0 != r4_12 l00008356
l00008354_1:
	Mem17[r2_5 + 4<i32>:word32] = r1_13
l00008356:
	word32 r3_21 = Mem20[r2_5:word32]
	Mem23[r0 + 16<i32>:word32] = 0<32>
	Mem25[r2_5:word32] = r3_21 - 1<32>
	return r3_21 - 1<32>
uxListRemove_exit:


bool xQueueCRSend(word32 r0, word32 r1, word32 r2, word32 r7, word32 lr, word32 cpsr, ptr32 & r0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      prvFixedDelayCoRoutine
// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r7:[0..31]
// LiveOut: Z r0
// Trashed: NZCV lr r0 r1 r2 r3 r7
// Preserved: r4 r5 r6 sp
xQueueCRSend_entry:
l00008364:
	__msr(cpsr, 0xBF<32>)
	__isb_sy()
	__dsb_sy()
	vPortEnterCritical(cpsr)
	branch Mem11[r0 + 56<i32>:word32] == Mem11[r0 + 60<i32>:word32] l000083B2
l000083B2:
	bool Z_33 = vPortExitCritical(cpsr)
	branch r2 != 0<32> l000083D8
l000083D8:
	bool Z_43 = vCoRoutineAddToDelayedList(r2, r0 + 0x10<32>)
	__msr(cpsr, 0<32>)
	r0Out = 0xFFFFFFFC<32>
	return Z_43
l000083B8:
	__msr(cpsr, r2)
	r0Out = r2
	return Z_33
l00008388:
	vPortExitCritical(cpsr)
	__msr(cpsr, 0<32>)
	__msr(cpsr, 0xBF<32>)
	__isb_sy()
	__dsb_sy()
	word32 r2_65 = Mem11[r0 + 56<i32>:word32]
	word32 r3_66 = Mem11[r0 + 60<i32>:word32]
	word32 r0_136 = 0<32>
	bool Z_157 = SLICE(cond(r2_65 - r3_66), bool, 2)
	branch r2_65 <u r3_66 l000083C0
l000083C0:
	word32 r0_161
	word32 r7_162
	word32 lr_163
	Z_157 = prvCopyDataToQueue(r0, r1, 0<32>, r7, lr, out r0_161, out r7_162, out lr_163)
	branch Mem11[r0 + 36<i32>:word32] != 0<32> l000083EE
l000083EE:
	word32 r0_85
	xCoRoutineRemoveFromEventList(r0 + 0x24<32>, out r0_85)
	Z_157 = SLICE(cond(r0_85), bool, 2) (alias)
	branch r0_85 == 0<32> l000083CE
l000083FA:
	r0_136 = 0xFFFFFFFB<32>
l000083CE:
	__msr(cpsr, 0<32>)
	r0Out = 1<32>
	return Z_157
l000083AA:
	__msr(cpsr, 0<32>)
	r0Out = r0_136
	return Z_157
xQueueCRSend_exit:


bool xQueueCRReceive(word32 r0, word32 r1, word32 r2, word32 r6, word32 r7, word32 lr, word32 cpsr, ptr32 & r0Out, ptr32 & r6Out, ptr32 & r7Out, ptr32 & lrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      prvFlashCoRoutine
// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r6:[0..31] r7:[0..31]
// LiveOut: Z lr r0 r6 r7
// Trashed: NZCV lr r0 r1 r2 r6 r7
// Preserved: r3 r4 r5 sp
xQueueCRReceive_entry:
	bool Z
l00008400:
	__msr(cpsr, 0xBF<32>)
	__isb_sy()
	__dsb_sy()
	word32 r5_16 = Mem11[r0 + 56<i32>:word32]
	branch r5_16 != 0<32> l00008424
l00008424:
	word32 r0_158
	__msr(cpsr, 0<32>)
	__msr(cpsr, 0xBF<32>)
	__isb_sy()
	__dsb_sy()
	word32 r2_19 = Mem11[r0 + 56<i32>:word32]
	branch r2_19 != 0<32> l00008448
l00008448:
	word32 r1_30
	word32 r2_22 = Mem11[r0 + 64<i32>:word32]
	word32 r3_24 = Mem11[r0 + 4<i32>:word32]
	word32 r1_25 = Mem11[r0 + 12<i32>:word32] + r2_22
	word32 r3_27 = Mem11[r0 + 56<i32>:word32]
	Mem28[r0 + 12<i32>:word32] = r1_25
	r1_30 = r1_25
	branch r1_25 <u r3_24 l0000845C
l0000845A_1:
	r1_30 = Mem28[r0:word32]
l0000845C:
	Mem34[r0 + 56<i32>:word32] = r3_27 + 0xFFFFFFFF<32>
	branch r1_25 <u r3_24 l00008466
l00008464_1:
	Mem37[r0 + 12<i32>:word32] = r1_30
l00008466:
	word32 r4_59
	word32 r5_189
	Z = memcpy(r1, r1_30, r2_22, r0, r5_16, r6, r7, lr, out r4_59, out r5_189, out r6, out r7, out lr)
	branch Mem67[r4_59 + 16<i32>:word32] != 0<32> l00008478
l00008478:
	word32 r0_70
	xCoRoutineRemoveFromEventList(r4_59 + 0x10<32>, out r0_70)
	Z = SLICE(cond(r0_70), bool, 2) (alias)
	branch r0_70 == 0<32> l0000846E
l00008484:
	r0_158 = 0xFFFFFFFB<32>
l0000846E:
	__msr(cpsr, 0<32>)
	r0Out = 1<32>
	r6Out = r6
	r7Out = r7
	lrOut = lr
	return Z
l0000843E:
	r0_158 = r2_19
l00008440:
	__msr(cpsr, 0<32>)
	r0Out = r0_158
	r6Out = r6
	r7Out = r7
	lrOut = lr
	return Z
l00008418:
	bool Z_105 = SLICE(cond(r2), bool, 2)
	branch r2 != 0<32> l0000848A
l0000848A:
	bool Z_113 = vCoRoutineAddToDelayedList(r2, r0 + 0x24<32>)
	__msr(cpsr, r5_16)
	r0Out = 0xFFFFFFFC<32>
	r6Out = r6
	r7Out = r7
	lrOut = lr
	return Z_113
l0000841C:
	__msr(cpsr, r2)
	r0Out = r2
	r6Out = r6
	r7Out = r7
	lrOut = lr
	return Z_105
xQueueCRReceive_exit:


void xQueueCRSendFromISR(word32 r0, word32 r1, word32 r2, word32 r7, word32 lr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  lr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r7:[0..31]
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3 r7
// Preserved: r4 r5 r6 sp
xQueueCRSendFromISR_entry:
l000084A0:
	branch Mem11[r0 + 56<i32>:word32] <u Mem11[r0 + 60<i32>:word32] l000084B0
l000084B0:
	word32 lr_99
	word32 r7_98
	word32 r0_97
	prvCopyDataToQueue(r0, r1, 0<32>, r7, lr, out r0_97, out r7_98, out lr_99)
	branch r2 != 0<32> l000084AC
l000084BC:
	branch Mem11[r0 + 36<i32>:word32] == 0<32> l000084AC
l000084C2:
	word32 r0_100
	branch xCoRoutineRemoveFromEventList(r0 + 0x24<32>, out r0_100) l000084D0
l000084CE_1:
l000084D0:
l000084AC:
	return
xQueueCRSendFromISR_exit:


void xQueueCRReceiveFromISR(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31]
// LiveOut:
// Trashed: NZCV lr r0 r1 r2
// Preserved: r3 r4 r5 r6 r7 sp
xQueueCRReceiveFromISR_entry:
l000084D4:
	branch Mem15[r0 + 56<i32>:word32] == 0<32> l00008514
l00008514:
	return
l000084DA:
	word32 r3_38
	word32 lr_26 = Mem15[r0 + 64<i32>:word32]
	word32 r4_27 = Mem15[r0 + 4<i32>:word32]
	word32 r3_28 = Mem15[r0 + 12<i32>:word32] + lr_26
	word32 r7_35 = Mem15[r0 + 56<i32>:word32]
	Mem36[r0 + 12<i32>:word32] = r3_28
	r3_38 = r3_28
	branch r3_28 <u r4_27 l000084F4
l000084F2_1:
	r3_38 = Mem36[r0:word32]
l000084F4:
	branch r3_28 <u r4_27 l000084FC
l000084FA_1:
	Mem44[r0 + 12<i32>:word32] = r3_38
l000084FC:
	Mem56[r0 + 56<i32>:word32] = r7_35 + 0xFFFFFFFF<32>
	word32 r6_153
	word32 r4_64
	word32 r5_65
	word32 r7_154
	word32 lr_155
	memcpy(r1, r3_38, lr_26, r0, r2, r1, r7_35 + 0xFFFFFFFF<32>, lr_26, out r4_64, out r5_65, out r6_153, out r7_154, out lr_155)
	branch Mem56[r5_65:word32] != 0<32> l00008510
l0000850C:
	branch Mem56[r4_64 + 16<i32>:word32] != 0<32> l00008518
l00008518:
	word32 r0_75
	xCoRoutineRemoveFromEventList(r4_64 + 0x10<32>, out r0_75)
	branch r0_75 == 0<32> l00008510
l00008524:
	Mem86[r5_65:word32] = 1<32>
	return
l00008510:
	return
xQueueCRReceiveFromISR_exit:


void prvIdleTask(word32 r0, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r4:[0..31] r5:[0..31] r6:[0..31] r7:[0..31] r8:[0..31]
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
prvIdleTask_exit:
prvIdleTask_entry:
l0000852C:
l0000852E:
	vApplicationIdleHook(r0, r4, r5, r6, r7, r8, lr, cpsr)


void xTaskNotifyStateClear(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      MPU_xTaskNotifyStateClear
// MayUse:  cpsr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2
// Preserved: r3 r4 r5 sp
xTaskNotifyStateClear_entry:
l00008534:
	word32 r4_14
	branch r0 == 0<32> l00008558
l00008558:
	r4_14 = Mem11[Mem11[0x00008560<p32>:word32] + 4<i32>:word32]
l00008538:
	r4_14 = r0
l0000853A:
	vPortEnterCritical(cpsr)
	word32 r3_26 = CONVERT(Mem11[r4_14 + 100<i32>:byte], byte, word32)
	branch r3_26 != 2<32> l00008548
l00008546_1:
	r3_26 = 0<32>
l00008548:
	Mem33[r4_14 + 100<i32>:byte] = SLICE(r3_26, byte, 0)
	vPortExitCritical(cpsr)
	return
xTaskNotifyStateClear_exit:


word32 xPortRaisePrivilege(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      vPortEnterCritical
//      vPortExitCritical
//      MPU_xTaskCreateRestricted
//      MPU_xTaskCreate
//      MPU_vTaskAllocateMPURegions
//      MPU_vTaskDelayUntil
//      MPU_vTaskDelay
//      MPU_vTaskSuspendAll
//      MPU_xTaskResumeAll
//      MPU_xTaskGetTickCount
//      MPU_uxTaskGetNumberOfTasks
//      MPU_pcTaskGetName
//      MPU_vTaskSetTimeOutState
//      MPU_xTaskCheckForTimeOut
//      MPU_xTaskGenericNotify
//      MPU_xTaskNotifyWait
//      MPU_ulTaskNotifyTake
//      MPU_xTaskNotifyStateClear
//      MPU_xQueueGenericCreate
//      MPU_xQueueGenericReset
//      MPU_xQueueGenericSend
//      MPU_uxQueueMessagesWaiting
//      MPU_uxQueueSpacesAvailable
//      MPU_xQueueGenericReceive
//      MPU_xQueuePeekFromISR
//      MPU_xQueueGetMutexHolder
//      MPU_xQueueCreateMutex
//      MPU_xQueueTakeMutexRecursive
//      MPU_xQueueGiveMutexRecursive
//      MPU_vQueueDelete
//      MPU_pvPortMalloc
//      MPU_vPortFree
//      MPU_vPortInitialiseBlocks
//      MPU_xPortGetFreeHeapSize
//      MPU_xEventGroupCreate
//      MPU_xEventGroupWaitBits
//      MPU_xEventGroupClearBits
//      MPU_xEventGroupSetBits
//      MPU_xEventGroupSync
//      MPU_vEventGroupDelete
// MayUse:  cpsr:[0..31]
// LiveOut: r0
// Trashed: NZC r0
// Preserved: sp
xPortRaisePrivilege_entry:
l00008564:
	branch (__mrs(cpsr) & 1<32>) == 0<32> l00008570
l0000856E_1:
l00008570:
	__syscall(2<32>)
	return 1<32>
xPortRaisePrivilege_exit:


void vPortEnterCritical(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      prvUnlockQueue
//      xQueueGenericSend
//      xQueueGenericReceive
//      uxQueueMessagesWaiting
//      uxQueueSpacesAvailable
//      xQueueGetMutexHolder
//      xQueueGenericReset
//      prvAddNewTaskToReadyList
//      xTaskGenericNotify
//      xTaskNotifyWait
//      ulTaskNotifyTake
//      xTaskResumeAll
//      xTaskCheckForTimeOut
//      xEventGroupWaitBits
//      xEventGroupClearBits
//      xEventGroupSync
//      vEventGroupClearBitsCallback
//      xQueueCRSend
//      xTaskNotifyStateClear
// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2
// Preserved: r3 sp
vPortEnterCritical_entry:
l00008578:
	word32 r0_9 = xPortRaisePrivilege(cpsr)
	__msr(cpsr, 0xBF<32>)
	__isb_sy()
	__dsb_sy()
	word32 r2_14 = Mem7[0x000085AC<p32>:word32]
	Mem18[r2_14:word32] = Mem7[r2_14:word32] + 1<32>
	branch r0_9 == 1<32> l000085A8
l0000859C:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l000085A8:
	return
vPortEnterCritical_exit:


bool vPortExitCritical(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      prvUnlockQueue
//      xQueueGenericSend
//      xQueueGenericReceive
//      uxQueueMessagesWaiting
//      uxQueueSpacesAvailable
//      xQueueGetMutexHolder
//      xQueueGenericReset
//      prvAddNewTaskToReadyList
//      xTaskGenericNotify
//      xTaskNotifyWait
//      ulTaskNotifyTake
//      xTaskResumeAll
//      xTaskCheckForTimeOut
//      xEventGroupWaitBits
//      xEventGroupClearBits
//      xEventGroupSync
//      vEventGroupClearBitsCallback
//      xQueueCRSend
//      xTaskNotifyStateClear
// MayUse:  cpsr:[0..31]
// LiveOut: Z
// Trashed: NZCV r0 r2
// Preserved: r3 sp
vPortExitCritical_entry:
l000085B0:
	word32 r0_9 = xPortRaisePrivilege(cpsr)
	word32 r2_13 = Mem7[0x000085D8<p32>:word32]
	word32 r3_14 = Mem7[r2_13:word32]
	Mem17[r2_13:word32] = r3_14 - 1<32>
	branch r3_14 != 1<32> l000085C4
l000085C0:
	__msr(cpsr, r3_14 - 1<32>)
l000085C4:
	bool Z_20 = SLICE(cond(r0_9 - 1<32>), bool, 2)
	branch r0_9 == 1<32> l000085D4
l000085C8:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l000085D4:
	return Z_20
vPortExitCritical_exit:


void vParTestInitialise()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr sp
vParTestInitialise_entry:
l000085DC:
	PDCInit()
	word32 r1_18 = CONVERT(Mem7[Mem7[0x000085F0<p32>:word32]:byte], byte, word32)
l000085EC_thunk_PDCWrite:
	PDCWrite(5<32>, r1_18)
	return
vParTestInitialise_exit:


word32 vParTestSetLED(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      vSetErrorLED
// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 r5 sp
vParTestSetLED_entry:
l000085F4:
	word32 r0_17 = MPU_vTaskSuspendAll(cpsr)
	branch r0 >u 7<32> l0000861C
l00008602:
	word32 r3_28 = Mem11[0x0000862C<p32>:word32]
	word32 r0_29 = CONVERT(1<8> << SLICE(r0, byte, 0), byte, uint32)
	word32 r2_30 = CONVERT(Mem11[r3_28:byte], byte, word32)
	branch r1 == 0<32> l00008624
l00008624:
	Mem32[r3_28:byte] = SLICE(r2_30 & ~r0_29, byte, 0)
l00008610:
	Mem35[r3_28:byte] = SLICE(r0_29 | r2_30, byte, 0)
l00008614:
	r0_17 = PDCWrite(5<32>, CONVERT(Mem37[r3_28:byte], byte, word32))
l0000861C:
l00008620_thunk_MPU_xTaskResumeAll:
	MPU_xTaskResumeAll(cpsr)
	return r0_17
vParTestSetLED_exit:


void vParTestToggleLED(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      prvFlashCoRoutine
// MayUse:  cpsr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 sp
vParTestToggleLED_entry:
l00008630:
	MPU_vTaskSuspendAll(cpsr)
	branch r0 >u 7<32> l0000865A
l0000863C:
	word32 r0_22 = 1<32> << r0
	word32 r3_21 = Mem7[0x0000866C<p32>:word32]
	word32 r2_24 = CONVERT(SLICE(r0_22, byte, 0), byte, uint32)
	branch (r2_24 & CONVERT(Mem7[r3_21:byte], byte, word32)) != 0<32> l00008662
l00008662:
	Mem29[r3_21:byte] = Mem7[r3_21:byte] & SLICE(~r0_22, byte, 0)
l0000864C:
	Mem33[r3_21:byte] = SLICE(r2_24, byte, 0) | Mem7[r3_21:byte]
l00008652:
	PDCWrite(5<32>, CONVERT(Mem35[r3_21:byte], byte, word32))
l0000865A:
l0000865E_thunk_MPU_xTaskResumeAll:
	MPU_xTaskResumeAll(cpsr)
	return
vParTestToggleLED_exit:


void prvFlashCoRoutine(word32 r0, word32 r7, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r7:[0..31]
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3 r7
// Preserved: cpsr r4 r5 r6 sp
prvFlashCoRoutine_entry:
	ptr32 fp
	word32 dwLoc14
l00008670:
	word32 r5_107
	word32 r6_105
	word32 r0_26
	word32 r3_13 = CONVERT(Mem11[r0 + 52<i32>:word16], word16, word32)
	branch r3_13 == 0x1C2<32> l000086B6
l000086B6:
	r5_107 = Mem11[0x000086E0<p32>:word32]
	branch xQueueCRReceive(Mem11[r5_107:word32], fp - 20<i32>, 0<32>, fp - 20<i32>, r7, lr, cpsr, out r0_26, out r6_105, out r7, out lr) l000086AA
l0000867E:
	branch r3_13 == 0x1C3<32> l0000868C
l0000868C:
	r5_107 = Mem11[0x000086E0<p32>:word32]
	r6_105 = fp - 20<i32>
l00008686:
	branch r3_13 == 0<32> l000086D2
l000086D2:
	r5_107 = Mem11[0x000086E0<p32>:word32]
	r6_105 = fp - 20<i32>
l00008696:
	bool Z_59 = xQueueCRReceive(Mem47[r5_107:word32], r6_105, 0xFFFFFFFF<32>, r6_105, r7, lr, cpsr, out r0_26, out r6_105, out r7, out lr)
	branch Z_59 l000086D8
l000086D8:
	Mem65[r0 + 52<i32>:word16] = 0x1C2<u16>
l000086A6:
	branch Z_59 l000086C8
l000086C8:
	Mem69[r0 + 52<i32>:word16] = 0x1C3<u16>
	return
l000086AA:
	branch r0_26 == 1<32> l00008690
l00008690:
	vParTestToggleLED(dwLoc14, cpsr)
l000086AE:
	Mem97[Mem83[0x000086E4<p32>:word32]:word32] = 0<32>
l00008688:
	return
prvFlashCoRoutine_exit:


void prvFixedDelayCoRoutine(word32 r0, word32 r1, word32 r7, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r1:[0..31] r7:[0..31]
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3 r7
// Preserved: r4 sp
prvFixedDelayCoRoutine_entry:
	ptr32 fp
l000086E8:
	bool v18_111
	word32 r0_81
	word32 r0_22
	word32 r3_9 = CONVERT(Mem7[r0 + 52<i32>:word16], word16, word32)
	branch r3_9 == 0x182<32> l00008750
l00008750:
	v18_111 = xQueueCRSend(Mem14[Mem14[0x0000877C<p32>:word32]:word32], fp - 12<i32>, 0<32>, r7, lr, cpsr, out r0_22)
l000086F8:
	branch r3_9 <=u 0x182<32> l00008748
l00008748:
	branch r3_9 == 0<32> l0000871C
l0000874C:
	return
l000086FA:
	branch r3_9 != 0x183<32> l00008716
l00008716:
	branch r3_9 != 0x196<32> l00008712
l0000871C:
	v18_111 = xQueueCRSend(Mem14[Mem14[0x0000877C<p32>:word32]:word32], fp - 12<i32>, 0<32>, r7, lr, cpsr, out r0_22)
	branch v18_111 l0000876E
l0000876E:
	Mem65[r0 + 52<i32>:word16] = 0x182<u16>
l0000872C:
	branch v18_111 l00008766
l00008766:
	Mem71[r0 + 52<i32>:word16] = 0x183<u16>
l00008730:
	branch r0_22 == 1<32> l00008702
l00008734:
	Mem77[Mem14[0x00008780<p32>:word32]:word32] = 0<32>
	r0_81 = Mem77[Mem77[0x00008778<p32>:word32] + (r1 << 2<i32>):word32]
	branch r0_81 == 0<32> l0000870C
l00008746:
l00008702:
	r0_81 = Mem14[Mem14[0x00008778<p32>:word32] + (r1 << 2<i32>):word32]
	branch r0_81 != 0<32> l0000875E
l0000875E:
	vCoRoutineAddToDelayedList(r0_81, 0<32>)
l0000870C:
	Mem103[r0 + 52<i32>:word16] = 0x196<u16>
l00008712:
	return
prvFixedDelayCoRoutine_exit:


void vStartFlashCoRoutines(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 r5 r6 sp
vStartFlashCoRoutines_entry:
l00008784:
	branch r0 <u 8<32> l0000878A
l00008788_1:
	r0 = 8<32>
l0000878A:
	MPU_xQueueGenericCreate(1<32>, 4<32>, cpsr)
	Mem35[Mem20[0x000087C4<p32>:word32]:word32] = 1<32>
	branch false l000087C2
l000087C2:
	return
l0000879E:
	branch r0 == 0<32> l000087B4
l000087A0:
	word32 r4_40 = 0<32>
	word32 r6_41 = Mem35[0x000087C8<p32>:word32]
l000087A4:
	xCoRoutineCreate(r6_41, 0<32>, r4_40, cpsr)
	r4_40 = r4_40 + 1<32>
	branch r4_40 != r0 l000087A4
l000087B4:
	word32 r0_71 = Mem35[0x000087CC<p32>:word32]
l000087BE_thunk_xCoRoutineCreate:
	xCoRoutineCreate(r0_71, 1<32>, 0<32>, cpsr)
	return
vStartFlashCoRoutines_exit:


void xAreFlashCoRoutinesStillRunning()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
xAreFlashCoRoutinesStillRunning_entry:
l000087D0:
	return
xAreFlashCoRoutinesStillRunning_exit:


void MPU_xTaskCreateRestricted(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV lr r1 r2 r3
// Preserved: r4 r5 r6 sp
MPU_xTaskCreateRestricted_entry:
l000087DC:
	word32 r0_17 = xPortRaisePrivilege(cpsr)
	xTaskCreateRestricted(r0, r1, cpsr)
	branch r0_17 == 1<32> l00008802
l000087F6:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008802:
	return
MPU_xTaskCreateRestricted_exit:


void MPU_xTaskCreate(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr, word32 dwArg00, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      ResetISR
// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31] Stack +0000:[0..31] Stack +0004:[0..31]
// LiveOut:
// Trashed: NZCV r1 r2 r3
// Preserved: r10 r4 r5 r6 r7 r8 r9 sp
MPU_xTaskCreate_entry:
l00008808:
	word32 r0_32 = xPortRaisePrivilege(cpsr)
	xTaskCreate(r0, r1, r2, r3, cpsr, dwArg00, dwArg04)
	branch r0_32 == 1<32> l00008842
l00008836:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008842:
	return
MPU_xTaskCreate_exit:


void MPU_vTaskAllocateMPURegions(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 sp
MPU_vTaskAllocateMPURegions_entry:
l0000884C:
	word32 r0_17 = xPortRaisePrivilege(cpsr)
	vTaskAllocateMPURegions(r0, r1)
	branch r0_17 == 1<32> l00008870
l00008864:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008870:
	return
MPU_vTaskAllocateMPURegions_exit:


void MPU_vTaskDelayUntil(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      vCheckTask
// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 sp
MPU_vTaskDelayUntil_entry:
l00008874:
	word32 r0_17 = xPortRaisePrivilege(cpsr)
	vTaskDelayUntil(r0, r1, cpsr)
	branch r0_17 == 1<32> l00008898
l0000888C:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008898:
	return
MPU_vTaskDelayUntil_exit:


void MPU_vTaskDelay(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r3 r4 r5 sp
MPU_vTaskDelay_entry:
l0000889C:
	word32 r0_15 = xPortRaisePrivilege(cpsr)
	vTaskDelay(r0, cpsr)
	branch r0_15 == 1<32> l000088BC
l000088B0:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l000088BC:
	return
MPU_vTaskDelay_exit:


word32 MPU_vTaskSuspendAll(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      vParTestSetLED
//      vParTestToggleLED
// MayUse:  cpsr:[0..31]
// LiveOut: r0
// Trashed: NZCV r0 r2 r3
// Preserved: r4 sp
MPU_vTaskSuspendAll_entry:
l000088C0:
	word32 r0_23 = xPortRaisePrivilege(cpsr)
	vTaskSuspendAll()
	branch r0_23 == 1<32> l000088DC
l000088D0:
	word32 r0_22 = __mrs(cpsr)
	__msr(cpsr, r0_22 | 1<32>)
	r0_23 = r0_22 | 1<32>
l000088DC:
	return r0_23
MPU_vTaskSuspendAll_exit:


void MPU_xTaskResumeAll(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      vParTestSetLED
//      vParTestToggleLED
// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: NZCV r1 r2 r3
// Preserved: r4 sp
MPU_xTaskResumeAll_entry:
l000088E0:
	word32 r0_9 = xPortRaisePrivilege(cpsr)
	xTaskResumeAll(cpsr)
	branch r0_9 == 1<32> l000088FE
l000088F2:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l000088FE:
	return
MPU_xTaskResumeAll_exit:


void MPU_xTaskGetTickCount(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      vCheckTask
//      vCoRoutineSchedule
// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: NZCV r3
// Preserved: r4 sp
MPU_xTaskGetTickCount_entry:
l00008904:
	word32 r0_9 = xPortRaisePrivilege(cpsr)
	xTaskGetTickCount()
	branch r0_9 == 1<32> l00008922
l00008916:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008922:
	return
MPU_xTaskGetTickCount_exit:


void MPU_uxTaskGetNumberOfTasks(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: NZCV r3
// Preserved: r4 sp
MPU_uxTaskGetNumberOfTasks_entry:
l00008928:
	word32 r0_9 = xPortRaisePrivilege(cpsr)
	uxTaskGetNumberOfTasks()
	branch r0_9 == 1<32> l00008946
l0000893A:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008946:
	return
MPU_uxTaskGetNumberOfTasks_exit:


void MPU_pcTaskGetName(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV
// Preserved: r3 r4 r5 sp
MPU_pcTaskGetName_entry:
l0000894C:
	word32 r0_15 = xPortRaisePrivilege(cpsr)
	pcTaskGetName(r0)
	branch r0_15 == 1<32> l0000896E
l00008962:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l0000896E:
	return
MPU_pcTaskGetName_exit:


void MPU_vTaskSetTimeOutState(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2
// Preserved: r3 r4 r5 sp
MPU_vTaskSetTimeOutState_entry:
l00008974:
	word32 r0_15 = xPortRaisePrivilege(cpsr)
	vTaskSetTimeOutState(r0)
	branch r0_15 == 1<32> l00008994
l00008988:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008994:
	return
MPU_vTaskSetTimeOutState_exit:


void MPU_xTaskCheckForTimeOut(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r1 r2 r3
// Preserved: r4 r5 r6 sp
MPU_xTaskCheckForTimeOut_entry:
l00008998:
	word32 r0_17 = xPortRaisePrivilege(cpsr)
	xTaskCheckForTimeOut(r0, r1, cpsr)
	branch r0_17 == 1<32> l000089BE
l000089B2:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l000089BE:
	return
MPU_xTaskCheckForTimeOut_exit:


void MPU_xTaskGenericNotify(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31]
// LiveOut:
// Trashed: NZCV lr r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
MPU_xTaskGenericNotify_entry:
l000089C4:
	word32 r0_25 = xPortRaisePrivilege(cpsr)
	xTaskGenericNotify(r0, r1, r2, r3, cpsr)
	branch r0_25 == 1<32> l000089F4
l000089E8:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l000089F4:
	return
MPU_xTaskGenericNotify_exit:


void MPU_xTaskNotifyWait(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31]
// LiveOut:
// Trashed: NZCV r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
MPU_xTaskNotifyWait_entry:
l000089FC:
	word32 r0_25 = xPortRaisePrivilege(cpsr)
	xTaskNotifyWait(r0, r1, r2, r3, cpsr)
	branch r0_25 == 1<32> l00008A2C
l00008A20:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008A2C:
	return
MPU_xTaskNotifyWait_exit:


void MPU_ulTaskNotifyTake(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r2 r3
// Preserved: r1 r4 r5 r6 sp
MPU_ulTaskNotifyTake_entry:
l00008A34:
	word32 r0_17 = xPortRaisePrivilege(cpsr)
	ulTaskNotifyTake(r0, r1, cpsr)
	branch r0_17 == 1<32> l00008A5A
l00008A4E:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008A5A:
	return
MPU_ulTaskNotifyTake_exit:


void MPU_xTaskNotifyStateClear(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV r2
// Preserved: r3 r4 r5 sp
MPU_xTaskNotifyStateClear_entry:
l00008A60:
	word32 r0_15 = xPortRaisePrivilege(cpsr)
	xTaskNotifyStateClear(r0, cpsr)
	branch r0_15 == 1<32> l00008A82
l00008A76:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008A82:
	return
MPU_xTaskNotifyStateClear_exit:


void MPU_xQueueGenericCreate(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      ResetISR
//      vStartFlashCoRoutines
// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r1 r2
// Preserved: r0 r3 r4 r5 r6 r7 sp
MPU_xQueueGenericCreate_entry:
l00008A88:
	word32 r0_23 = xPortRaisePrivilege(cpsr)
	xQueueGenericCreate(r0, r1, cpsr)
	branch r0_23 == 1<32> l00008AB2
l00008AA6:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008AB2:
	return
MPU_xQueueGenericCreate_exit:


void MPU_xQueueGenericReset(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r1 r2 r3
// Preserved: r4 r5 r6 sp
MPU_xQueueGenericReset_entry:
l00008AB8:
	word32 r0_17 = xPortRaisePrivilege(cpsr)
	xQueueGenericReset(r0, r1, cpsr)
	branch r0_17 == 1<32> l00008ADE
l00008AD2:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008ADE:
	return
MPU_xQueueGenericReset_exit:


word32 MPU_xQueueGenericSend(word32 r0, word32 r1, word32 r2, word32 r3, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      vCheckTask
// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31]
// LiveOut: lr
// Trashed: NZCV lr r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
MPU_xQueueGenericSend_entry:
l00008AE4:
	word32 r0_25 = xPortRaisePrivilege(cpsr)
	word32 lr_34 = xQueueGenericSend(r0, r1, r2, r3, lr, cpsr)
	branch r0_25 == 1<32> l00008B14
l00008B08:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008B14:
	return lr_34
MPU_xQueueGenericSend_exit:


void MPU_uxQueueMessagesWaiting(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: NZCV r2
// Preserved: r3 r4 r5 sp
MPU_uxQueueMessagesWaiting_entry:
l00008B1C:
	word32 r0_15 = xPortRaisePrivilege(cpsr)
	uxQueueMessagesWaiting(cpsr)
	branch r0_15 == 1<32> l00008B3E
l00008B32:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008B3E:
	return
MPU_uxQueueMessagesWaiting_exit:


void MPU_uxQueueSpacesAvailable(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: NZCV r2
// Preserved: r3 r4 r5 sp
MPU_uxQueueSpacesAvailable_entry:
l00008B44:
	word32 r0_15 = xPortRaisePrivilege(cpsr)
	uxQueueSpacesAvailable(cpsr)
	branch r0_15 == 1<32> l00008B66
l00008B5A:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008B66:
	return
MPU_uxQueueSpacesAvailable_exit:


word32 MPU_xQueueGenericReceive(word32 r0, word32 r1, word32 r2, word32 r3, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      vPrintTask
// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31]
// LiveOut: lr
// Trashed: NZCV lr r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
MPU_xQueueGenericReceive_entry:
l00008B6C:
	word32 r0_25 = xPortRaisePrivilege(cpsr)
	word32 lr_34
	xQueueGenericReceive(r0, r1, r2, r3, lr, cpsr, out lr_34)
	branch r0_25 == 1<32> l00008B9C
l00008B90:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008B9C:
	return lr_34
MPU_xQueueGenericReceive_exit:


void MPU_xQueuePeekFromISR(word32 r0, word32 r1, word32 r7, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r1:[0..31] r7:[0..31]
// LiveOut:
// Trashed: NZCV lr r1 r2 r3 r7
// Preserved: r4 r5 r6 sp
MPU_xQueuePeekFromISR_entry:
l00008BA4:
	word32 r0_17 = xPortRaisePrivilege(cpsr)
	xQueuePeekFromISR(r0, r1, r7, lr, cpsr)
	branch r0_17 == 1<32> l00008BCA
l00008BBE:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008BCA:
	return
MPU_xQueuePeekFromISR_exit:


void MPU_xQueueGetMutexHolder(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV r2
// Preserved: r3 r4 r5 sp
MPU_xQueueGetMutexHolder_entry:
l00008BD0:
	word32 r0_15 = xPortRaisePrivilege(cpsr)
	xQueueGetMutexHolder(r0, cpsr)
	branch r0_15 == 1<32> l00008BF2
l00008BE6:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008BF2:
	return
MPU_xQueueGetMutexHolder_exit:


void MPU_xQueueCreateMutex(word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31]
// LiveOut:
// Trashed: NZCV lr r1 r2
// Preserved: r3 r4 r5 sp
MPU_xQueueCreateMutex_entry:
l00008BF8:
	word32 r0_15 = xPortRaisePrivilege(cpsr)
	xQueueCreateMutex(lr, cpsr)
	branch r0_15 == 1<32> l00008C1A
l00008C0E:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008C1A:
	return
MPU_xQueueCreateMutex_exit:


void MPU_xQueueTakeMutexRecursive(word32 r0, word32 r1, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV lr r1 r2 r3
// Preserved: r4 r5 r6 sp
MPU_xQueueTakeMutexRecursive_entry:
l00008C20:
	word32 r0_17 = xPortRaisePrivilege(cpsr)
	xQueueTakeMutexRecursive(r0, r1, lr, cpsr)
	branch r0_17 == 1<32> l00008C46
l00008C3A:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008C46:
	return
MPU_xQueueTakeMutexRecursive_exit:


void MPU_xQueueGiveMutexRecursive(word32 r0, word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV lr r1 r2
// Preserved: r3 r4 r5 sp
MPU_xQueueGiveMutexRecursive_entry:
l00008C4C:
	word32 r0_15 = xPortRaisePrivilege(cpsr)
	xQueueGiveMutexRecursive(r0, lr, cpsr)
	branch r0_15 == 1<32> l00008C6E
l00008C62:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008C6E:
	return
MPU_xQueueGiveMutexRecursive_exit:


void MPU_vQueueDelete(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: NZCV r0
// Preserved: r3 r4 r5 sp
MPU_vQueueDelete_entry:
l00008C74:
	word32 r0_15 = xPortRaisePrivilege(cpsr)
	vQueueDelete()
	branch r0_15 == 1<32> l00008C94
l00008C88:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008C94:
	return
MPU_vQueueDelete_exit:


void MPU_pvPortMalloc(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV r1 r2
// Preserved: r3 r4 r5 sp
MPU_pvPortMalloc_entry:
l00008C98:
	word32 r0_15 = xPortRaisePrivilege(cpsr)
	pvPortMalloc(r0, cpsr)
	branch r0_15 == 1<32> l00008CBA
l00008CAE:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008CBA:
	return
MPU_pvPortMalloc_exit:


void MPU_vPortFree(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: NZCV r0
// Preserved: r3 r4 r5 sp
MPU_vPortFree_entry:
l00008CC0:
	word32 r0_15 = xPortRaisePrivilege(cpsr)
	vPortFree()
	branch r0_15 == 1<32> l00008CE0
l00008CD4:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008CE0:
	return
MPU_vPortFree_exit:


void MPU_vPortInitialiseBlocks(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: r4 sp
MPU_vPortInitialiseBlocks_entry:
l00008CE4:
	word32 r0_9 = xPortRaisePrivilege(cpsr)
	vPortInitialiseBlocks()
	branch r0_9 == 1<32> l00008D00
l00008CF4:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008D00:
	return
MPU_vPortInitialiseBlocks_exit:


void MPU_xPortGetFreeHeapSize(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: NZCV r3
// Preserved: r4 sp
MPU_xPortGetFreeHeapSize_entry:
l00008D04:
	word32 r0_9 = xPortRaisePrivilege(cpsr)
	xPortGetFreeHeapSize()
	branch r0_9 == 1<32> l00008D22
l00008D16:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008D22:
	return
MPU_xPortGetFreeHeapSize_exit:


void MPU_xEventGroupCreate(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31]
// LiveOut:
// Trashed: NZCV r1 r2 r3
// Preserved: r4 sp
MPU_xEventGroupCreate_entry:
l00008D28:
	word32 r0_9 = xPortRaisePrivilege(cpsr)
	xEventGroupCreate(cpsr)
	branch r0_9 == 1<32> l00008D46
l00008D3A:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008D46:
	return
MPU_xEventGroupCreate_exit:


void MPU_xEventGroupWaitBits(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31] Stack +0000:[0..31]
// LiveOut:
// Trashed: NZCV r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 r9 sp
MPU_xEventGroupWaitBits_entry:
l00008D4C:
	word32 r0_29 = xPortRaisePrivilege(cpsr)
	xEventGroupWaitBits(r0, r1, r2, r3, cpsr, dwArg00)
	branch r0_29 == 1<32> l00008D82
l00008D76:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008D82:
	return
MPU_xEventGroupWaitBits_exit:


void MPU_xEventGroupClearBits(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r2 r3
// Preserved: r1 r4 r5 r6 sp
MPU_xEventGroupClearBits_entry:
l00008D8C:
	word32 r0_17 = xPortRaisePrivilege(cpsr)
	xEventGroupClearBits(r0, r1, cpsr)
	branch r0_17 == 1<32> l00008DB2
l00008DA6:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008DB2:
	return
MPU_xEventGroupClearBits_exit:


void MPU_xEventGroupSetBits(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV lr r1 r2 r3
// Preserved: r4 r5 r6 sp
MPU_xEventGroupSetBits_entry:
l00008DB8:
	word32 r0_17 = xPortRaisePrivilege(cpsr)
	xEventGroupSetBits(r0, r1, cpsr)
	branch r0_17 == 1<32> l00008DDE
l00008DD2:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008DDE:
	return
MPU_xEventGroupSetBits_exit:


void MPU_xEventGroupSync(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31]
// LiveOut:
// Trashed: NZCV lr r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
MPU_xEventGroupSync_entry:
l00008DE4:
	word32 r0_25 = xPortRaisePrivilege(cpsr)
	xEventGroupSync(r0, r1, r2, r3, cpsr)
	branch r0_25 == 1<32> l00008E14
l00008E08:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008E14:
	return
MPU_xEventGroupSync_exit:


void MPU_vEventGroupDelete(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr:[0..31] r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r3 r4 r5 sp
MPU_vEventGroupDelete_entry:
l00008E1C:
	word32 r0_15 = xPortRaisePrivilege(cpsr)
	vEventGroupDelete(r0, cpsr)
	branch r0_15 == 1<32> l00008E3C
l00008E30:
	__msr(cpsr, __mrs(cpsr) | 1<32>)
l00008E3C:
	return
MPU_vEventGroupDelete_exit:


void xCoRoutineCreate(word32 r0, word32 r1, word32 r2, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      vStartFlashCoRoutines
// MayUse:  cpsr:[0..31] r0:[0..31] r1:[0..31] r2:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: fp r10 r3 r4 r5 r6 r7 r8 r9 sp
xCoRoutineCreate_entry:
l00008E40:
	word32 r5_28 = r1
	word32 r0_32 = pvPortMalloc(0x38<32>, cpsr)
	branch r0_32 == 0<32> l00008EE4
l00008EE4:
	return
l00008E54:
	word32 r7_53 = Mem23[0x00008EEC<p32>:word32]
	branch Mem23[r7_53:word32] == 0<32> l00008EAC
l00008EAC:
	Mem57[r7_53:word32] = r0_32
	vListInitialise(r7_53 + 4<i32>)
	vListInitialise(r7_53 + 0x18<32>)
	vListInitialise(r7_53 + 0x2C<32>)
	vListInitialise(r7_53 + 0x40<32>)
	vListInitialise(r7_53 + 0x54<32>)
	Mem81[r7_53 + 104<i32>:word32] = r7_53 + 0x2C<32>
	Mem82[r7_53 + 108<i32>:word32] = r7_53 + 0x40<32>
l00008E5C:
l00008E60:
	branch r1 <u 1<32> l00008E66
l00008E64_1:
	r5_28 = 1<32>
l00008E66:
	Mem92[r0_32 + 52<i32>:word16] = 0<u16>
	Mem94[r0_32 + 44<i32>:word32] = r5_28
	Mem97[r0_32 + 48<i32>:word32] = r2
	Mem100[r0_32:word32] = r0
	vListInitialiseItem(r0_32 + 4<i32>)
	vListInitialiseItem(r0_32 + 0x18<32>)
	word32 r0_106 = Mem100[r0_32 + 44<i32>:word32]
	word32 r5_110 = 2<32> - r5_28
	branch r0_106 <=u Mem100[r7_53 + 112<i32>:word32] l00008E92
l00008E90_1:
	Mem113[r7_53 + 112<i32>:word32] = r0_106
l00008E92:
	Mem122[r0_32 + 24<i32>:word32] = r5_110
	Mem123[r0_32 + 16<i32>:word32] = r0_32
	Mem124[r0_32 + 36<i32>:word32] = r0_32
	vListInsertEnd(r7_53 + 4<32> + r0_106 * 0x14<32>, r0_32 + 4<i32>)
	return
xCoRoutineCreate_exit:


bool vCoRoutineAddToDelayedList(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      xQueueCRSend
//      xQueueCRReceive
//      prvFixedDelayCoRoutine
// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut: Z
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 r5 r6 sp
vCoRoutineAddToDelayedList_entry:
l00008EF0:
	word32 r4_14 = Mem11[0x00008F28<p32>:word32]
	word32 r5_18 = Mem11[r4_14 + 116<i32>:word32] + r0
	uxListRemove(Mem11[r4_14:word32] + 4<32>)
	word32 r3_29 = Mem11[r4_14 + 116<i32>:word32]
	word32 r1_30 = Mem11[r4_14:word32]
	Mem32[r1_30 + 4<i32>:word32] = r5_18
	branch r5_18 >=u r3_29 l00008F0E
l00008F0C_1:
l00008F0E:
	bool Z_44 = vListInsert(Mem32[r4_14 + 104<i32>:word32], r1_30 + 4<32>)
	branch r1 == 0<32> l00008F26
l00008F26:
	return Z_44
l00008F18:
	word32 r1_53 = Mem32[r4_14:word32]
l00008F22_thunk_vListInsert:
	return vListInsert(r1, r1_53 + 0x18<32>)
vCoRoutineAddToDelayedList_exit:


word32 vCoRoutineSchedule(word32 r0, word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 lr, word32 cpsr, ptr32 & cpsrOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      vApplicationIdleHook
// MayUse:  cpsr:[0..31] lr:[0..31] r0:[0..31] r4:[0..31] r5:[0..31] r6:[0..31] r7:[0..31] r8:[0..31]
// LiveOut: cpsr lr
// Trashed: NZCV cpsr lr pc r0 r1 r2 r3 r4 r5 r6 r7 r8
// Preserved: sp
vCoRoutineSchedule_entry:
l00008F2C:
	word32 r5_16 = Mem15[0x00009088<p32>:word32]
	branch Mem15[r5_16 + 84<i32>:word32] == 0<32> l00008F82
l00008F36:
l00008F3C:
	__msr(cpsr, 0xBF<32>)
	__isb_sy()
	__dsb_sy()
	word32 r4_25 = Mem23[Mem23[r5_16 + 96<i32>:word32] + 12<i32>:word32]
	uxListRemove(r4_25 + 0x18<32>)
	__msr(cpsr, 0<32>)
	uxListRemove(r4_25 + 4<32>)
	word32 r3_46 = Mem23[r4_25 + 44<i32>:word32]
	r0 = r5_16 + 4<32> + r3_46 * 0x14<32>
	branch r3_46 <=u Mem23[r5_16 + 112<i32>:word32] l00008F78
l00008F76_1:
	Mem54[r5_16 + 112<i32>:word32] = r3_46
l00008F78:
	vListInsertEnd(r0, r4_25 + 4<32>)
	branch Mem64[r5_16 + 84<i32>:word32] != 0<32> l00008F3C
l00008F82:
	MPU_xTaskGetTickCount(cpsr)
	word32 r3_171 = Mem78[r5_16 + 116<i32>:word32]
	word32 r0_179 = r0 - Mem78[r5_16 + 120<i32>:word32]
	word32 r8_84 = Mem78[0x00009090<p32>:word32]
	Mem85[r5_16 + 124<i32>:word32] = r0_179
l00008F94:
	branch r0_179 == 0<32> l00009014
l00008F98:
	word32 r2_102
	r3_171 = r3_171 + 1<32>
	Mem94[r5_16 + 116<i32>:word32] = r3_171
	r0_179 = r0_179 - 1<32>
	Mem95[r5_16 + 124<i32>:word32] = r0_179
	branch r3_171 == 0<32> l0000904C
l0000904C:
	r2_102 = Mem95[r5_16 + 108<i32>:word32]
	Mem100[r5_16 + 108<i32>:word32] = Mem95[r5_16 + 104<i32>:word32]
	Mem101[r5_16 + 104<i32>:word32] = r2_102
l00008FA4:
	r2_102 = Mem95[r5_16 + 104<i32>:word32]
l00008FA6:
	branch Mem104[r2_102:word32] == 0<32> l00008F94
l00008FAC:
	word32 r4_109 = Mem104[Mem104[r2_102 + 12<i32>:word32] + 12<i32>:word32]
	branch r3_171 >=u Mem104[r4_109 + 4<i32>:word32] l00008FC4
l00008FC4:
	__msr(cpsr, 0xBF<32>)
	__isb_sy()
	__dsb_sy()
	word32 r6_117 = r4_109 + 4<32>
	uxListRemove(r6_117)
	word32 r0_129 = r4_109 + 0x18<32>
	branch Mem127[r4_109 + 40<i32>:word32] == 0<32> l00008FE8
l00008FE4:
	uxListRemove(r0_129)
l00008FE8:
	__msr(cpsr, 0<32>)
	word32 r3_143 = Mem127[r4_109 + 44<i32>:word32]
	word32 r0_153 = r8_84 + r3_143 * 0x14<32>
	branch r3_143 <=u Mem127[r5_16 + 112<i32>:word32] l00009000
l00008FFE_1:
	Mem155[r5_16 + 112<i32>:word32] = r3_143
l00009000:
	vListInsertEnd(r0_153, r6_117)
	word32 r3_166 = Mem165[r5_16 + 104<i32>:word32]
	branch Mem165[r3_166:word32] != 0<32> l00008FB8
l00008FB8:
	r4_109 = Mem165[Mem165[r3_166 + 12<i32>:word32] + 12<i32>:word32]
	r3_171 = Mem165[r5_16 + 116<i32>:word32]
	branch Mem165[r4_109 + 4<i32>:word32] >u r3_171 l0000900E
l0000900C:
	r3_171 = Mem165[r5_16 + 116<i32>:word32]
l0000900E:
	r0_179 = Mem165[r5_16 + 124<i32>:word32]
	branch r0_179 != 0<32> l00008F98
l00009014:
	word32 r2_197
	word32 r1_186 = Mem184[r5_16 + 112<i32>:word32]
	Mem190[r5_16 + 120<i32>:word32] = r3_171
	word32 r3_191 = r1_186 << 2<i32>
	branch Mem190[r5_16 + r1_186 * 0x14<32> + 4<i32>:word32] != 0<32> l00009084
l00009084:
	r2_197 = r1_186
l00009026:
	branch r1_186 == 0<32> l00009080
l00009080:
	cpsrOut = cpsr
	return lr
l00009028:
	r3_191 = r1_186 - 1<32> << 2<i32>
	r2_197 = r1_186 - 1<32>
	branch Mem190[r5_16 + (r3_191 + (r1_186 - 1<32>) << 2<u32>) + 4<i32>:word32] != 0<32> l00009056
l00009036:
	branch r1_186 == 1<32> l00009046
l00009038:
	r3_191 = r1_186 - 2<32> << 2<i32>
	r2_197 = r1_186 - 2<32>
	branch Mem190[r5_16 + (r3_191 + (r1_186 - 2<32>) << 2<u32>) + 4<i32>:word32] != 0<32> l00009056
l00009056:
	Mem226[r5_16 + 112<i32>:word32] = r2_197
l00009058:
	word32 r2_242
	word32 r3_230 = r3_191 + r2_197
	word32 r1_233 = r5_16 + (r3_230 << 2<i32>)
	word32 r2_237 = Mem234[Mem234[r1_233 + 8<i32>:word32] + 4<i32>:word32]
	word32 r3_238 = (r3_230 << 2<i32>) + Mem234[0x0000908C<p32>:word32]
	Mem240[r1_233 + 8<i32>:word32] = r2_237
	r2_242 = r2_237
	branch r2_237 != r3_238 l0000906E
l0000906C_1:
	r2_242 = Mem240[r2_237 + 4<i32>:word32]
l0000906E:
	word32 r0_245 = Mem240[r2_242 + 12<i32>:word32]
	branch r2_237 != r3_238 l00009074
l00009072_1:
	Mem248[r1_233 + 8<i32>:word32] = r2_242
l00009074:
	Mem252[r5_16:word32] = r0_245
	word32 lr_280
	word32 pc_281
	word32 cpsr_283
	call Mem252[r0_245:word32] (retsize: 0;)
		uses: cpsr:cpsr,lr:lr,pc:pc_281,r0:r0_245,r1:Mem252[r0_245 + 48<i32>:word32],r4:r4,r5:r5,r6:r6,r7:r7,r8:r8
		defs: cpsr:cpsr_283,lr:lr_280,pc:pc_281
	cpsrOut = cpsr_283
	return lr_280
l00009046:
	Mem290[r5_16 + 112<i32>:word32] = r2_197
	cpsrOut = cpsr
	return lr
vCoRoutineSchedule_exit:
l00008FB6:


bool xCoRoutineRemoveFromEventList(word32 r0, ptr32 & r0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      xQueueCRSend
//      xQueueCRReceive
//      xQueueCRSendFromISR
//      xQueueCRReceiveFromISR
// MayUse:  r0:[0..31]
// LiveOut: Z r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 sp
xCoRoutineRemoveFromEventList_entry:
l00009094:
	word32 r4_15 = Mem14[Mem0[r0 + 12<i32>:word32] + 12<i32>:word32]
	word32 r5_16 = Mem14[0x000090C0<p32>:word32]
	uxListRemove(r4_15 + 0x18<32>)
	vListInsertEnd(r5_16 + 0x54<32>, r4_15 + 0x18<32>)
	word32 r0_36 = Mem14[r4_15 + 44<i32>:word32]
	word32 r3_37 = Mem14[Mem14[r5_16:word32] + 44<i32>:word32]
	bool Z_64 = SLICE(cond(r0_36 - r3_37), bool, 2)
	branch r0_36 >=u r3_37 l000090BC
l000090BA_1:
l000090BC:
	r0Out = 1<32>
	return Z_64
xCoRoutineRemoveFromEventList_exit:


void GPIOGetIntNumber(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r3
// Preserved: sp
GPIOGetIntNumber_entry:
l000090C4:
	word32 r3_4 = Mem0[0x00009104<p32>:word32]
	branch r0 == r3_4 l000090FE
l000090FE:
	return
l000090CA:
	branch r0 >u r3_4 l000090DE
l000090DE:
	word32 r3_10 = Mem0[0x00009108<p32>:word32]
	branch r0 == r3_10 l000090F6
l000090F6:
	return
l000090E4:
	branch r0 != r3_10 + 0x1D000<32> l000090F0
l000090EC:
	return
l000090CC:
	branch r0 == 0x40004000<32> l000090FA
l000090FA:
	return
l000090D2:
	branch r0 != r3_4 - 0x1000<32> l000090F0
l000090F0:
	return
l000090DA:
	return
GPIOGetIntNumber_exit:


void GPIODirModeSet(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      PDCInit
// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31]
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: sp
GPIODirModeSet_entry:
l0000910C:
	word32 r3_10 = Mem0[r0 + 1024<i32>:word32]
	branch (r2 & 1<32>) == 0<32> l00009118
l00009116_1:
	r3_10 = r3_10 | r1
l00009118:
	Mem15[r0 + 1024<i32>:word32] = r3_10 & ~r1
	word32 r3_16 = Mem15[r0 + 1056<i32>:word32]
	branch r2 << 30<i32> >= 0<32> l00009128
l00009126_1:
	r1 = r1 | r3_16
l00009128:
	Mem26[r0 + 1056<i32>:word32] = r3_16 & ~r1
	return
GPIODirModeSet_exit:


void GPIODirModeGet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r0 r1 r2 r3
// Preserved: r4 sp
GPIODirModeGet_entry:
l00009134:
	word32 r1_11 = CONVERT(1<8> << SLICE(r1, byte, 0), byte, uint32)
	word32 r2_12 = Mem6[r0 + 1056<i32>:word32]
	branch (Mem6[r0 + 1024<i32>:word32] & r1_11) != 0<32> l0000914C
l0000914A_1:
l0000914C:
	branch (r2_12 & r1_11) == 0<32> l00009152
l00009150_1:
l00009152:
	return
GPIODirModeGet_exit:


void GPIOIntTypeSet(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31]
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: sp
GPIOIntTypeSet_entry:
l0000915C:
	word32 r3_10 = Mem0[r0 + 1032<i32>:word32]
	branch (r2 & 1<32>) == 0<32> l00009168
l00009166_1:
	r3_10 = r3_10 | r1
l00009168:
	Mem15[r0 + 1032<i32>:word32] = r3_10 & ~r1
	word32 r3_16 = Mem15[r0 + 1028<i32>:word32]
	branch (r2 & 2<32>) == 0<32> l0000917A
l00009178_1:
	r3_16 = r3_16 | r1
l0000917A:
	Mem25[r0 + 1028<i32>:word32] = r3_16 & ~r1
	word32 r3_26 = Mem25[r0 + 1036<i32>:word32]
	branch r2 << 29<i32> >= 0<32> l0000918A
l00009188_1:
	r1 = r1 | r3_26
l0000918A:
	Mem36[r0 + 1036<i32>:word32] = r3_26 & ~r1
	return
GPIOIntTypeSet_exit:


void GPIOIntTypeGet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r0 r1 r2 r3
// Preserved: sp
GPIOIntTypeGet_entry:
l00009194:
	word32 r1_9 = CONVERT(1<8> << SLICE(r1, byte, 0), byte, uint32)
	word32 r3_10 = Mem0[r0 + 1028<i32>:word32]
	word32 r0_12 = Mem0[r0 + 1036<i32>:word32]
	branch (Mem0[r0 + 1032<i32>:word32] & r1_9) == 0<32> l000091AE
l000091AC_1:
l000091AE:
	branch (r3_10 & r1_9) == 0<32> l000091B6
l000091B4_1:
l000091B6:
	branch (r0_12 & r1_9) == 0<32> l000091BE
l000091BC_1:
l000091BE:
	return
GPIOIntTypeGet_exit:


void GPIOPadConfigSet(word32 r0, word32 r1, word32 r2, word32 r3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      PDCInit
//      GPIOPinTypeComparator
//      GPIOPinTypeI2C
//      GPIOPinTypeQEI
//      GPIOPinTypePWM
// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31]
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: r4 sp
GPIOPadConfigSet_entry:
l000091C8:
	word32 r4_12 = Mem5[r0 + 1280<i32>:word32]
	branch (r2 & 1<32>) == 0<32> l000091D6
l000091D4_1:
	r4_12 = r4_12 | r1
l000091D6:
	Mem17[r0 + 1280<i32>:word32] = r4_12 & ~r1
	word32 r4_18 = Mem17[r0 + 1284<i32>:word32]
	branch (r2 & 2<32>) == 0<32> l000091E8
l000091E6_1:
	r4_18 = r4_18 | r1
l000091E8:
	Mem27[r0 + 1284<i32>:word32] = r4_18 & ~r1
	word32 r4_28 = Mem27[r0 + 1288<i32>:word32]
	branch (r2 & 4<32>) == 0<32> l000091FA
l000091F8_1:
	r4_28 = r4_28 | r1
l000091FA:
	Mem37[r0 + 1288<i32>:word32] = r4_28 & ~r1
	word32 r2_40 = Mem37[r0 + 1304<i32>:word32]
	branch (r2 & 8<32>) == 0<32> l0000920C
l0000920A_1:
	r2_40 = r2_40 | r1
l0000920C:
	Mem47[r0 + 1304<i32>:word32] = r2_40 & ~r1
	word32 r2_48 = Mem47[r0 + 1292<i32>:word32]
	branch r3 << 31<i32> >= 0<32> l0000921C
l0000921A_1:
	r2_48 = r2_48 | r1
l0000921C:
	Mem62[r0 + 1292<i32>:word32] = r2_48 & ~r1
	word32 r2_63 = Mem62[r0 + 1296<i32>:word32]
	branch r3 << 30<i32> >= 0<32> l0000922C
l0000922A_1:
	r2_63 = r2_63 | r1
l0000922C:
	Mem73[r0 + 1296<i32>:word32] = r2_63 & ~r1
	word32 r2_74 = Mem73[r0 + 1300<i32>:word32]
	branch r3 << 29<i32> >= 0<32> l0000923C
l0000923A_1:
	r2_74 = r2_74 | r1
l0000923C:
	Mem84[r0 + 1300<i32>:word32] = r2_74 & ~r1
	word32 r3_87 = Mem84[r0 + 1308<i32>:word32]
	branch (r3 & 8<32>) == 0<32> l00009250
l0000924E_1:
	r1 = r1 | r3_87
l00009250:
	Mem103[r0 + 1308<i32>:word32] = r3_87 & ~r1
	return
GPIOPadConfigSet_exit:


void GPIOPadConfigGet(word32 r0, word32 r1, word32 r2, word32 r3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31]
// LiveOut:
// Trashed: NZC r0 r1 r2
// Preserved: r4 r5 r6 r7 sp
GPIOPadConfigGet_entry:
l0000925C:
	word32 r1_17 = CONVERT(1<8> << SLICE(r1, byte, 0), byte, uint32)
	word32 r4_18 = Mem11[r0 + 1284<i32>:word32]
	word32 r5_20 = Mem11[r0 + 1288<i32>:word32]
	branch (Mem11[r0 + 1280<i32>:word32] & r1_17) == 0<32> l00009278
l00009276_1:
l00009278:
	word32 r4_29 = Mem11[r0 + 1304<i32>:word32]
	branch (r4_18 & r1_17) == 0<32> l00009284
l00009282_1:
l00009284:
	branch (r5_20 & r1_17) == 0<32> l0000928C
l0000928A_1:
l0000928C:
	branch (r4_29 & r1_17) == 0<32> l00009294
l00009292_1:
l00009294:
	Mem61[r2:word32] = 0<32>
	word32 r5_106 = 0<32>
	word32 r2_65 = Mem61[r0 + 1292<i32>:word32]
	word32 r4_66 = Mem61[r0 + 1296<i32>:word32]
	word32 r6_69 = Mem61[r0 + 1300<i32>:word32]
	branch (r1_17 & r2_65) == 0<32> l000092B0
l000092AE_1:
	r5_106 = 1<32>
l000092B0:
	word32 r2_74 = Mem61[r0 + 1308<i32>:word32]
	branch (r1_17 & r2_65) != 0<32> l000092B8
l000092B6_1:
	r5_106 = 0<32>
l000092B8:
	branch (r1_17 & r4_66) == 0<32> l000092BE
l000092BC_1:
l000092BE:
	branch (r1_17 & r6_69) == 0<32> l000092C6
l000092C4_1:
l000092C6:
	branch (r1_17 & r2_74) == 0<32> l000092CE
l000092CC_1:
l000092CE:
	Mem123[r3:word32] = r5_106
	return
GPIOPadConfigGet_exit:


void GPIOPinIntEnable(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r1 r3
// Preserved: sp
GPIOPinIntEnable_entry:
l000092E0:
	Mem9[r0 + 1040<i32>:word32] = r1 | Mem0[r0 + 1040<i32>:word32]
	return
GPIOPinIntEnable_exit:


void GPIOPinIntDisable(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: r1 r3
// Preserved: sp
GPIOPinIntDisable_entry:
l000092EC:
	Mem8[r0 + 1040<i32>:word32] = Mem0[r0 + 1040<i32>:word32] & ~r1
	return
GPIOPinIntDisable_exit:


void GPIOPinIntStatus(word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r1:[0..31]
// LiveOut:
// Trashed: r0
// Preserved: sp
GPIOPinIntStatus_entry:
l000092FC:
	branch r1 != 0<32> l00009304
l00009304:
	return
l000092FE:
	return
GPIOPinIntStatus_exit:


void GPIOPinIntClear(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
GPIOPinIntClear_entry:
l0000930C:
	Mem5[r0 + 1052<i32>:word32] = r1
	return
GPIOPinIntClear_exit:


void GPIOPortIntRegister(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr r4 sp
GPIOPortIntRegister_entry:
l00009314:
	word32 r3_4 = Mem0[0x000093A8<p32>:word32]
	branch r0 == r3_4 l00009396
l00009396:
	IntRegister(0x12<32>, r1)
l000093A4_thunk_IntEnable:
	IntEnable(0x12<32>)
	return
l0000931C:
	branch r0 >u r3_4 l0000933E
l0000933E:
	word32 r3_34 = Mem9[0x000093AC<p32>:word32]
	branch r0 == r3_34 l00009372
l00009372:
	IntRegister(0x13<32>, r1)
l00009380_thunk_IntEnable:
	IntEnable(0x13<32>)
	return
l00009344:
	branch r0 != r3_34 + 0x1D000<32> l0000935E
l0000934C:
	IntRegister(0x14<32>, r1)
l0000935A_thunk_IntEnable:
	IntEnable(0x14<32>)
	return
l0000931E:
	branch r0 == 0x40004000<32> l00009384
l00009384:
	IntRegister(0x10<32>, r1)
l00009392_thunk_IntEnable:
	IntEnable(0x10<32>)
	return
l00009324:
	branch r0 != r3_4 - 0x1000<32> l0000935E
l0000935E:
	IntRegister(0xFFFFFFFF<32>, r1)
l0000936E_thunk_IntEnable:
	IntEnable(0xFFFFFFFF<32>)
	return
l0000932C:
	IntRegister(0x11<32>, r1)
l0000933A_thunk_IntEnable:
	IntEnable(0x11<32>)
	return
GPIOPortIntRegister_exit:


void GPIOPortIntUnregister(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr r4 sp
GPIOPortIntUnregister_entry:
l000093B0:
	word32 r3_4 = Mem0[0x00009444<p32>:word32]
	branch r0 == r3_4 l00009432
l00009432:
	IntDisable(0x12<32>)
l00009440_thunk_IntUnregister:
	IntUnregister(0x12<32>)
	return
l000093B8:
	branch r0 >u r3_4 l000093DA
l000093DA:
	word32 r3_29 = Mem9[0x00009448<p32>:word32]
	branch r0 == r3_29 l0000940E
l0000940E:
	IntDisable(0x13<32>)
l0000941C_thunk_IntUnregister:
	IntUnregister(0x13<32>)
	return
l000093E0:
	branch r0 != r3_29 + 0x1D000<32> l000093FA
l000093E8:
	IntDisable(0x14<32>)
l000093F6_thunk_IntUnregister:
	IntUnregister(0x14<32>)
	return
l000093BA:
	branch r0 == 0x40004000<32> l00009420
l00009420:
	IntDisable(0x10<32>)
l0000942E_thunk_IntUnregister:
	IntUnregister(0x10<32>)
	return
l000093C0:
	branch r0 != r3_4 - 0x1000<32> l000093FA
l000093FA:
	IntDisable(0xFFFFFFFF<32>)
l0000940A_thunk_IntUnregister:
	IntUnregister(0xFFFFFFFF<32>)
	return
l000093C8:
	IntDisable(0x11<32>)
l000093D6_thunk_IntUnregister:
	IntUnregister(0x11<32>)
	return
GPIOPortIntUnregister_exit:


void GPIOPinRead()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0
// Preserved: sp
GPIOPinRead_entry:
l0000944C:
	return
GPIOPinRead_exit:


void GPIOPinWrite(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      PDCInit
// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
GPIOPinWrite_entry:
l00009454:
	Mem6[r0 + (r1 << 2<i32>):word32] = r2
	return
GPIOPinWrite_exit:


void GPIOPinTypeComparator(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r1 r2 r3
// Preserved: r4 r5 r6 sp
GPIOPinTypeComparator_entry:
l0000945C:
	word32 r5_11 = ~r1
	Mem17[r0 + 1024<i32>:word32] = Mem9[r0 + 1024<i32>:word32] & r5_11
	Mem22[r0 + 1056<i32>:word32] = r5_11 & Mem17[r0 + 1056<i32>:word32]
l0000947A_thunk_GPIOPadConfigSet:
	GPIOPadConfigSet(r0, r1, 1<32>, 0<32>)
	return
GPIOPinTypeComparator_exit:


void GPIOPinTypeI2C(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      OSRAMInit
// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: r4 r5 r6 sp
GPIOPinTypeI2C_entry:
l00009480:
	Mem16[r0 + 1024<i32>:word32] = Mem9[r0 + 1024<i32>:word32] & ~r1
	Mem21[r0 + 1056<i32>:word32] = r1 | Mem16[r0 + 1056<i32>:word32]
l000094A0_thunk_GPIOPadConfigSet:
	GPIOPadConfigSet(r0, r1, 1<32>, 0xB<32>)
	return
GPIOPinTypeI2C_exit:


void GPIOPinTypeQEI(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: r4 r5 r6 sp
GPIOPinTypeQEI_entry:
l000094A4:
	Mem16[r0 + 1024<i32>:word32] = Mem9[r0 + 1024<i32>:word32] & ~r1
	Mem21[r0 + 1056<i32>:word32] = r1 | Mem16[r0 + 1056<i32>:word32]
l000094C4_thunk_GPIOPadConfigSet:
	GPIOPadConfigSet(r0, r1, 1<32>, 0xA<32>)
	return
GPIOPinTypeQEI_exit:


void GPIOPinTypeUART(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      GPIOPinTypeTimer
//      GPIOPinTypeSSI
//      GPIOPinTypePWM
// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: r4 r5 r6 sp
GPIOPinTypeUART_entry:
l000094C8:
	Mem16[r0 + 1024<i32>:word32] = Mem9[r0 + 1024<i32>:word32] & ~r1
	Mem21[r0 + 1056<i32>:word32] = r1 | Mem16[r0 + 1056<i32>:word32]
l000094E8_thunk_GPIOPadConfigSet:
	GPIOPadConfigSet(r0, r1, 1<32>, 8<32>)
	return
GPIOPinTypeUART_exit:


void GPIOPinTypeTimer(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: sp
GPIOPinTypeTimer_entry:
l000094EC:
l000094EC_thunk_GPIOPinTypeUART:
	GPIOPinTypeUART(r0, r1)
	return
GPIOPinTypeTimer_exit:


void GPIOPinTypeSSI(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: sp
GPIOPinTypeSSI_entry:
l000094F0:
l000094F0_thunk_GPIOPinTypeUART:
	GPIOPinTypeUART(r0, r1)
	return
GPIOPinTypeSSI_exit:


void GPIOPinTypePWM(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: sp
GPIOPinTypePWM_entry:
l000094F4:
l000094F4_thunk_GPIOPinTypeUART:
	GPIOPinTypeUART(r0, r1)
	return
GPIOPinTypePWM_exit:


void IntDefaultHandler()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
IntDefaultHandler_exit:
IntDefaultHandler_entry:
l000094F8:


void IntMasterEnable()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
IntMasterEnable_entry:
l000094FC:
l000094FC_thunk_CPUcpsie:
	CPUcpsie()
	return
IntMasterEnable_exit:


void IntMasterDisable()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
IntMasterDisable_entry:
l00009500:
l00009500_thunk_CPUcpsid:
	CPUcpsid()
	return
IntMasterDisable_exit:


void IntRegister(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      GPIOPortIntRegister
//      SSIIntRegister
//      SysCtlIntRegister
//      UARTIntRegister
//      I2CIntRegister
// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r2 r3
// Preserved: r4 r5 sp
IntRegister_entry:
l00009504:
	word32 r4_11 = Mem9[0x00009534<p32>:word32]
	branch Mem9[Mem0[0x00009530<p32>:word32]:word32] == r4_11 l00009526
l00009510:
	word32 r3_14 = r4_11
l00009516:
	Mem21[r3_14:word32] = Mem19[r3_14 - r4_11:word32]
	r3_14 = r3_14 + 4<i32>
	branch r3_14 != r4_11 + 0xB8<32> l00009516
l00009522:
	Mem27[Mem21[0x00009530<p32>:word32]:word32] = r4_11
l00009526:
	Mem35[r4_11 + (r0 << 2<i32>):word32] = r1
	return
IntRegister_exit:


void IntUnregister(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      GPIOPortIntUnregister
//      SSIIntUnregister
//      SysCtlIntUnregister
//      UARTIntUnregister
//      I2CIntUnregister
// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
IntUnregister_entry:
l00009538:
	Mem7[Mem0[0x00009544<p32>:word32] + (r0 << 2<i32>):word32] = Mem0[0x00009548<p32>:word32]
	return
IntUnregister_exit:


void IntPriorityGroupingSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
IntPriorityGroupingSet_entry:
l0000954C:
	Mem10[Mem0[0x00009564<p32>:word32]:word32] = Mem0[Mem0[0x00009560<p32>:word32] + (r0 << 2<i32>):word32] | 0x5F80000<32> | 0x20000<32>
	return
IntPriorityGroupingSet_exit:


void IntPriorityGroupingGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: sp
IntPriorityGroupingGet_entry:
l00009568:
	word32 r3_11 = 0x700<32>
	word32 r0_15 = 0<32>
	word32 r1_7 = Mem0[Mem0[0x00009588<p32>:word32]:word32]
	word32 r2_19 = Mem0[0x0000958C<p32>:word32]
l0000957C:
	branch r3_11 == (r1_7 & 0x700<32>) l00009586
l00009580:
	r0_15 = r0_15 + 1<32>
	branch r0_15 != 8<32> l00009578
l00009578:
	r2_19 = r2_19 + 4<i32>
	r3_11 = Mem0[r2_19:word32]
l00009586:
	return
IntPriorityGroupingGet_exit:


void IntPrioritySet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: r4 sp
IntPrioritySet_entry:
l00009590:
	word32 r4_13 = Mem8[Mem0[0x000095B8<p32>:word32] + (r0 & 0xFFFFFFFC<32>) + 32<i32>:word32]
	word32 r0_16 = (r0 & 3<32>) << 3<i32>
	Mem23[r4_13:word32] = r1 << r0_16 | Mem8[r4_13:word32] & ~(0xFF<32> << r0_16)
	return
IntPrioritySet_exit:


void IntPriorityGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: sp
IntPriorityGet_entry:
l000095BC:
	return
IntPriorityGet_exit:


void IntEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      GPIOPortIntRegister
//      SSIIntRegister
//      SysCtlIntRegister
//      UARTIntRegister
//      I2CIntRegister
// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: sp
IntEnable_entry:
l000095DC:
	branch r0 == 4<32> l00009608
l00009608:
	word32 r2_7 = Mem0[0x00009634<p32>:word32]
	Mem10[r2_7:word32] = Mem0[r2_7:word32] | 0x10000<32>
	return
l000095E0:
	branch r0 == 5<32> l00009614
l00009614:
	word32 r2_13 = Mem0[0x00009634<p32>:word32]
	Mem16[r2_13:word32] = Mem0[r2_13:word32] | 0x20000<32>
	return
l000095E4:
	branch r0 == 6<32> l00009620
l00009620:
	word32 r2_19 = Mem0[0x00009634<p32>:word32]
	Mem22[r2_19:word32] = Mem0[r2_19:word32] | 0x40000<32>
	return
l000095E8:
	branch r0 == 0xF<32> l000095FC
l000095FC:
	word32 r2_25 = Mem0[0x00009630<p32>:word32]
	Mem28[r2_25:word32] = Mem0[r2_25:word32] | 2<32>
	return
l000095EC:
	branch r0 <=u 0xF<32> l000095FA
l000095EE:
	Mem35[Mem0[0x0000962C<p32>:word32]:word32] = 1<32> << r0 - 0x10<32>
l000095FA:
	return
IntEnable_exit:


void IntDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      GPIOPortIntUnregister
//      SSIIntUnregister
//      SysCtlIntUnregister
//      UARTIntUnregister
//      I2CIntUnregister
// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: sp
IntDisable_entry:
l00009638:
	branch r0 == 4<32> l00009664
l00009664:
	word32 r2_7 = Mem0[0x00009690<p32>:word32]
	Mem10[r2_7:word32] = Mem0[r2_7:word32] & 0xFFFEFFFF<32>
	return
l0000963C:
	branch r0 == 5<32> l00009670
l00009670:
	word32 r2_13 = Mem0[0x00009690<p32>:word32]
	Mem16[r2_13:word32] = Mem0[r2_13:word32] & 0xFFFDFFFF<32>
	return
l00009640:
	branch r0 == 6<32> l0000967C
l0000967C:
	word32 r2_19 = Mem0[0x00009690<p32>:word32]
	Mem22[r2_19:word32] = Mem0[r2_19:word32] & 0xFFFBFFFF<32>
	return
l00009644:
	branch r0 == 0xF<32> l00009658
l00009658:
	word32 r2_25 = Mem0[0x0000968C<p32>:word32]
	Mem28[r2_25:word32] = Mem0[r2_25:word32] & 0xFFFFFFFD<32>
	return
l00009648:
	branch r0 <=u 0xF<32> l00009656
l0000964A:
	Mem35[Mem0[0x00009688<p32>:word32]:word32] = 1<32> << r0 - 0x10<32>
l00009656:
	return
IntDisable_exit:


void OSRAMDelay(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      OSRAMWriteArray
//      OSRAMWriteByte
//      OSRAMWriteFinal
// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r0
// Preserved: sp
OSRAMDelay_entry:
l00009694:
	r0 = r0 - 1<32>
	branch r0 != 0<32> l00009694
l00009698:
	return
OSRAMDelay_exit:


void OSRAMWriteFirst(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      OSRAMStringDraw
//      OSRAMImageDraw
//      OSRAMInit
//      OSRAMDisplayOn
//      OSRAMDisplayOff
// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r0 r1 r2
// Preserved: lr r3 r4 r5 sp
OSRAMWriteFirst_entry:
l0000969C:
	word32 r4_14 = Mem11[0x000096C0<p32>:word32]
	I2CMasterSlaveAddrSet(r4_14, 0x3D<32>, 0<32>)
	I2CMasterDataPut(r4_14, r0)
l000096BC_thunk_I2CMasterControl:
	I2CMasterControl(r4_14, 3<32>)
	return
OSRAMWriteFirst_exit:


void OSRAMWriteArray(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      OSRAMStringDraw
//      OSRAMImageDraw
//      OSRAMInit
//      OSRAMDisplayOn
// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1
// Preserved: r3 r4 r5 r6 r7 sp
OSRAMWriteArray_entry:
l000096C4:
	branch r1 == 0<32> l000096FA
l000096FA:
	return
l000096C6:
	word32 r5_18 = r0
	word32 r7_19 = Mem16[0x000096FC<p32>:word32]
	word32 r4_20 = Mem16[0x00009700<p32>:word32]
	word32 r6_21 = r0 + r1
l000096D0:
	branch I2CMasterIntStatus(r4_20, 0<32>) == 0<32> l000096D0
l000096DC:
	OSRAMDelay(Mem16[r7_19:word32])
	I2CMasterDataPut(r4_20, CONVERT(Mem16[r5_18:byte], byte, word32))
	I2CMasterControl(r4_20, 1<32>)
	r5_18 = r5_18 + 1<i32>
	branch r6_21 != r5_18 l000096D0
l000096F8:
	return
OSRAMWriteArray_exit:


void OSRAMWriteByte(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      OSRAMStringDraw
//      OSRAMImageDraw
//      OSRAMInit
//      OSRAMDisplayOff
// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r3
// Preserved: lr r4 sp
OSRAMWriteByte_entry:
l00009704:
l00009708:
	branch I2CMasterIntStatus(Mem7[0x00009730<p32>:word32], 0<32>) == 0<32> l00009708
l00009714:
	OSRAMDelay(Mem7[Mem7[0x00009734<p32>:word32]:word32])
	I2CMasterDataPut(Mem7[0x00009730<p32>:word32], r0)
	word32 r0_35 = Mem7[0x00009730<p32>:word32]
l0000972C_thunk_I2CMasterControl:
	I2CMasterControl(r0_35, 1<32>)
	return
OSRAMWriteByte_exit:


void OSRAMWriteFinal(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      OSRAMStringDraw
//      OSRAMImageDraw
//      OSRAMInit
//      OSRAMDisplayOn
//      OSRAMDisplayOff
// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1
// Preserved: lr r4 r5 r6 sp
OSRAMWriteFinal_entry:
l00009738:
	word32 r4_14 = Mem11[0x00009778<p32>:word32]
l0000973E:
	branch I2CMasterIntStatus(r4_14, 0<32>) == 0<32> l0000973E
l0000974A:
	word32 r5_26 = Mem11[0x0000977C<p32>:word32]
	word32 r4_27 = Mem11[0x00009778<p32>:word32]
	OSRAMDelay(Mem11[r5_26:word32])
	I2CMasterDataPut(r4_27, r0)
	I2CMasterControl(r4_27, 5<32>)
l00009764:
	branch I2CMasterIntStatus(r4_27, 0<32>) == 0<32> l00009764
l00009770:
	word32 r0_51 = Mem11[r5_26:word32]
l00009776_thunk_OSRAMDelay:
	OSRAMDelay(r0_51)
	return
OSRAMWriteFinal_exit:


void OSRAMClear()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      vPrintTask
//      OSRAMInit
// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 sp
OSRAMClear_entry:
l00009780:
	OSRAMWriteFirst(0x80<32>)
	OSRAMWriteArray(Mem7[0x000097C4<p32>:word32], 6<32>)
	word32 r4_20 = 0x5F<32>
l00009792:
	OSRAMWriteByte(0<32>)
	r4_20 = r4_20 - 1<32>
	branch r4_20 != 0<32> l00009792
l0000979C:
	OSRAMWriteFinal(r4_20)
	OSRAMWriteFirst(0x80<32>)
	OSRAMWriteArray(Mem7[0x000097C8<p32>:word32], 6<32>)
	word32 r4_53 = 0x5F<32>
l000097B2:
	OSRAMWriteByte(0<32>)
	r4_53 = r4_53 - 1<32>
	branch r4_53 != 0<32> l000097B2
l000097BC:
l000097C2_thunk_OSRAMWriteFinal:
	OSRAMWriteFinal(r4_53)
	return
OSRAMClear_exit:


void OSRAMStringDraw(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      ResetISR
//      vPrintTask
// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 r5 r6 sp
OSRAMStringDraw_entry:
l000097CC:
	OSRAMWriteFirst(0x80<32>)
	word32 r4_100 = r1
	word32 r5_104 = r0
	branch r2 != 0<32> l000097E0
l000097DE_1:
l000097E0:
	OSRAMWriteByte(0xB1<32>)
	OSRAMWriteByte(0x80<32>)
	OSRAMWriteByte(r1 + 0x24<32> & 0xF<32>)
	OSRAMWriteByte(0x80<32>)
	OSRAMWriteByte(CONVERT(SLICE(r1 + 0x24<32>, ui4, 4), ui4, uint32) | 0x10<32>)
	OSRAMWriteByte(0x40<32>)
	word32 r3_117 = CONVERT(Mem11[r0:byte], byte, word32)
	branch r3_117 == 0<32> l00009876
l00009876:
	return
l00009814:
	word32 r6_85 = Mem11[0x00009878<p32>:word32]
	branch r1 <=u 0x5A<32> l00009830
l00009830:
	OSRAMWriteArray(r6_85 + (r3_117 - 0x20<32>) * 5<32>, 5<32>)
	branch r4_100 != 0x5A<32> l0000981C
l0000981C:
	r5_104 = r5_104 + 1<i32>
	r4_100 = r4_100 + 6<32>
	branch CONVERT(Mem11[r5_104:byte], byte, word32) == 0<32> l00009846
l00009824:
	OSRAMWriteByte(0<32>)
	r3_117 = CONVERT(Mem11[r5_104:byte], byte, word32)
	branch r3_117 == 0<32> l00009874
l00009874:
	return
l0000982C:
	branch r4_100 >u 0x5A<32> l0000984C
l00009846:
l0000984A_thunk_OSRAMWriteFinal:
	OSRAMWriteFinal(0<32>)
	return
l0000981A:
l0000984C:
	word32 r4_144 = 0x5F<32> - r4_100
	OSRAMWriteArray(r6_85 + (r3_117 - 0x20<32>) * 5<32>, r4_144)
	word32 r3_156 = CONVERT(Mem11[r5_104:byte], byte, word32)
	word32 r0_163 = CONVERT(Mem11[r3_156 - 0x20<32> + (r3_156 - 0x20<32> << 2<u32>) + Mem11[0x0000987C<p32>:word32] + r4_144 + 16<i32>:byte], byte, word32)
l00009872_thunk_OSRAMWriteFinal:
	OSRAMWriteFinal(r0_163)
	return
OSRAMStringDraw_exit:


void OSRAMImageDraw(word32 r0, word32 r1, word32 r2, word32 r3, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31] Stack +0000:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r10 r4 r5 r6 r7 r8 r9 sp
OSRAMImageDraw_entry:
l00009880:
	branch dwArg00 == 0<32> l000098EA
l00009888:
	word32 r5_103 = r0
	word32 r4_112 = r2
	word32 r8_29 = CONVERT(SLICE(r1 + 0x24<32>, ui4, 4), ui4, uint32)
	word32 r6_30 = dwArg00 + r2
	word32 r7_33 = r1 + 0x24<32> & 0xF<32>
l000098A2:
	OSRAMWriteFirst(0x80<32>)
	branch r4_112 == 0<32> l000098AE
l000098AC_1:
l000098AE:
	OSRAMWriteByte(0xB0<32>)
	OSRAMWriteByte(0x80<32>)
	OSRAMWriteByte(r7_33)
	OSRAMWriteByte(0x80<32>)
	OSRAMWriteByte(r8_29 | 0x10<32>)
	OSRAMWriteByte(0x40<32>)
	OSRAMWriteArray(r5_103, r3 + 0xFFFFFFFF<32>)
	r5_103 = r5_103 + r3
	OSRAMWriteFinal(CONVERT(Mem19[r5_103 - 1<i32>:byte], byte, word32))
	r4_112 = r4_112 + 1<32>
	branch r6_30 != r4_112 l000098A2
l000098EA:
	return
OSRAMImageDraw_exit:


void OSRAMInit(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      ResetISR
// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 r5 r6 r7 r8 sp
OSRAMInit_entry:
l000098F0:
	SysCtlPeripheralEnable(0x10001000<32>)
	SysCtlPeripheralEnable(Mem15[0x00009960<p32>:word32])
	GPIOPinTypeI2C(Mem15[0x00009964<p32>:word32], 0xC<32>)
	I2CMasterInit(Mem15[0x00009968<p32>:word32], r0)
	word32 r7_51 = Mem15[0x00009970<p32>:word32]
	Mem56[Mem15[0x0000996C<p32>:word32]:word32] = 1<32>
	word32 r6_52 = 0xE3<32>
	word32 r4_53 = 4<32>
	word32 r0_54 = 0x80<32>
	word32 r5_55 = 0<32>
l00009938:
	OSRAMWriteFirst(r0_54)
	OSRAMWriteArray(r5_55 + 2<32> + (r7_51 + 0x1EC<32>), r4_53 - 2<32>)
	OSRAMWriteFinal(r6_52)
	r5_55 = r5_55 + (r4_53 + 1<32>)
	word32 r3_88 = r7_51 + r5_55
	branch r5_55 <=u 0x70<32> l0000992A
l0000992A:
	r4_53 = CONVERT(Mem56[r3_88 + 492<i32>:byte], byte, word32)
	r0_54 = CONVERT(Mem56[r3_88 + 493<i32>:byte], byte, word32)
	r6_52 = CONVERT(Mem56[r3_88 + r4_53 + 492<i32>:byte], byte, word32)
l00009958:
l0000995C_thunk_OSRAMClear:
	OSRAMClear()
	return
OSRAMInit_exit:


void OSRAMDisplayOn()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
OSRAMDisplayOn_entry:
l00009974:
	word32 r7_16 = Mem15[0x000099BC<p32>:word32]
	word32 r6_17 = 0xE3<32>
	word32 r4_18 = 4<32>
	word32 r0_19 = 0x80<32>
	word32 r5_20 = 0<32>
l00009996:
	OSRAMWriteFirst(r0_19)
	OSRAMWriteArray(r5_20 + 2<32> + (r7_16 + 0x1EC<32>), r4_18 - 2<32>)
	OSRAMWriteFinal(r6_17)
	r5_20 = r5_20 + (r4_18 + 1<32>)
	word32 r3_52 = r7_16 + r5_20
	branch r5_20 <=u 0x70<32> l00009988
l00009988:
	r4_18 = CONVERT(Mem15[r3_52 + 492<i32>:byte], byte, word32)
	r0_19 = CONVERT(Mem15[r3_52 + 493<i32>:byte], byte, word32)
	r6_17 = CONVERT(Mem15[r3_52 + r4_18 + 492<i32>:byte], byte, word32)
l000099B6:
	return
OSRAMDisplayOn_exit:


void OSRAMDisplayOff()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: lr r3 sp
OSRAMDisplayOff_entry:
l000099C0:
	OSRAMWriteFirst(0x80<32>)
	OSRAMWriteByte(0xAE<32>)
	OSRAMWriteByte(0x80<32>)
	OSRAMWriteByte(0xAD<32>)
	OSRAMWriteByte(0x80<32>)
l000099E6_thunk_OSRAMWriteFinal:
	OSRAMWriteFinal(0x8A<32>)
	return
OSRAMDisplayOff_exit:


void SSIConfig(word32 r0, word32 r1, word32 r2, word32 r3, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      PDCInit
// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31] r3:[0..31] Stack +0000:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
SSIConfig_entry:
l000099E8:
	word32 r7_17 = r2
	word32 r0_25 = SysCtlClockGet()
	branch r2 == 2<32> l00009A30
l00009A30:
	r7_17 = 0xC<32>
l000099FE:
	branch r2 == 0<32> l00009A04
l00009A02_1:
	r7_17 = 4<32>
l00009A04:
	Mem45[r0 + 4<i32>:word32] = r7_17
	word32 r3_41 = r0_25 /u r3
	word32 r4_42 = 0<32>
l00009A0C:
	r4_42 = r4_42 + 2<32>
	word32 r2_49 = r3_41 /u r4_42
	branch r2_49 >u 0x100<32> l00009A0C
l00009A18:
	Mem65[r0 + 16<i32>:word32] = r4_42
	Mem66[r0:word32] = dwArg00 - 1<32> | (r1 & 0x30<32> | r1 << 6<u32>) | r2_49 - 1<32> << 8<u32>
	return
SSIConfig_exit:


void SSIEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      PDCInit
// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
SSIEnable_entry:
l00009A34:
	Mem7[r0 + 4<i32>:word32] = Mem0[r0 + 4<i32>:word32] | 2<32>
	return
SSIEnable_exit:


void SSIDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
SSIDisable_entry:
l00009A40:
	Mem7[r0 + 4<i32>:word32] = Mem0[r0 + 4<i32>:word32] & 0xFFFFFFFD<32>
	return
SSIDisable_exit:


void SSIIntRegister(word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr sp
SSIIntRegister_entry:
l00009A4C:
	IntRegister(0x17<32>, r1)
l00009A5A_thunk_IntEnable:
	IntEnable(0x17<32>)
	return
SSIIntRegister_exit:


void SSIIntUnregister()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr sp
SSIIntUnregister_entry:
l00009A60:
	IntDisable(0x17<32>)
l00009A6E_thunk_IntUnregister:
	IntUnregister(0x17<32>)
	return
SSIIntUnregister_exit:


void SSIIntEnable(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r1 r3
// Preserved: sp
SSIIntEnable_entry:
l00009A74:
	Mem9[r0 + 20<i32>:word32] = r1 | Mem0[r0 + 20<i32>:word32]
	return
SSIIntEnable_exit:


void SSIIntDisable(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: r1 r3
// Preserved: sp
SSIIntDisable_entry:
l00009A7C:
	Mem8[r0 + 20<i32>:word32] = Mem0[r0 + 20<i32>:word32] & ~r1
	return
SSIIntDisable_exit:


void SSIIntStatus(word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r1:[0..31]
// LiveOut:
// Trashed: r0
// Preserved: sp
SSIIntStatus_entry:
l00009A88:
	branch r1 != 0<32> l00009A8E
l00009A8E:
	return
l00009A8A:
	return
SSIIntStatus_exit:


void SSIIntClear(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
SSIIntClear_entry:
l00009A94:
	Mem5[r0 + 32<i32>:word32] = r1
	return
SSIIntClear_exit:


void SSIDataPut(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      PDCWrite
// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r2 r3
// Preserved: sp
SSIDataPut_entry:
l00009A98:
l00009A9C:
	branch Mem0[r0 + 0xC<32>:word32] << 30<i32> >= 0<32> l00009A9C
l00009AA2:
	Mem14[r0 + 8<i32>:word32] = r1
	return
SSIDataPut_exit:


void SSIDataNonBlockingPut(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r0 r3
// Preserved: sp
SSIDataNonBlockingPut_entry:
l00009AA8:
	branch (Mem0[r0 + 12<i32>:word32] & 2<32>) == 0<32> l00009AB2
l00009AB0_1:
	Mem10[r0 + 8<i32>:word32] = r1
l00009AB2:
	return
SSIDataNonBlockingPut_exit:


void SSIDataGet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      PDCWrite
// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r2 r3
// Preserved: sp
SSIDataGet_entry:
l00009AB8:
l00009ABC:
	branch Mem0[r0 + 0xC<32>:word32] << 29<i32> >= 0<32> l00009ABC
l00009AC2:
	Mem15[r1:word32] = Mem0[r0 + 8<i32>:word32]
	return
SSIDataGet_exit:


void SSIDataNonBlockingGet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r0 r3
// Preserved: sp
SSIDataNonBlockingGet_entry:
l00009AC8:
	word32 r3_5 = Mem0[r0 + 12<i32>:word32]
	word32 r3_10 = r3_5 & 4<32>
	branch (r3_5 & 4<32>) == 0<32> l00009AD2
l00009AD0_1:
	r3_10 = Mem0[r0 + 8<i32>:word32]
l00009AD2:
	Mem13[r1:word32] = r3_10
	return
SSIDataNonBlockingGet_exit:


void SysCtlSRAMSizeGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlSRAMSizeGet_entry:
l00009ADC:
	return
SysCtlSRAMSizeGet_exit:


void SysCtlFlashSizeGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlFlashSizeGet_entry:
l00009AF4:
	return
SysCtlFlashSizeGet_exit:


void SysCtlPinPresent(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0 r3
// Preserved: sp
SysCtlPinPresent_entry:
l00009B0C:
	branch (Mem0[Mem0[0x00009B1C<p32>:word32]:word32] & r0) == 0<32> l00009B16
l00009B14_1:
l00009B16:
	return
SysCtlPinPresent_exit:


void SysCtlPeripheralPresent(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPeripheralPresent_entry:
l00009B20:
	branch (r0 & 0xFFFFFFF<32> & Mem0[Mem0[Mem0[0x00009B38<p32>:word32] + ((r0 >>u 28<i32>) << 2<i32>):word32]:word32]) == 0<32> l00009B34
l00009B32_1:
l00009B34:
	return
SysCtlPeripheralPresent_exit:


void SysCtlPeripheralReset(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 sp
SysCtlPeripheralReset_entry:
l00009B3C:
	word32 r2_12 = Mem10[Mem0[0x00009B78<p32>:word32] + ((r0 >>u 28<i32>) << 2<u32>) + 16<i32>:word32]
	Mem17[r2_12:word32] = r0 & 0xFFFFFFF<32> | Mem10[r2_12:word32]
	word32 dwLoc0C_43 = 0<32>
	branch true l00009B6A
l00009B5E:
	dwLoc0C_43 = dwLoc0C_43 + 1<32>
	branch dwLoc0C_43 <=u 0xF<32> l00009B5E
l00009B6A:
	Mem37[r2_12:word32] = Mem32[r2_12:word32] & ~r0
	return
SysCtlPeripheralReset_exit:


void SysCtlPeripheralEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      PDCInit
//      OSRAMInit
// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPeripheralEnable_entry:
l00009B7C:
	word32 r3_8 = Mem0[Mem0[0x00009B94<p32>:word32] + ((r0 >>u 28<i32>) << 2<u32>) + 28<i32>:word32]
	Mem13[r3_8:word32] = r0 & 0xFFFFFFF<32> | Mem0[r3_8:word32]
	return
SysCtlPeripheralEnable_exit:


void SysCtlPeripheralDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPeripheralDisable_entry:
l00009B98:
	word32 r2_9 = Mem0[Mem0[0x00009BB0<p32>:word32] + ((r0 >>u 28<i32>) << 2<u32>) + 28<i32>:word32]
	Mem13[r2_9:word32] = Mem0[r2_9:word32] & ~(r0 & 0xFFFFFFF<32>)
	return
SysCtlPeripheralDisable_exit:


void SysCtlPeripheralSleepEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPeripheralSleepEnable_entry:
l00009BB4:
	word32 r3_8 = Mem0[Mem0[0x00009BCC<p32>:word32] + ((r0 >>u 28<i32>) << 2<u32>) + 40<i32>:word32]
	Mem13[r3_8:word32] = r0 & 0xFFFFFFF<32> | Mem0[r3_8:word32]
	return
SysCtlPeripheralSleepEnable_exit:


void SysCtlPeripheralSleepDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPeripheralSleepDisable_entry:
l00009BD0:
	word32 r2_9 = Mem0[Mem0[0x00009BE8<p32>:word32] + ((r0 >>u 28<i32>) << 2<u32>) + 40<i32>:word32]
	Mem13[r2_9:word32] = Mem0[r2_9:word32] & ~(r0 & 0xFFFFFFF<32>)
	return
SysCtlPeripheralSleepDisable_exit:


void SysCtlPeripheralDeepSleepEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPeripheralDeepSleepEnable_entry:
l00009BEC:
	word32 r3_8 = Mem0[Mem0[0x00009C04<p32>:word32] + ((r0 >>u 28<i32>) << 2<u32>) + 52<i32>:word32]
	Mem13[r3_8:word32] = r0 & 0xFFFFFFF<32> | Mem0[r3_8:word32]
	return
SysCtlPeripheralDeepSleepEnable_exit:


void SysCtlPeripheralDeepSleepDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPeripheralDeepSleepDisable_entry:
l00009C08:
	word32 r2_9 = Mem0[Mem0[0x00009C20<p32>:word32] + ((r0 >>u 28<i32>) << 2<u32>) + 52<i32>:word32]
	Mem13[r2_9:word32] = Mem0[r2_9:word32] & ~(r0 & 0xFFFFFFF<32>)
	return
SysCtlPeripheralDeepSleepDisable_exit:


void SysCtlPeripheralClockGating(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
SysCtlPeripheralClockGating_entry:
l00009C24:
	word32 r2_4 = Mem0[0x00009C3C<p32>:word32]
	word32 r3_5 = Mem0[r2_4:word32]
	branch r0 != 0<32> l00009C32
l00009C32:
	Mem8[r2_4:word32] = r3_5 | 0x8000000<32>
	return
l00009C2A:
	Mem10[r2_4:word32] = r3_5 & 0xF7FFFFFF<32>
	return
SysCtlPeripheralClockGating_exit:


void SysCtlIntRegister(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr sp
SysCtlIntRegister_entry:
l00009C40:
	IntRegister(0x2C<32>, r0)
l00009C50_thunk_IntEnable:
	IntEnable(0x2C<32>)
	return
SysCtlIntRegister_exit:


void SysCtlIntUnregister()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr sp
SysCtlIntUnregister_entry:
l00009C54:
	IntDisable(0x2C<32>)
l00009C62_thunk_IntUnregister:
	IntUnregister(0x2C<32>)
	return
SysCtlIntUnregister_exit:


void SysCtlIntEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlIntEnable_entry:
l00009C68:
	word32 r2_4 = Mem0[0x00009C74<p32>:word32]
	Mem9[r2_4:word32] = r0 | Mem0[r2_4:word32]
	return
SysCtlIntEnable_exit:


void SysCtlIntDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r0 r2 r3
// Preserved: sp
SysCtlIntDisable_entry:
l00009C78:
	word32 r2_4 = Mem0[0x00009C84<p32>:word32]
	Mem8[r2_4:word32] = Mem0[r2_4:word32] & ~r0
	return
SysCtlIntDisable_exit:


void SysCtlIntClear(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
SysCtlIntClear_entry:
l00009C88:
	Mem6[Mem0[0x00009C90<p32>:word32]:word32] = r0
	return
SysCtlIntClear_exit:


void SysCtlIntStatus(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlIntStatus_entry:
l00009C94:
	branch r0 != 0<32> l00009C9C
l00009C9C:
	return
l00009C96:
	return
SysCtlIntStatus_exit:


void SysCtlLDOSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
SysCtlLDOSet_entry:
l00009CAC:
	Mem6[Mem0[0x00009CB4<p32>:word32]:word32] = r0
	return
SysCtlLDOSet_exit:


void SysCtlLDOGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlLDOGet_entry:
l00009CB8:
	return
SysCtlLDOGet_exit:


void SysCtlLDOConfigSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
SysCtlLDOConfigSet_entry:
l00009CC4:
	Mem6[Mem0[0x00009CCC<p32>:word32]:word32] = r0
	return
SysCtlLDOConfigSet_exit:


void SysCtlReset()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
SysCtlReset_exit:
SysCtlReset_entry:
l00009CD0:
	Mem6[Mem0[0x00009CD8<p32>:word32]:word32] = Mem0[0x00009CDC<p32>:word32]
l00009CD6:


void SysCtlSleep()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
SysCtlSleep_entry:
l00009CE0:
l00009CE0_thunk_CPUwfi:
	CPUwfi()
	return
SysCtlSleep_exit:


void SysCtlDeepSleep()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r3
// Preserved: r4 sp
SysCtlDeepSleep_entry:
l00009CE4:
	word32 r4_8 = Mem7[0x00009D00<p32>:word32]
	Mem11[r4_8:word32] = Mem7[r4_8:word32] | 4<32>
	CPUwfi()
	Mem14[r4_8:word32] = Mem11[r4_8:word32] & 0xFFFFFFFB<32>
	return
SysCtlDeepSleep_exit:


void SysCtlResetCauseGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlResetCauseGet_entry:
l00009D04:
	return
SysCtlResetCauseGet_exit:


void SysCtlResetCauseClear(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r0 r2 r3
// Preserved: sp
SysCtlResetCauseClear_entry:
l00009D10:
	word32 r2_4 = Mem0[0x00009D1C<p32>:word32]
	Mem8[r2_4:word32] = Mem0[r2_4:word32] & ~r0
	return
SysCtlResetCauseClear_exit:


void SysCtlBrownOutConfigSet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: r1 r3
// Preserved: sp
SysCtlBrownOutConfigSet_entry:
l00009D20:
	Mem8[Mem0[0x00009D2C<p32>:word32]:word32] = r0 | r1 << 2<u32>
	return
SysCtlBrownOutConfigSet_exit:


void SysCtlClockSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r1 r2 r3
// Preserved: r0 r4 r5 r6 r7 sp
SysCtlClockSet_entry:
l00009D30:
	word32 r4_15 = Mem12[0x00009DE0<p32>:word32]
	word32 r3_17 = Mem12[r4_15:word32]
	word32 r5_25 = Mem12[0x00009DE8<p32>:word32]
	word32 r2_28 = r0 & 0x33F0<32> | (Mem12[0x00009DE4<p32>:word32] & r3_17 | 0x800<32>) & (r0 | 0xFFFFFFFC<32>)
	Mem29[r4_15:word32] = r3_17 & 0xFFBFFFFF<32> | 0x800<32>
	Mem30[r5_25:word32] = 0x40<32>
	Mem31[r4_15:word32] = r2_28
	word32 dwLoc14_117 = 0<32>
	branch true l00009D76
l00009D6A:
	dwLoc14_117 = dwLoc14_117 + 1<32>
	branch dwLoc14_117 <=u 0xF<32> l00009D6A
l00009D76:
	word32 r2_52 = r2_28 & 0xFFFFFFFC<32> | r0 & 3<32>
	Mem55[Mem47[0x00009DE0<p32>:word32]:word32] = r2_52
	word32 r1_58 = r0 & 0x7C00000<32> | r2_52 & 0xF83FFFFF<32>
	branch r0 << 20<i32> < 0<32> l00009DBE
l00009D94:
	word32 dwLoc14_120 = 0x8000<32>
	branch false l00009DBA
l00009D9E:
	word32 r2_64 = Mem62[0x00009DEC<p32>:word32]
	branch Mem62[r2_64:word32] << 25<i32> >= 0<32> l00009DAE
l00009DAE:
	dwLoc14_120 = dwLoc14_120 - 1<32>
	branch dwLoc14_120 != 0<32> l00009DA8
l00009DA8:
	branch Mem73[r2_64:word32] << 25<i32> < 0<32> l00009DBA
l00009DA6:
l00009DBA:
	r1_58 = r1_58 & 0xFFFFF7FF<32>
l00009DBE:
	Mem90[Mem86[0x00009DE0<p32>:word32]:word32] = r1_58
	word32 dwLoc14_123 = 0<32>
	branch true l00009DD8
l00009DCC:
	dwLoc14_123 = dwLoc14_123 + 1<32>
	branch dwLoc14_123 <=u 0xF<32> l00009DCC
l00009DD8:
	return
SysCtlClockSet_exit:


word32 SysCtlClockGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      SSIConfig
//      UARTConfigSet
//      UARTConfigGet
//      I2CMasterInit
// MayUse: 
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: sp
SysCtlClockGet_entry:
l00009DF0:
	word32 r0_12
	word32 r3_5 = Mem0[Mem0[0x00009E54<p32>:word32]:word32]
	branch (r3_5 & 0x30<32>) == 0x10<32> l00009E4E
l00009E4E:
	r0_12 = Mem0[0x00009E64<p32>:word32]
l00009DFC:
	branch (r3_5 & 0x30<32>) == 0x20<32> l00009E4A
l00009E4A:
	r0_12 = Mem0[0x00009E60<p32>:word32]
l00009E00:
	branch (r3_5 & 0x30<32>) == 0<32> l00009E06
l00009E06:
	r0_12 = Mem0[Mem0[0x00009E58<p32>:word32] + (CONVERT(SLICE(r3_5, ui4, 6), ui4, uint32) << 2<u32>) + 48<i32>:word32]
l00009E12:
	branch r3_5 << 20<i32> < 0<32> l00009E3A
l00009E16:
	word32 r2_23 = Mem0[Mem0[0x00009E5C<p32>:word32]:word32]
	r0_12 = r0_12 * (CONVERT(SLICE(r2_23, ui9, 5), ui9, uint32) + 2<32>) /u ((r2_23 & 0x1F<32>) + 2<32>)
	branch r2_23 << 17<i32> >= 0<32> l00009E34
l00009E32_1:
	r0_12 = r0_12 >>u 1<i32>
l00009E34:
	branch r2_23 << 16<i32> >= 0<32> l00009E3A
l00009E38_1:
	r0_12 = r0_12 >>u 2<i32>
l00009E3A:
	branch r3_5 << 9<i32> >= 0<32> l00009E04
l00009E3E:
	return r0_12 /u (CONVERT(SLICE(r3_5, ui4, 23), ui4, uint32) + 1<32>)
l00009E02:
	r0_12 = 0<32>
l00009E04:
	return r0_12
SysCtlClockGet_exit:


void SysCtlPWMClockSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPWMClockSet_entry:
l00009E68:
	word32 r2_4 = Mem0[0x00009E78<p32>:word32]
	Mem10[r2_4:word32] = r0 | Mem0[r2_4:word32] & 0xFFE1FFFF<32>
	return
SysCtlPWMClockSet_exit:


void SysCtlPWMClockGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlPWMClockGet_entry:
l00009E7C:
	return
SysCtlPWMClockGet_exit:


void SysCtlADCSpeedSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0 r1 r2 r3
// Preserved: r4 sp
SysCtlADCSpeedSet_entry:
l00009E8C:
	word32 r4_6 = Mem5[0x00009EB8<p32>:word32]
	word32 r1_7 = Mem5[0x00009EBC<p32>:word32]
	word32 r2_9 = Mem5[0x00009EC0<p32>:word32]
	Mem13[r4_6:word32] = Mem5[r4_6:word32] & 0xFFFFF0FF<32> | r0
	Mem19[r1_7:word32] = Mem13[r1_7:word32] & 0xFFFFF0FF<32> | r0
	Mem24[r2_9:word32] = r0 | Mem19[r2_9:word32] & 0xFFFFF0FF<32>
	return
SysCtlADCSpeedSet_exit:


void SysCtlADCSpeedGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlADCSpeedGet_entry:
l00009EC4:
	return
SysCtlADCSpeedGet_exit:


void SysCtlIOSCVerificationSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
SysCtlIOSCVerificationSet_entry:
l00009ED4:
	word32 r2_4 = Mem0[0x00009EEC<p32>:word32]
	word32 r3_5 = Mem0[r2_4:word32]
	branch r0 != 0<32> l00009EE2
l00009EE2:
	Mem8[r2_4:word32] = r3_5 | 8<32>
	return
l00009EDA:
	Mem10[r2_4:word32] = r3_5 & 0xFFFFFFF7<32>
	return
SysCtlIOSCVerificationSet_exit:


void SysCtlMOSCVerificationSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
SysCtlMOSCVerificationSet_entry:
l00009EF0:
	word32 r2_4 = Mem0[0x00009F08<p32>:word32]
	word32 r3_5 = Mem0[r2_4:word32]
	branch r0 != 0<32> l00009EFE
l00009EFE:
	Mem8[r2_4:word32] = r3_5 | 4<32>
	return
l00009EF6:
	Mem10[r2_4:word32] = r3_5 & 0xFFFFFFFB<32>
	return
SysCtlMOSCVerificationSet_exit:


void SysCtlPLLVerificationSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
SysCtlPLLVerificationSet_entry:
l00009F0C:
	word32 r2_4 = Mem0[0x00009F24<p32>:word32]
	word32 r3_5 = Mem0[r2_4:word32]
	branch r0 != 0<32> l00009F1A
l00009F1A:
	Mem8[r2_4:word32] = r3_5 | 0x400<32>
	return
l00009F12:
	Mem10[r2_4:word32] = r3_5 & 0xFFFFFBFF<32>
	return
SysCtlPLLVerificationSet_exit:


void SysCtlClkVerificationClear()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r1 r2 r3
// Preserved: sp
SysCtlClkVerificationClear_entry:
l00009F28:
	word32 r3_6 = Mem0[0x00009F34<p32>:word32]
	Mem7[r3_6:word32] = 1<32>
	Mem8[r3_6:word32] = 0<32>
	return
SysCtlClkVerificationClear_exit:


void UARTParityModeSet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r1 r3
// Preserved: sp
UARTParityModeSet_entry:
l00009F38:
	Mem10[r0 + 44<i32>:word32] = r1 | Mem0[r0 + 44<i32>:word32] & 0xFFFFFF79<32>
	return
UARTParityModeSet_exit:


void UARTParityModeGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0
// Preserved: sp
UARTParityModeGet_entry:
l00009F44:
	return
UARTParityModeGet_exit:


void UARTConfigSet(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r3 r4 r5 r6 r7 sp
UARTConfigSet_entry:
l00009F4C:
l00009F56:
	word32 r4_26 = Mem15[r0 + 0x18<32>:word32]
	branch (r4_26 & 8<32>) != 0<32> l00009F56
l00009F5E:
	Mem33[r0 + 44<i32>:word32] = Mem15[r0 + 44<i32>:word32] & 0xFFFFFFEF<32>
	Mem37[r0 + 48<i32>:word32] = Mem33[r0 + 48<i32>:word32] & 0xFFFFFCFF<32> & 0xFFFFFFFE<32>
	word32 r0_38 = SysCtlClockGet()
	word32 r2_48 = r0_38 /u (r1 << 4<i32>)
	Mem56[r0 + 36<i32>:word32] = r2_48
	Mem57[r0 + 40<i32>:word32] = (r0_38 - (r1 << 4<i32>) * r2_48 << 3<i32>) /u r1 + 1<32> >>u 1<i32>
	Mem59[r0 + 44<i32>:word32] = r2
	Mem60[r0 + 24<i32>:word32] = r4_26 & 8<32>
	Mem63[r0 + 44<i32>:word32] = Mem60[r0 + 44<i32>:word32] | 0x10<32>
	Mem67[r0 + 48<i32>:word32] = Mem63[r0 + 48<i32>:word32] | 0x300<32> | 1<32>
	return
UARTConfigSet_exit:


void UARTConfigGet(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
UARTConfigGet_entry:
l00009FA8:
	Mem36[r1:word32] = (SysCtlClockGet() << 2<i32>) /u (Mem15[r0 + 40<i32>:word32] + (Mem15[r0 + 36<i32>:word32] << 6<u32>))
	Mem39[r2:word32] = Mem36[r0 + 44<i32>:word32] & 0xEE<32>
	return
UARTConfigGet_exit:


void UARTEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
UARTEnable_entry:
l00009FD4:
	Mem7[r0 + 44<i32>:word32] = Mem0[r0 + 44<i32>:word32] | 0x10<32>
	Mem11[r0 + 48<i32>:word32] = Mem7[r0 + 48<i32>:word32] | 0x300<32> | 1<32>
	return
UARTEnable_exit:


void UARTDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r2 r3
// Preserved: sp
UARTDisable_entry:
l00009FEC:
l00009FF0:
	branch Mem0[r0 + 0x18<32>:word32] << 28<i32> < 0<32> l00009FF0
l00009FF6:
	Mem14[r0 + 44<i32>:word32] = Mem0[r0 + 44<i32>:word32] & 0xFFFFFFEF<32>
	Mem18[r0 + 48<i32>:word32] = Mem14[r0 + 48<i32>:word32] & 0xFFFFFCFF<32> & 0xFFFFFFFE<32>
	return
UARTDisable_exit:


void UARTCharsAvail()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0
// Preserved: sp
UARTCharsAvail_entry:
l0000A00C:
	return
UARTCharsAvail_exit:


void UARTSpaceAvail()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0
// Preserved: sp
UARTSpaceAvail_entry:
l0000A018:
	return
UARTSpaceAvail_exit:


void UARTCharNonBlockingGet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0 r3
// Preserved: sp
UARTCharNonBlockingGet_entry:
l0000A024:
	branch Mem0[r0 + 24<i32>:word32] << 27<i32> < 0<32> l0000A02C
l0000A02A_1:
l0000A02C:
	return
UARTCharNonBlockingGet_exit:


void UARTCharGet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
UARTCharGet_entry:
l0000A034:
l0000A038:
	branch Mem0[r0 + 0x18<32>:word32] << 27<i32> < 0<32> l0000A038
l0000A03E:
	return
UARTCharGet_exit:


void UARTCharNonBlockingPut(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r0 r3
// Preserved: sp
UARTCharNonBlockingPut_entry:
l0000A044:
	branch Mem0[r0 + 24<i32>:word32] << 26<i32> < 0<32> l0000A04C
l0000A04A_1:
	Mem10[r0:word32] = r1
l0000A04C:
	return
UARTCharNonBlockingPut_exit:


void UARTCharPut(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r2 r3
// Preserved: sp
UARTCharPut_entry:
l0000A054:
l0000A058:
	branch Mem0[r0 + 0x18<32>:word32] << 26<i32> < 0<32> l0000A058
l0000A05E:
	Mem14[r0:word32] = r1
	return
UARTCharPut_exit:


void UARTBreakCtl(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
UARTBreakCtl_entry:
l0000A064:
	word32 r3_5 = Mem0[r0 + 44<i32>:word32]
	branch r1 != 0<32> l0000A070
l0000A070:
	Mem8[r0 + 44<i32>:word32] = r3_5 | 1<32>
	return
l0000A068:
	Mem10[r0 + 44<i32>:word32] = r3_5 & 0xFFFFFFFE<32>
	return
UARTBreakCtl_exit:


void UARTIntRegister(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr r4 sp
UARTIntRegister_entry:
l0000A078:
	branch r0 != Mem7[0x0000A094<p32>:word32] l0000A082
l0000A080_1:
l0000A082:
	IntRegister(0x16<32>, r1)
l0000A090_thunk_IntEnable:
	IntEnable(0x16<32>)
	return
UARTIntRegister_exit:


void UARTIntUnregister(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr r4 sp
UARTIntUnregister_entry:
l0000A098:
	branch r0 != Mem7[0x0000A0B4<p32>:word32] l0000A0A2
l0000A0A0_1:
l0000A0A2:
	IntDisable(0x16<32>)
l0000A0B0_thunk_IntUnregister:
	IntUnregister(0x16<32>)
	return
UARTIntUnregister_exit:


void UARTIntEnable(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZC r1 r3
// Preserved: sp
UARTIntEnable_entry:
l0000A0B8:
	Mem9[r0 + 56<i32>:word32] = r1 | Mem0[r0 + 56<i32>:word32]
	return
UARTIntEnable_exit:


void UARTIntDisable(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: r1 r3
// Preserved: sp
UARTIntDisable_entry:
l0000A0C0:
	Mem8[r0 + 56<i32>:word32] = Mem0[r0 + 56<i32>:word32] & ~r1
	return
UARTIntDisable_exit:


word32 UARTIntStatus(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      vUART_ISR
// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut: r0
// Trashed: r0
// Preserved: sp
UARTIntStatus_entry:
l0000A0CC:
	branch r1 != 0<32> l0000A0D2
l0000A0D2:
	return Mem0[r0 + 64<i32>:word32]
l0000A0CE:
	return Mem0[r0 + 60<i32>:word32]
UARTIntStatus_exit:


void UARTIntClear(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      vUART_ISR
// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
UARTIntClear_entry:
l0000A0D8:
	Mem5[r0 + 68<i32>:word32] = r1
	return
UARTIntClear_exit:


void CPUcpsie()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      IntMasterEnable
// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
CPUcpsie_entry:
l0000A0DC:
	__cps()
	return
CPUcpsie_exit:


void CPUcpsid()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      IntMasterDisable
// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
CPUcpsid_entry:
l0000A0E4:
	__cps()
	return
CPUcpsid_exit:


void CPUwfi()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      SysCtlSleep
//      SysCtlDeepSleep
// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
CPUwfi_entry:
l0000A0EC:
	__wait_for_interrupt()
	return
CPUwfi_exit:


void I2CMasterInit(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      OSRAMInit
// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r3 r4 r5 sp
I2CMasterInit_entry:
l0000A0F4:
	Mem18[r0 + 32<i32>:word32] = Mem11[r0 + 32<i32>:word32] | 0x10<32>
	word32 r0_19 = SysCtlClockGet()
	word32 r3_27 = Mem18[0x0000A120<p32>:word32]
	word32 r2_28 = Mem18[0x0000A124<p32>:word32]
	branch r1 != 1<32> l0000A112
l0000A110_1:
	r3_27 = r2_28
l0000A112:
	Mem40[r0 + 12<i32>:word32] = (r0_19 - 1<32> + r3_27) /u r3_27 - 1<32>
	return
I2CMasterInit_exit:


void I2CSlaveInit(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: r2 r3
// Preserved: r4 sp
I2CSlaveInit_entry:
l0000A128:
	Mem11[r0 - 0x7E0<32>:word32] = Mem5[r0 - 0x7E0<32>:word32] | 0x20<32>
	Mem12[r0 + 4<i32>:word32] = 1<32>
	Mem14[r0:word32] = r1
	return
I2CSlaveInit_exit:


void I2CMasterEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CMasterEnable_entry:
l0000A140:
	Mem7[r0 + 32<i32>:word32] = Mem0[r0 + 32<i32>:word32] | 0x10<32>
	return
I2CMasterEnable_exit:


void I2CSlaveEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r1 r2 r3
// Preserved: sp
I2CSlaveEnable_entry:
l0000A14C:
	Mem9[r0 - 0x7E0<32>:word32] = Mem0[r0 - 0x7E0<32>:word32] | 0x20<32>
	Mem10[r0 + 4<i32>:word32] = 1<32>
	return
I2CSlaveEnable_exit:


void I2CMasterDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CMasterDisable_entry:
l0000A160:
	Mem7[r0 + 32<i32>:word32] = Mem0[r0 + 32<i32>:word32] & 0xFFFFFFEF<32>
	return
I2CMasterDisable_exit:


void I2CSlaveDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
I2CSlaveDisable_entry:
l0000A16C:
	Mem6[r0 + 4<i32>:word32] = 0<32>
	Mem9[r0 - 0x7E0<32>:word32] = Mem6[r0 - 0x7E0<32>:word32] & 0xFFFFFFDF<32>
	return
I2CSlaveDisable_exit:


void I2CIntRegister(word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r1:[0..31]
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr sp
I2CIntRegister_entry:
l0000A180:
	IntRegister(0x18<32>, r1)
l0000A18E_thunk_IntEnable:
	IntEnable(0x18<32>)
	return
I2CIntRegister_exit:


void I2CIntUnregister()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr sp
I2CIntUnregister_entry:
l0000A194:
	IntDisable(0x18<32>)
l0000A1A2_thunk_IntUnregister:
	IntUnregister(0x18<32>)
	return
I2CIntUnregister_exit:


void I2CMasterIntEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CMasterIntEnable_entry:
l0000A1A8:
	Mem5[r0 + 16<i32>:word32] = 1<32>
	return
I2CMasterIntEnable_exit:


void I2CSlaveIntEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CSlaveIntEnable_entry:
l0000A1B0:
	Mem5[r0 + 12<i32>:word32] = 1<32>
	return
I2CSlaveIntEnable_exit:


void I2CMasterIntDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CMasterIntDisable_entry:
l0000A1B8:
	Mem5[r0 + 16<i32>:word32] = 0<32>
	return
I2CMasterIntDisable_exit:


void I2CSlaveIntDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CSlaveIntDisable_entry:
l0000A1C0:
	Mem5[r0 + 12<i32>:word32] = 0<32>
	return
I2CSlaveIntDisable_exit:


word32 I2CMasterIntStatus(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      OSRAMWriteArray
//      OSRAMWriteByte
//      OSRAMWriteFinal
// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut: r0
// Trashed: NZCV r0
// Preserved: sp
I2CMasterIntStatus_entry:
l0000A1C8:
	branch r1 != 0<32> l0000A1D4
l0000A1D4:
	word32 r0_6 = Mem0[r0 + 24<i32>:word32]
	word32 r0_10 = r0_6
	branch r0_6 == 0<32> l0000A1DC
l0000A1DA_1:
	r0_10 = 1<32>
l0000A1DC:
	return r0_10
l0000A1CA:
	word32 r0_11 = Mem0[r0 + 20<i32>:word32]
	word32 r0_12 = r0_11
	branch r0_11 == 0<32> l0000A1D2
l0000A1D0_1:
	r0_12 = 1<32>
l0000A1D2:
	return r0_12
I2CMasterIntStatus_exit:


void I2CSlaveIntStatus(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed: NZCV r0
// Preserved: sp
I2CSlaveIntStatus_entry:
l0000A1E0:
	branch r1 != 0<32> l0000A1EC
l0000A1EC:
	branch Mem0[r0 + 20<i32>:word32] == 0<32> l0000A1F4
l0000A1F2_1:
l0000A1F4:
	return
l0000A1E2:
	branch Mem0[r0 + 16<i32>:word32] == 0<32> l0000A1EA
l0000A1E8_1:
l0000A1EA:
	return
I2CSlaveIntStatus_exit:


void I2CMasterIntClear(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CMasterIntClear_entry:
l0000A1F8:
	Mem5[r0 + 28<i32>:word32] = 1<32>
	Mem6[r0 + 24<i32>:word32] = 1<32>
	return
I2CMasterIntClear_exit:


void I2CSlaveIntClear(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CSlaveIntClear_entry:
l0000A200:
	Mem5[r0 + 24<i32>:word32] = 1<32>
	return
I2CSlaveIntClear_exit:


void I2CMasterSlaveAddrSet(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      OSRAMWriteFirst
// MayUse:  r0:[0..31] r1:[0..31] r2:[0..31]
// LiveOut:
// Trashed: r2
// Preserved: sp
I2CMasterSlaveAddrSet_entry:
l0000A208:
	Mem7[r0:word32] = r2 | r1 << 1<u32>
	return
I2CMasterSlaveAddrSet_exit:


void I2CMasterBusy()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0
// Preserved: sp
I2CMasterBusy_entry:
l0000A210:
	return
I2CMasterBusy_exit:


void I2CMasterBusBusy()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0
// Preserved: sp
I2CMasterBusBusy_entry:
l0000A218:
	return
I2CMasterBusBusy_exit:


void I2CMasterControl(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      OSRAMWriteFirst
//      OSRAMWriteArray
//      OSRAMWriteByte
//      OSRAMWriteFinal
// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
I2CMasterControl_entry:
l0000A220:
	Mem5[r0 + 4<i32>:word32] = r1
	return
I2CMasterControl_exit:


void I2CMasterErr(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31]
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
I2CMasterErr_entry:
l0000A224:
	word32 r3_5 = Mem0[r0 + 4<i32>:word32]
	branch r3_5 << 31<i32> < 0<32> l0000A236
l0000A236:
l0000A22A:
	branch (r3_5 & 2<32>) == 0<32> l0000A238
l0000A238:
	return
l0000A230:
	return
I2CMasterErr_exit:


void I2CMasterDataPut(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      OSRAMWriteFirst
//      OSRAMWriteArray
//      OSRAMWriteByte
//      OSRAMWriteFinal
// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
I2CMasterDataPut_entry:
l0000A23C:
	Mem5[r0 + 8<i32>:word32] = r1
	return
I2CMasterDataPut_exit:


void I2CMasterDataGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0
// Preserved: sp
I2CMasterDataGet_entry:
l0000A240:
	return
I2CMasterDataGet_exit:


void I2CSlaveStatus()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0
// Preserved: sp
I2CSlaveStatus_entry:
l0000A244:
	return
I2CSlaveStatus_exit:


void I2CSlaveDataPut(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0:[0..31] r1:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
I2CSlaveDataPut_entry:
l0000A248:
	Mem5[r0 + 8<i32>:word32] = r1
	return
I2CSlaveDataPut_exit:


void I2CSlaveDataGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0
// Preserved: sp
I2CSlaveDataGet_entry:
l0000A24C:
	return
I2CSlaveDataGet_exit:


