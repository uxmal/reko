PyObject * fn10001000(PyObject * ptrArg04, PyObject * ptrArg08)
// stackDelta: 4; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0008:[0..31]
// LiveOut: eax
// Trashed: eax
// Preserved:
fn10001000_entry:
	int32 dwLoc08
	int32 dwLoc04
l10001000:
	word32 eax_17 = PyArg_ParseTuple(ptrArg08, 0x10002144<32>, &dwLoc04, &dwLoc08)
	branch eax_17 != 0<32> l10001027
l10001027:
	return Py_BuildValue(0x1000214C<32>, Mem16[&dwLoc04:word32] + Mem16[&dwLoc08:word32])
l10001023:
	return eax_17
fn10001000_exit:


PyObject * fn10001050(PyObject * ptrArg04, PyObject * ptrArg08)
// stackDelta: 4; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0008:[0..31]
// LiveOut: eax
// Trashed: eax
// Preserved:
fn10001050_entry:
	int32 dwLoc08
	int32 dwLoc04
l10001050:
	word32 eax_17 = PyArg_ParseTuple(ptrArg08, 0x10002150<32>, &dwLoc08, &dwLoc04)
	branch eax_17 != 0<32> l10001078
l10001078:
	return Py_BuildValue(0x1000214C<32>, Mem16[&dwLoc08:word32] - Mem16[&dwLoc04:word32])
l10001074:
	return eax_17
fn10001050_exit:


PyObject * fn100010A0(PyObject * ptrArg04, PyObject * ptrArg08)
// stackDelta: 4; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0008:[0..31]
// LiveOut: eax
// Trashed: eax
// Preserved:
fn100010A0_entry:
	int32 dwLoc08
	int32 dwLoc04
l100010A0:
	word32 eax_17 = PyArg_ParseTuple(ptrArg08, 0x10002158<32>, &dwLoc08, &dwLoc04)
	branch eax_17 != 0<32> l100010C8
l100010C8:
	return Py_BuildValue(0x1000214C<32>, CONVERT(CONVERT(Mem16[&dwLoc08:word32], word32, int64) /32 Mem16[&dwLoc04:word32], word32, int32))
l100010C4:
	return eax_17
fn100010A0_exit:


PyObject * fn100010F0(PyObject * ptrArg04, PyObject * ptrArg08)
// stackDelta: 4; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0008:[0..31]
// LiveOut: eax
// Trashed: eax
// Preserved:
fn100010F0_entry:
	real32 rLoc08
	real32 rLoc04
l100010F0:
	word32 eax_17 = PyArg_ParseTuple(ptrArg08, 0x10002160<32>, &rLoc08, &rLoc04)
	branch eax_17 != 0<32> l10001118
l10001118:
	return Py_BuildValue(0x10002168<32>, CONVERT(Mem16[&rLoc08:real32], real32, real64) / CONVERT(Mem16[&rLoc04:real32], real32, real64))
l10001114:
	return eax_17
fn100010F0_exit:


void initpySample()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO eax Top
// Preserved: esp
initpySample_entry:
l10001170:
	Py_InitModule4(0x10002174<32>, 0x10003010<32>, 0<32>, 0<32>, 0x3EF<32>)
	return
initpySample_exit:


word32 fn100011E9(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & ebxOut, ptr32 & esiOut, ptr32 & ediOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn10001388
// MayUse:  fs:[0..15] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax ebx edi esi
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: ebp esp
fn100011E9_entry:
	ptr32 fp
	word32 ebx
	word32 esi
	word32 edi
	selector fs
l100011E9:
	word32 eax_14
	word32 ebp_145 = 0<32>
	branch dwArg08 != 0<32> l10001202
l100011F4:
	branch Mem8[0x10003070<p32>:word32] <= 0<32> l10001233
l10001233:
	eax_14 = 0<32>
l100011FC:
	Mem18[0x10003070<p32>:word32] = Mem8[0x10003070<p32>:word32] - 1<32>
l10001202:
	Mem38[0x100033A4<p32>:word32] = Mem23[adjust_fdiv:word32]
	word32 esp_118 = fp - 16<i32>
	branch dwArg08 != 1<32> l100012E8
l100012E8:
	branch dwArg08 != 0<32> l1000137E
l100012F0:
l10001308:
	branch InterlockedCompareExchange(0x100033AC<p32>, 1<32>, 0<32>) != 0<32> l100012FD
l100012FD:
	Sleep(0x3E8<32>)
l10001312:
	branch Mem53[0x100033A8<p32>:word32] == 2<32> l10001326
l10001326:
	word32 eax_69 = _decode_pointer(Mem53[0x100033B4<p32>:word32])
	word32 esp_105 = fp - 16<i32>
	branch eax_69 == 0<32> l1000136F
l1000133B:
	word32 esp_81 = fp - 16<i32>
	word32 edi_82 = _decode_pointer(Mem67[0x100033B0<p32>:word32])
l10001350:
	edi_82 = edi_82 - 4<32>
	branch edi_82 >=u eax_69 l10001348
l10001348:
	word32 eax_89 = Mem78[edi_82:word32]
	branch eax_89 == 0<32> l10001350
l1000134E:
	word32 ecx_99
	word32 edx_285
	call eax_89 (retsize: 4;)
		uses: ecx:ecx_99,edx:edx_285
		defs: ecx:ecx_99,edx:edx_285,esp:esp_97
l10001357:
	word32 esp_102 = esp_81 - 4<i32>
	Mem103[esp_102:word32] = eax_69
	free(Mem103[esp_102:(ptr32 void)])
	word32 eax_106 = _encoded_null()
	Mem107[0x100033B0<p32>:word32] = eax_106
	Mem108[0x100033B4<p32>:word32] = eax_106
	esp_105 = esp_102 + 4<i32>
l1000136F:
	word32 esp_110 = esp_105 - 4<i32>
	Mem111[esp_110:word32] = 0<32>
	Mem114[esp_110 - 4<i32>:word32] = 0x100033AC<p32>
	Mem116[0x100033A8<p32>:word32] = 0<32>
	InterlockedExchange(Mem116[esp_110 - 4<i32>:(ptr32 LONG)], Mem116[esp_110:LONG])
	esp_118 = esp_110 + 4<32>
l1000131C:
	_amsg_exit(0x1F<32>)
l1000121C:
	word32 edi_124 = Mem38[Mem38[fs:0x18<32>:word32] + 4<i32>:word32]
l1000124B:
	word32 eax_136 = InterlockedCompareExchange(0x100033AC<p32>, edi_124, 0<32>)
	branch eax_136 != 0<32> l1000123A
l1000123A:
	branch eax_136 == edi_124 l10001255
l10001255:
	ebp_145 = 1<32>
l1000123E:
	Sleep(0x3E8<32>)
l10001253:
l10001258:
	branch Mem135[0x100033A8<p32>:word32] == 0<32> l1000126D
l1000126D:
	Mem166[0x100033A8<p32>:word32] = 1<32>
	esp_118 = fp - 16<i32>
	branch _initterm_e(0x100020A0<32>, 0x100020A8<32>) == 0<32> l10001293
l10001293:
	_initterm(0x10002098<32>, 0x1000209C<32>)
	Mem181[0x100033A8<p32>:word32] = 2<32>
	branch ebp_145 != 0<32> l100012B6
l100012AE:
	InterlockedExchange(0x100033AC<p32>, ebp_145)
l100012B6:
	esp_118 = fp - 16<i32>
	branch Mem196[0x100033B8<p32>:word32] == 0<32> l100012DD
l100012BF:
	esp_118 = fp - 16<i32>
	word32 edi_214
	branch fn10001742(InterlockedCompareExchange, 0x100033AC<p32>, 2<32>, out edi_214) == 0<32> l100012DD
l100012CE:
	word32 ecx_240
	word32 edx_242
	call Mem233[0x100033B8<p32>:word32] (retsize: 4;)
		uses: ecx:ecx_240,edx:edx_242,Stack +0004:dwArg04,Stack +0008:edi_214,Stack +000C:dwArg0C,Stack +0024:dwArg04,Stack +0028:dwArg08,Stack +002C:dwArg0C
		defs: ecx:ecx_240,edx:edx_242,esp:esp_238
l100012DD:
	Mem246[0x10003070<p32>:word32] = Mem244[0x10003070<p32>:word32] + 1<32>
l1000137E:
	eax_14 = 1<32>
l1000128C:
	eax_14 = 0<32>
l10001381:
	word32 esp_261 = esp_118 + 4<i32>
	edi = Mem258[esp_118:word32]
	esi = Mem258[esp_261:word32]
	ebx = Mem258[esp_261 + 4<i32>:word32]
l10001384:
	ebxOut = ebx
	esiOut = esi
	ediOut = edi
	return eax_14
fn100011E9_exit:
l10001264:
	_amsg_exit(0x1F<32>)


word32 fn10001388(word32 ecx, word32 edx, word32 ebx, word32 esi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      DllMain
// MayUse:  ebx:[0..31] ecx:[0..31] edi:[0..31] edx:[0..31] esi:[0..31] fs:[0..15]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn10001388_entry:
	ptr32 fp
	word32 dwLoc0C
l10001388:
	word32 ebp_13 = fn100017E8(ebx, esi, edi, dwLoc0C, 0x10<32>)
	word32 ebx_113 = Mem7[ebp_13 + 8<i32>:word32]
	Mem25[ebp_13 - 28<i32>:word32] = 1<32>
	Mem27[ebp_13 - 4<i32>:word32] = 0<32>
	Mem28[0x10003008<p32>:word32] = edx
	Mem29[ebp_13 - 4<i32>:word32] = 1<32>
	word32 esp_100 = fp - 8<i32>
	word32 edi_107 = ecx
	word32 esi_110 = edx
	branch edx != 0<32> l100013C3
l100013B3:
	branch Mem29[0x10003070<p32>:word32] != 0<32> l100013C3
l100013C3:
	branch edx == 1<32> l100013CC
l100013C7:
	branch edx != 2<32> l100013FA
l100013CC:
	branch Mem29[0x100020CC<p32>:word32] == 0<32> l100013DD
l100013D5:
	Mem74[ebp_13 - 28<i32>:word32] = fn00000000(ebx_113, edx, ecx)
l100013DD:
	branch Mem76[ebp_13 - 28<i32>:word32] == 0<32> l1000147A
l100013E7:
	word32 esp_80 = esp_100 - 4<i32>
	Mem82[esp_80:word32] = ecx
	Mem85[esp_80 - 4<i32>:word32] = edx
	Mem88[esp_80 - 8<i32>:word32] = ebx_113
	word32 eax_90 = fn100011E9(Mem88[esp_80 - 8<i32>:word32], Mem88[esp_80 - 4<i32>:word32], Mem88[esp_80:word32], out ebx_113, out esi_110, out edi_107)
	Mem101[ebp_13 - 28<i32>:word32] = eax_90
	esp_100 = esp_80 + 4<32>
	branch eax_90 == 0<32> l1000147A
l100013FA:
	word32 esp_106 = esp_100 - 4<i32>
	Mem108[esp_106:word32] = edi_107
	Mem111[esp_106 - 4<i32>:word32] = esi_110
	Mem114[esp_106 - 8<i32>:word32] = ebx_113
	word32 eax_115 = fn100017C6(Mem114[esp_106 - 8<i32>:word32], Mem114[esp_106 - 4<i32>:word32])
	Mem122[ebp_13 - 28<i32>:word32] = eax_115
	esp_100 = esp_106 + 4<32>
	branch esi_110 != 1<32> l1000142E
l1000140A:
	branch eax_115 != 0<32> l1000142E
l1000140E:
	Mem129[esp_106:word32] = edi_107
	Mem131[esp_106 - 4<i32>:word32] = eax_115
	Mem133[esp_106 - 8<i32>:word32] = ebx_113
	fn100017C6(Mem133[esp_106 - 8<i32>:word32], Mem133[esp_106 - 4<i32>:word32])
	Mem141[esp_106:word32] = edi_107
	Mem143[esp_106 - 4<i32>:word32] = 0<32>
	Mem145[esp_106 - 8<i32>:word32] = ebx_113
	fn100011E9(Mem145[esp_106 - 8<i32>:word32], Mem145[esp_106 - 4<i32>:word32], Mem145[esp_106:word32], out ebx_113, out esi_110, out edi_107)
	esp_100 = esp_106 + 4<32>
	branch Mem145[0x100020CC<p32>:word32] == 0<32> l1000142E
l10001428:
	fn00000000(ebx_113, 0<32>, edi_107)
l1000142E:
	branch esi_110 == 0<32> l10001437
l10001432:
	branch esi_110 != 3<32> l1000147A
l10001437:
	word32 esp_184 = esp_100 - 4<i32>
	Mem187[esp_184:word32] = edi_107
	Mem190[esp_184 - 4<i32>:word32] = esi_110
	Mem194[esp_184 - 8<i32>:word32] = ebx_113
	word32 ebx_198
	word32 esi_200
	word32 edi_201
	word32 eax_197 = fn100011E9(Mem194[esp_184 - 8<i32>:word32], Mem194[esp_184 - 4<i32>:word32], Mem194[esp_184:word32], out ebx_198, out esi_200, out edi_201)
	esp_100 = esp_184 + 4<32>
	branch eax_197 != 0<32> l10001446
l10001443:
	Mem214[ebp_13 - 28<i32>:word32] = Mem194[ebp_13 - 28<i32>:word32] & eax_197
l10001446:
	branch Mem218[ebp_13 - 28<i32>:word32] == 0<32> l1000147A
l1000144C:
	branch Mem218[0x100020CC<p32>:word32] == 0<32> l1000147A
l10001455:
	Mem247[ebp_13 - 28<i32>:word32] = fn00000000(ebx_198, esi_200, edi_201)
l100013BB:
	Mem248[ebp_13 - 28<i32>:word32] = 0<32>
l1000147A:
	Mem253[ebp_13 - 4<i32>:word32] = 0<32>
	Mem256[ebp_13 - 4<i32>:word32] = 0xFFFFFFFE<32>
	fn10001493()
	word32 eax_257 = Mem256[ebp_13 - 28<i32>:word32]
	fn1000182D(ebp_13, Mem256[esp_100 + -4<i32>:word32])
	return eax_257
fn10001388_exit:


void fn10001493()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn10001388
// MayUse: 
// LiveOut:
// Trashed: Top
// Preserved: esp
fn10001493_entry:
l10001493:
	Mem4[0x10003008<p32>:word32] = 0xFFFFFFFF<32>
	return
fn10001493_exit:


BOOL DllMain(HANDLE hModule, DWORD dwReason, LPVOID lpReserved)
// stackDelta: 16; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebx:[0..31] edi:[0..31] esi:[0..31] fs:[0..15] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: eax
// Preserved:
DllMain_entry:
	word32 ebx
	word32 esi
	word32 edi
l1000149E:
	branch dwReason != 1<32> l100014AA
l100014A5:
	fn10001864()
l100014AA:
	return fn10001388(lpReserved, dwReason, ebx, esi, edi)
DllMain_exit:


word32 fn100015CF(word32 ebx, word32 esi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn1000166E
// MayUse:  ebx:[0..31] edi:[0..31] esi:[0..31] fs:[0..15]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi esi Top
// Preserved: esp
fn100015CF_entry:
	ptr32 fp
	word32 dwLoc0C
l100015CF:
	word32 eax_111
	word32 esp_80
	word32 ebp_13 = fn100017E8(ebx, esi, edi, dwLoc0C, 0x14<32>)
	word32 eax_22 = _decode_pointer(Mem7[0x100033B4<p32>:word32])
	Mem25[ebp_13 - 28<i32>:word32] = eax_22
	branch eax_22 != 0xFFFFFFFF<32> l100015FE
l100015FE:
	lock(8<32>)
	word32 ecx_35 = Mem29[esp_30:word32]
	Mem38[ebp_13 - 4<i32>:word32] = 0<32>
	word32 v14_41 = Mem38[0x100033B4<p32>:word32]
	Mem45[ebp_13 - 28<i32>:word32] = _decode_pointer(Mem43[esp_30:(ptr32 void)])
	word32 v15_46 = Mem45[0x100033B0<p32>:word32]
	Mem50[ebp_13 - 32<i32>:word32] = _decode_pointer(Mem48[esp_30 - 4<i32>:(ptr32 void)])
	word32 v16_57 = Mem56[ebp_13 + 8<i32>:word32]
	Mem61[ebp_13 - 36<i32>:word32] = __dllonexit(Mem59[esp_30 - 16<i32>:_onexit_t], Mem59[esp_30 - 12<i32>:(ptr32 (ptr32 PVFV))], Mem59[esp_30 - 8<i32>:(ptr32 (ptr32 PVFV))])
	Mem71[0x100033B4<p32>:word32] = encode_pointer(ecx_35, Mem61[ebp_13 - 28<i32>:word32], v16_57, ebp_13 - 28<i32>, ebp_13 - 32<i32>, v15_46, v14_41)
	Mem82[0x100033B0<p32>:word32] = encode_pointer(Mem71[ebp_13 - 32<i32>:word32])
	Mem83[ebp_13 - 4<i32>:word32] = 0xFFFFFFFE<32>
	fn10001665()
	esp_80 = esp_75 + 0x1C<32>
	eax_111 = Mem83[ebp_13 - 36<i32>:word32]
l100015F2:
	eax_111 = _onexit(Mem25[ebp_13 + 8<i32>:word32])
	esp_80 = fp - 8<i32>
l1000165F:
	fn1000182D(ebp_13, Mem95[esp_80 + -4<i32>:word32])
	return eax_111
fn100015CF_exit:


void fn10001665()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn100015CF
// MayUse: 
// LiveOut:
// Trashed: ecx Top
// Preserved: esp
fn10001665_entry:
l10001665:
	unlock()
	return
fn10001665_exit:


void fn1000166E(word32 ebx, word32 esi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebx:[0..31] edi:[0..31] esi:[0..31] fs:[0..15]
// LiveOut:
// Trashed: SCZO eax ebp ebx ecx edi esi Top
// Preserved: esp
fn1000166E_entry:
l1000166E:
	fn100015CF(ebx, esi, edi)
	return
fn1000166E_exit:


void fn10001680()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO eax Top
// Preserved: edi esi esp
fn10001680_entry:
l10001680:
	word32 esi_13 = 0x100021D8<p32>
	branch true l100016A1
l10001692:
	branch Mem9[esi_13:word32] == 0<32> l1000169A
l10001698:
	fn00000000()
l1000169A:
	esi_13 = esi_13 + 4<32>
	branch esi_13 <u 0x100021D8<p32> l10001692
l100016A1:
	return
fn10001680_exit:


word32 fn100016D0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn10001742
// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn100016D0_entry:
l100016D0:
	branch Mem0[dwArg04:word16] == 0x5A4D<16> l100016DE
l100016DE:
	word32 eax_9 = Mem0[dwArg04 + 60<i32>:word32] + dwArg04
	branch Mem0[eax_9:word32] != 0x4550<32> l100016DB
l100016EB:
	return CONVERT(CONVERT(Mem0[eax_9 + 24<i32>:word16] == 0x10B<16>, bool, int8), int8, uint32)
l100016DB:
	return 0<32>
fn100016D0_exit:


word32 fn10001700(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn10001742
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx edx Top
// Preserved: ebx edi esi esp
fn10001700_entry:
l10001700:
	word32 ecx_7 = Mem0[dwArg04 + 60<i32>:word32] + dwArg04
	word32 esi_15 = CONVERT(Mem14[ecx_7 + 6<i32>:word16], word16, word32)
	word32 edx_16 = 0<32>
	word32 eax_22 = CONVERT(Mem0[ecx_7 + 20<i32>:word16], word16, word32) + 24<i32> + ecx_7
	branch esi_15 <=u 0<32> l1000173C
l1000171E:
l10001722:
	word32 ecx_28 = Mem21[eax_22 + 12<i32>:word32]
	branch dwArg08 <u ecx_28 l10001732
l10001729:
	branch dwArg08 <u Mem21[eax_22 + 8<i32>:word32] + ecx_28 l1000173E
l10001732:
	edx_16 = edx_16 + 1<32>
	eax_22 = eax_22 + 0x28<32>
	branch edx_16 <u esi_15 l10001722
l1000173C:
	eax_22 = 0<32>
l1000173E:
	return eax_22
fn10001700_exit:


word32 fn10001742(word32 ebx, word32 esi, word32 edi, ptr32 & ediOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn100011E9
// MayUse:  ebx:[0..31] edi:[0..31] esi:[0..31] fs:[0..15]
// LiveOut: eax edi
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn10001742_entry:
	word32 dwLoc0C
l10001742:
	word32 eax_59
	word32 ebp_13 = fn100017E8(ebx, esi, edi, dwLoc0C, 8<32>)
	Mem19[ebp_13 - 4<i32>:word32] = 0<32>
	word32 dwLoc0C_84 = 0x10000000<p32>
	branch fn100016D0(0x10000000<p32>) == 0<32> l1000179F
l10001762:
	word32 eax_36 = Mem24[ebp_13 + 8<i32>:word32]
	dwLoc0C_84 = eax_36 - 0x10000000<p32>
	word32 eax_43 = fn10001700(0x10000000<p32>, eax_36 - 0x10000000<p32>)
	branch eax_43 == 0<32> l1000179F
l1000179F:
	Mem58[ebp_13 - 4<i32>:word32] = 0xFFFFFFFE<32>
	eax_59 = 0<32>
l10001774:
	eax_59 = ~(Mem42[eax_43 + 36<i32>:word32] >>u 0x1F<32>) & 1<32>
	Mem68[ebp_13 - 4<i32>:word32] = 0xFFFFFFFE<32>
l100017A8:
	ediOut = fn1000182D(ebp_13, dwLoc0C_84)
	return eax_59
fn10001742_exit:


word32 fn100017C6(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn10001388
// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax Top
// Preserved: esp
fn100017C6_entry:
l100017C6:
	branch dwArg08 != 1<32> l100017E0
l100017CD:
	branch Mem0[0x100020CC<p32>:word32] != 0<32> l100017E0
l100017D6:
	DisableThreadLibraryCalls(dwArg04)
l100017E0:
	return 1<32>
fn100017C6_exit:


word32 fn100017E8(word32 ebx, word32 esi, word32 edi, word32 dwArg00, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn10001388
//      fn100015CF
//      fn10001742
// MayUse:  ebx:[0..31] edi:[0..31] esi:[0..31] fs:[0..15] Stack +0000:[0..31] Stack +0008:[0..31]
// LiveOut: ebp
// Trashed: SCZO eax ebp Top
// Preserved: esp
fn100017E8_entry:
	ptr32 fp
	selector fs
l100017E8:
	word32 esp_14 = fp - 8<i32> - dwArg08
	Mem17[esp_14 - 4<i32>:word32] = ebx
	Mem20[esp_14 - 8<i32>:word32] = esi
	Mem23[esp_14 - 12<i32>:word32] = edi
	Mem32[esp_14 - 16<i32>:word32] = Mem23[0x10003000<p32>:word32] ^ fp + 8<i32>
	Mem36[esp_14 - 20<i32>:word32] = dwArg00
	Mem41[fs:0<32>:word32] = fp - 8<i32>
	return fp + 8<i32>
fn100017E8_exit:


word32 fn1000182D(word32 ebp, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn10001388
//      fn100015CF
//      fn10001742
// MayUse:  ebp:[0..31] fs:[0..15] Stack +0000:[0..31]
// LiveOut: edi
// Trashed: ebp ebx ecx edi esi esp Top
// Preserved:
fn1000182D_entry:
	selector fs
	word32 dwArg08
l1000182D:
	Mem8[fs:0x00000000<p32>:word32] = Mem0[ebp - 16<i32>:word32]
	Mem22[ebp:word32] = dwArg00
	return dwArg08
fn1000182D_exit:


void fn10001864()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      DllMain
// MayUse: 
// LiveOut:
// Trashed: SCZO eax Top
// Preserved: ebp ebx edi esi esp
fn10001864_entry:
	LARGE_INTEGER tLoc14
	struct _FILETIME tLoc0C
l10001864:
	word32 eax_9 = Mem6[0x10003000<p32>:word32]
	Mem11[&tLoc0C:word32] = 0<32>
	Mem14[&tLoc0C + 4<i32>:word32] = 0<32>
	branch eax_9 == 0xBB40E64E<32> l10001894
l10001887:
	branch (eax_9 & 0xFFFF0000<32>) == 0<32> l10001894
l10001894:
	GetSystemTimeAsFileTime(&tLoc0C)
	word32 esi_46 = Mem37[&tLoc0C + 4<i32>:word32] ^ Mem37[&tLoc0C:word32] ^ GetCurrentProcessId() ^ GetCurrentThreadId() ^ GetTickCount()
	QueryPerformanceCounter(&tLoc14)
	word32 esi_54 = esi_46 ^ (Mem49[&tLoc14 + 4<i32>:word32] ^ Mem49[&tLoc14:word32])
	branch esi_54 != 0xBB40E64E<32> l100018DA
l100018DA:
	branch (esi_54 & 0xFFFF0000<32>) != 0<32> l100018E5
l100018DE:
	esi_54 = esi_54 | esi_54 << 0x10<32>
l100018D3:
	esi_54 = 0xBB40E64F<32>
l100018E5:
	Mem69[0x10003000<p32>:word32] = esi_54
	Mem71[0x10003004<p32>:word32] = ~esi_54
l1000188B:
	Mem76[0x10003004<p32>:word32] = ~eax_9
l100018F4:
	return
fn10001864_exit:


