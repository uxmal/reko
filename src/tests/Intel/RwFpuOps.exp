// fn0C00_0000
// Return size: 2
// Mem0:Global memory
// fp:fp
// sp:sp
// v3:v3
// ss:ss
// v5:v5
// SCZO:Flags
// return address size: 2
void fn0C00_0000()
fn0C00_0000_entry:
	// succ:  l0C00_0000
l0C00_0000:
	sp = fp
	v3 = 0x0320
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = v3
	v5 = 0x0300
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = v5
	call fn0C00_0010 (retsize: 2;)
	call fn0C00_0037 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:

// fn0C00_0010
// Return size: 2
// Mem0:Global memory
// fp:fp
// sp:sp
// bp:bp
// v4:v4
// ss:ss
// bx:bx
// rLoc1:FPU stack
// ds:ds
// rLoc2:FPU stack
// return address size: 2
void fn0C00_0010()
fn0C00_0010_entry:
	// succ:  l0C00_0010
l0C00_0010:
	sp = fp
	v4 = bp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = v4
	bp = sp
	bx = Mem0[ss:bp + 0x0004:word16]
	rLoc1 = Mem0[ds:bx:real64]
	rLoc1 = rLoc1 * rLoc1
	rLoc2 = Mem0[ds:bx + 0x0008:real64]
	rLoc2 = rLoc2 * rLoc2
	rLoc1 = rLoc1 + rLoc2
	rLoc2 = Mem0[ds:bx + 0x0010:real64]
	rLoc2 = rLoc2 * rLoc2
	rLoc1 = rLoc1 + rLoc2
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:real64] = rLoc1
	rLoc1 = (real64) Mem0[ds:bx + 0x0020:int16]
	Mem0[ds:bx + 0x0028:real64] = rLoc1
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0C00_0010_exit
fn0C00_0010_exit:

// fn0C00_0037
// Return size: 2
// Mem0:Global memory
// fp:fp
// sp:sp
// rLoc1:FPU stack
// ds:ds
// return address size: 2
void fn0C00_0037()
fn0C00_0037_entry:
	// succ:  l0C00_0037
l0C00_0037:
	sp = fp
	rLoc1 = 0.0
	Mem0[ds:0x0400:real64] = rLoc1
	rLoc1 = 1.0
	Mem0[ds:0x0408:int32] = (int32) rLoc1
	return
	// succ:  fn0C00_0037_exit
fn0C00_0037_exit:

