// fn0C00_0000
// Return size: 2
// Mem0:Global memory
// fp:fp
// sp:sp
// rLoc1:FPU stack
// ds:ds
// rLoc2:FPU stack
// v6:v6
// ss:ss
// ax:ax
// v9:v9
// SCZO:Flags
// return address size: 2
void fn0C00_0000()
fn0C00_0000_entry:
	// succ:  l0C00_0000
l0C00_0000:
	sp = fp
	rLoc1 = (real64) Mem0[ds:0x0300:real32]
	rLoc2 = (real64) Mem0[ds:0x0304:real32]
	v6 = 0x0308
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = v6
	call fn0C00_0024 (retsize: 2; FPU: 2;)
	rLoc1 = 0.0
	Mem0[ds:0x030C:real32] = (real32) rLoc1
	ax = Mem0[ds:0x0308:word16]
	v9 = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = v9
	call fn0C00_0031 (retsize: 2;)
	Mem0[ds:0x030C:real32] = (real32) rLoc1
	sp = sp + 0x0004
	SCZO = cond(sp)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:

// fn0C00_0024
// Return size: 2
// Mem0:Global memory
// fp:fp
// sp:sp
// bp:bp
// v4:v4
// ss:ss
// bx:bx
// rArg0:FPU stack
// ds:ds
// rArg1:FPU stack
// return address size: 2
void fn0C00_0024()
fn0C00_0024_entry:
	// succ:  l0C00_0024
l0C00_0024:
	sp = fp
	v4 = bp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = v4
	bp = sp
	bx = Mem0[ss:bp + 0x0004:word16]
	Mem0[ds:bx:real32] = (real32) rArg0
	Mem0[ds:bx + 0x0004:real32] = (real32) rArg1
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0C00_0024_exit
fn0C00_0024_exit:

// fn0C00_0031
// Return size: 2
// Mem0:Global memory
// fp:fp
// sp:sp
// bp:bp
// v4:v4
// ss:ss
// bx:bx
// rLoc1:FPU stack
// ds:ds
// return address size: 2
void fn0C00_0031()
fn0C00_0031_entry:
	// succ:  l0C00_0031
l0C00_0031:
	sp = fp
	v4 = bp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = v4
	bp = sp
	bx = Mem0[ss:bp + 0x0004:word16]
	rLoc1 = (real64) Mem0[ds:bx:real32]
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0C00_0031_exit
fn0C00_0031_exit:

