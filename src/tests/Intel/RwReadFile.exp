// fn0C00_0000
// Return size: 2
// Mem0:Global memory
// fp:fp
// sp:sp
// v3:v3
// ss:ss
// ds:ds
// dx:dx
// bx:bx
// cx:cx
// ax:ax
// SZO:Flags
// C:Flags
// SO:Flags
// al:al
// return address size: 2
void fn0C00_0000()
fn0C00_0000_entry:
	// succ:  l0C00_0000
l0C00_0000:
	sp = fp
	v3 = 0x0D00
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = v3
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	dx = 0x3000
	bx = Mem0[ds:0x0300:word16]
	cx = 0x0100
	call fn0C00_0023 (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GE,SO) l0C00_001A
	// succ:  l0C00_0015 l0C00_001A
l0C00_0015:
	al = 0x01
	call fn0C00_001F (retsize: 2;)
	// succ:  l0C00_001A
l0C00_001A:
	Mem0[ds:0x0302:word16] = ax
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
// fn0C00_001F
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// ah:ah
// al:al
// return address size: 0
void fn0C00_001F()
fn0C00_001F_entry:
	// succ:  l0C00_001F
l0C00_001F:
	sp = fp
	ah = 0x4C
	msdos_terminate(al)
fn0C00_001F_exit:
// fn0C00_0023
// Return size: 2
// Mem0:Global memory
// fp:fp
// sp:sp
// ah:ah
// C:Flags
// bx:bx
// cx:cx
// ds:ds
// dx:dx
// ds_dx:Sequence ds:dx
// ax:ax
// return address size: 2
void fn0C00_0023()
fn0C00_0023_entry:
	// succ:  l0C00_0023
l0C00_0023:
	sp = fp
	ah = 0x3F
	C = msdos_read_file(bx, cx, ds_dx, out ax)
	branch Test(UGE,C) l0C00_002C
	// succ:  l0C00_0029 l0C00_002C
l0C00_0029:
	ax = 0xFFFF
	// succ:  l0C00_002C
l0C00_002C:
	return
	// succ:  fn0C00_0023_exit
fn0C00_0023_exit:
