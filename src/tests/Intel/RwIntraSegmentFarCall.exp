// fn0C00_0000
// Return size: 2
// Mem0:Global memory
// fp:fp
// sp:sp
// v3:v3
// ss:ss
// v5:v5
// v6:v6
// SCZO:Flags
// v8:v8
// v9:v9
// v10:v10
// return address size: 2
void fn0C00_0000()
fn0C00_0000_entry:
	// succ:  l0C00_0000
l0C00_0000:
	sp = fp
	v3 = 0x0D00
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = v3
	v5 = 0x0300
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = v5
	v6 = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = v6
	sp = sp - 0x0002
	call fn0C00_0020 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v8 = 0x0D00
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = v8
	v9 = 0x0304
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = v9
	v10 = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = v10
	call fn0C00_002E (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
// fn0C00_0020
// Return size: 4
// Mem0:Global memory
// fp:fp
// sp:sp
// bp:bp
// v4:v4
// ss:ss
// es_bx:Sequence es:bx
// ax:ax
// bx:bx
// es:es
// v10:v10
// SCZO:Flags
// return address size: 4
void fn0C00_0020()
fn0C00_0020_entry:
	// succ:  l0C00_0020
l0C00_0020:
	sp = fp
	v4 = bp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = v4
	bp = sp
	es_bx = Mem0[ss:bp + 0x0006:segptr32]
	ax = Mem0[ss:bp + 0x000A:word16]
	v10 = Mem0[es:bx:word16] + ax
	Mem0[es:bx:word16] = v10
	SCZO = cond(v10)
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0C00_0020_exit
fn0C00_0020_exit:
// fn0C00_002E
// Return size: 4
// Mem0:Global memory
// fp:fp
// sp:sp
// bp:bp
// v4:v4
// ss:ss
// es_bx:Sequence es:bx
// ax:ax
// bx:bx
// es:es
// v10:v10
// SCZO:Flags
// return address size: 4
void fn0C00_002E()
fn0C00_002E_entry:
	// succ:  l0C00_002E
l0C00_002E:
	sp = fp
	v4 = bp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = v4
	bp = sp
	es_bx = Mem0[ss:bp + 0x0006:segptr32]
	ax = Mem0[ss:bp + 0x000A:word16]
	v10 = Mem0[es:bx:word16] - ax
	Mem0[es:bx:word16] = v10
	SCZO = cond(v10)
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0C00_002E_exit
fn0C00_002E_exit:
