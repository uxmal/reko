// fn0C00_0000
// Return size: 2
// Mem0:Global memory
// fp:fp
// sp:sp
// di:di
// v4:v4
// ss:ss
// ax:ax
// ds:ds
// return address size: 2
void fn0C00_0000()
fn0C00_0000_entry:
	// succ:  l0C00_0000
l0C00_0000:
	sp = fp
	call fn0C00_000F (retsize: 2;)
	v4 = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = v4
	ax = 0x0100
	call fn0C00_0014 (retsize: 2;)
	Mem0[ds:0x0300:word16] = ax
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	// succ:  l0C00_000E_thunk_fn0C00_000F
l0C00_000E_thunk_fn0C00_000F:
	call fn0C00_000F (retsize: 2;)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
// fn0C00_000F
// Return size: 2
// Mem0:Global memory
// fp:fp
// sp:sp
// di:di
// ds:ds
// return address size: 2
void fn0C00_000F()
fn0C00_000F_entry:
	// succ:  l0C00_000F
l0C00_000F:
	sp = fp
	Mem0[ds:di:word16] = 0x0000
	return
	// succ:  fn0C00_000F_exit
fn0C00_000F_exit:
// fn0C00_0014
// Return size: 2
// Mem0:Global memory
// fp:fp
// sp:sp
// di:di
// SZO:Flags
// C:Flags
// ax:ax
// return address size: 2
void fn0C00_0014()
fn0C00_0014_entry:
	// succ:  l0C00_0014
l0C00_0014:
	sp = fp
	di = di ^ di
	SZO = cond(di)
	C = false
	ax = ax - 0x0001
	SZO = cond(ax)
	return
	// succ:  fn0C00_0014_exit
fn0C00_0014_exit:
