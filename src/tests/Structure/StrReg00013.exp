// fn0C00_0000
// Return size: 0
void fn0C00_0000(selector ds)
fn0C00_0000_entry:
	Mem8[0x0C00:0x0001:word16] = 0x0800
	Mem9[0x0800:0x5422:word16] = ds
	Mem16[0x0800:0x0066:word16] = Mem9[0x0800:0x5420:word16]
	selector es_19 = Mem16[0x0800:0x5422:selector]
	word16 bx_20
	msdos_resize_memory_block(es_19, 0xFFFF, out bx_20)
	Mem25[0x0800:0x53CD:word16] = Mem16[0x0800:0x5422:word16] + bx_20
	word16 bx_27
	msdos_resize_memory_block(es_19, bx_20, out bx_27)
	Mem29[0x0800:0x0400:word16] = 0x1758
	fn0C00_0288()
	word16 sp_14 = (word16) (DPB(esp, fp, 0) & 0x0000FFFF)
	Mem34[ss:sp_14 - 0x0002:word16] = cs
	msdos_set_interrupt_vector(0x24, SEQ(Mem34[ss:sp_14 - 0x0002:selector], 0x0295))
	Mem43[ss:sp_14 - 0x0002:word16] = 0x0800
	selector ds_44 = Mem43[ss:sp_14 - 0x0002:selector]
	fn0C00_0262()
	fn0C00_0260()
	branch Mem43[ds_44:0x541E:word16] == 0x0000 l0C00_0062
	goto l0C00_005F
	// succ:  l0C00_005F l0C00_0062
l0C00_0000:
l0C00_005F:
	fn0C00_028E()
	// succ:  l0C00_0062
l0C00_0062:
	fn0C00_027E()
	fn0C00_028F(0x53F4, ds_44)
	Mem51[ds_44:0x53FE:word16] = 0x0001
	fn0C00_0261()
	Mem52[ds_44:0x53C2:word16] = 0x4AF3
	fn0C00_0283(0x5447, ds_44)
	branch fn0C00_0271(ds_44) l0C00_008D
	// succ:  l0C00_0086 l0C00_008D
l0C00_0086:
	branch fn0C00_0267(ds_44) l0C00_0251
	// succ:  l0C00_008D l0C00_0251
l0C00_008D:
	branch Mem52[ds_44:0x81B0:word16] == 0x0000 l0C00_009B
	// succ:  l0C00_0094 l0C00_009B
l0C00_0094:
	branch Mem52[ds_44:0x5404:word16] < 0x0020 l0C00_008D
	// succ:  l0C00_009B l0C00_008D
l0C00_009B:
	fn0C00_0283(0x5450, ds_44)
	Mem68[ds_44:0x5404:word16] = 0x0000
	fn0C00_0259()
	branch Mem68[ds_44:0x53B8:word16] < 0x0004 l0C00_0251
	// succ:  l0C00_00B4 l0C00_0251
l0C00_00B4:
	word16 bx_71 = Mem68[ds_44:0x53B8:word16]
	Mem73[ds_44:0x53BE:word16] = bx_71 - 0x0001
	Mem76[ds_44:0x53C0:word16] = bx_71 - 0x0002
	fn0C00_025A(Mem76[ds_44:0x53C0:word16], ds_44)
	selector es_78 = Mem76[ds_44:0x53C2:selector]
	Mem82[ss:sp_14 - 0x0002:word16] = 0x6C34
	word16 di_79 = 0x0000
	selector ds_83 = Mem82[ss:sp_14 - 0x0002:selector]
	word16 si_87 = 0x0000
	word16 cx_90 = 0x4000
	// succ:  l0C00_00D8
l0C00_00D8:
	branch cx_90 == 0x0000 l0C00_00DB
	// succ:  l0C00_00D8_1 l0C00_00DB
l0C00_00D8_1:
	Mem95[es_78:di_79:word32] = Mem82[ds_83:si_87:word32]
	si_87 = si_87 + 0x0004
	di_79 = di_79 + 0x0004
	cx_90 = cx_90 - 0x0001
	goto l0C00_00D8
	// succ:  l0C00_00D8
l0C00_00DB:
	Mem101[ss:sp_14 - 0x0002:word16] = 0x0800
	selector ds_102 = Mem101[ss:sp_14 - 0x0002:selector]
	fn0C00_025A(Mem101[ds_102:0x53BE:word16], ds_102)
	selector es_105 = Mem101[ds_102:0x53C2:selector]
	Mem109[ss:sp_14 - 0x0002:word16] = 0x5D02
	word16 di_106 = 0x0000
	selector ds_110 = Mem109[ss:sp_14 - 0x0002:selector]
	word16 si_114 = 0x0000
	word16 cx_117 = 0x4000
	// succ:  l0C00_00F5
l0C00_00F5:
	branch cx_117 == 0x0000 l0C00_00F8
	// succ:  l0C00_00F5_1 l0C00_00F8
l0C00_00F5_1:
	Mem122[es_105:di_106:word32] = Mem109[ds_110:si_114:word32]
	si_114 = si_114 + 0x0004
	di_106 = di_106 + 0x0004
	cx_117 = cx_117 - 0x0001
	goto l0C00_00F5
	// succ:  l0C00_00F5
l0C00_00F8:
	Mem128[ss:sp_14 - 0x0002:word16] = 0x0800
	selector ds_129 = Mem128[ss:sp_14 - 0x0002:selector]
	Mem133[ds_129:0x7E52:word16] = Mem128[ds_129:0x53BE:word16]
	word16 ax_134 = Mem133[ds_129:0x53C2:word16]
	Mem135[ds_129:0x7E50:word16] = ax_134
	Mem136[ds_129:0x5380:word16] = ax_134
	word16 ax_137 = Mem136[ds_129:0x53B8:word16]
	Mem148[ds_129:0x53BC:word16] = ax_137 - 0x0002
	fn0C00_025F()
	fn0C00_0282()
	word16 ax_138 = ax_137 - 0x0002
	branch Mem148[ds_129:0x54A6:word16] == 0x0000 l0C00_0144
	// succ:  l0C00_0128 l0C00_0144
l0C00_0128:
	fn0C00_027D()
	word32 eax_266 = (int32) Mem148[ds_129:0x5418:word16]
	word32 v34_276 = Mem148[ds_129:0x6FF0:word32] - (word32) (eax_266 *s 0x0000F000)
	Mem277[ds_129:0x6FF0:word32] = v34_276
	Mem281[ds_129:0x6FF4:word32] = Mem277[ds_129:0x6FF4:word32] - 0x0000F000 - (v34_276 <u 0x00000000)
	ax_138 = (word16) (eax_266 *s 0x0000F000) (alias)
	// succ:  l0C00_0144
l0C00_0144:
	fn0C00_0265()
	// succ:  l0C00_0147
l0C00_0147:
	branch Mem148[ds_129:0x81B0:word16] == 0x0000 l0C00_0155
	// succ:  l0C00_014E l0C00_0155
l0C00_014E:
	branch Mem148[ds_129:0x5404:word16] < 0x0046 l0C00_0147
	// succ:  l0C00_0155 l0C00_0147
l0C00_0155:
	fn0C00_028F(0x53E7, ds_129)
	fn0C00_028B()
	fn0C00_027F()
	fn0C00_0280()
	fn0C00_027B()
	fn0C00_0266()
	// succ:  l0C00_016A
l0C00_016A:
	branch (Mem148[ds_129:0x919E:word16] & 0x01FF) == 0x0000 l0C00_01B7
	// succ:  l0C00_0172 l0C00_01B7
l0C00_0172:
	fn0C00_0289()
	branch Mem148[ds_129:0x0480:word16] == 0x0000 l0C00_0182
	// succ:  l0C00_017C l0C00_0182
l0C00_017C:
	fn0C00_028D()
	goto l0C00_0188
	// succ:  l0C00_0188
l0C00_0182:
	Mem263[ds_129:0xC3CF:word16] = 0x0000
	// succ:  l0C00_0188
l0C00_0188:
	branch Mem148[ds_129:0x542C:word16] != 0x0000 l0C00_0198
	// succ:  l0C00_018F l0C00_0198
l0C00_018F:
	fn0C00_0257()
	fn0C00_0264()
	goto l0C00_01A4
	// succ:  l0C00_01A4
l0C00_0198:
	Mem262[ds_129:0x540C:word32] = 0x00000000
	fn0C00_0264()
	// succ:  l0C00_01A4
l0C00_01A4:
	branch Mem148[ds_129:0xC3CF:word16] == 0x0000 l0C00_01B1
	// succ:  l0C00_01AB l0C00_01B1
l0C00_01AB:
	Mem261[ds_129:0x0412:word16] = 0x0000
	// succ:  l0C00_01B1
l0C00_01B1:
	Mem260[ds_129:0x5376:word16] = 0x0000
	// succ:  l0C00_01B7
l0C00_01B7:
	fn0C00_027C()
	fn0C00_0263()
	word16 v36_191 = Mem148[ds_129:0x5404:word16]
	Mem192[ds_129:0x5404:word16] = 0x0000
	word16 dx_194 = Mem192[ds_129:0x541A:word16]
	Mem196[ds_129:0x541A:word16] = ax_138
	word16 ax_197 = ax_138 - dx_194
	Mem209[ds_129:0x5408:word16] = SLICE(DPB(ax_197, (byte) (v36_191 - (ax_197 <u 0x0000)), 8) *u 0x3865, word16, 16)
	branch (Mem209[ds_129:Mem209[ds_129:0x5A02:word16] + 0x0094:word16] & 0xFFFF) != 0x0000 l0C00_01FA
	// succ:  l0C00_01EC l0C00_01FA
l0C00_01EC:
	branch (Mem209[ds_129:Mem209[ds_129:0x5BD8:word16] + 0x0094:word16] & 0xFFFF) == 0x0000 l0C00_0200
	// succ:  l0C00_01FA l0C00_0200
l0C00_01FA:
	Mem248[ds_129:0x5408:word16] = 0x0000
	// succ:  l0C00_0200
l0C00_0200:
	branch (Mem209[ds_129:0x919E:word16] & 0x02FF) != 0x0000 l0C00_020E
	// succ:  l0C00_0208 l0C00_020E
l0C00_0208:
	Mem242[ds_129:0x5408:word16] = 0x0044
	// succ:  l0C00_020E
l0C00_020E:
	word16 ax_220 = Mem209[ds_129:0x919E:word16]
	ax_138 = ax_220 & 0x05FF
	branch (ax_220 & 0x05FF) == 0x0400 l0C00_016A
	// succ:  l0C00_021C l0C00_016A
l0C00_021C:
	branch Mem209[ds_129:0x632E:word16] != 0x0000 l0C00_022D
	// succ:  l0C00_0223 l0C00_022D
l0C00_0223:
	branch Mem209[ds_129:0xD10E:word16] == 0x0000 l0C00_022D
	// succ:  l0C00_022A l0C00_022D
l0C00_022A:
	fn0C00_028C()
	// succ:  l0C00_022D
l0C00_022D:
	fn0C00_0281()
	branch (Mem209[ds_129:0x6FCA:byte] & 0x10) == 0x00 l0C00_023D
	// succ:  l0C00_0237 l0C00_023D
l0C00_0237:
	Mem239[ds_129:0x5376:word16] = 0x0001
	// succ:  l0C00_023D
l0C00_023D:
	fn0C00_028A()
	branch (Mem209[ds_129:0x0412:word16] & 0xFFFF) == 0x0000 l0C00_024B
	// succ:  l0C00_0248 l0C00_024B
l0C00_0248:
	fn0C00_0258()
	// succ:  l0C00_024B
l0C00_024B:
	fn0C00_0294()
	goto l0C00_016A
	// succ:  l0C00_016A
l0C00_0251:
	msdos_terminate(0x01)
fn0C00_0000_exit:

void fn0C00_0000(selector ds)
{
	Mem8[0x0C00:0x0001:word16] = 0x0800;
	Mem9[0x0800:0x5422:word16] = ds;
	Mem16[0x0800:0x0066:word16] = Mem9[0x0800:0x5420:word16];
	selector es_19 = Mem16[0x0800:0x5422:selector];
	word16 bx_20;
	msdos_resize_memory_block(es_19, 0xFFFF, out bx_20);
	Mem25[0x0800:0x53CD:word16] = Mem16[0x0800:0x5422:word16] + bx_20;
	word16 bx_27;
	msdos_resize_memory_block(es_19, bx_20, out bx_27);
	Mem29[0x0800:0x0400:word16] = 0x1758;
	fn0C00_0288();
	word16 sp_14 = (word16) (DPB(esp, fp, 0) & 0x0000FFFF);
	Mem34[ss:sp_14 - 0x0002:word16] = cs;
	msdos_set_interrupt_vector(0x24, SEQ(Mem34[ss:sp_14 - 0x0002:selector], 0x0295));
	Mem43[ss:sp_14 - 0x0002:word16] = 0x0800;
	selector ds_44 = Mem43[ss:sp_14 - 0x0002:selector];
	fn0C00_0262();
	fn0C00_0260();
	if (Mem43[ds_44:0x541E:word16] != 0x0000)
		fn0C00_028E();
	fn0C00_027E();
	fn0C00_028F(0x53F4, ds_44);
	Mem51[ds_44:0x53FE:word16] = 0x0001;
	fn0C00_0261();
	Mem52[ds_44:0x53C2:word16] = 0x4AF3;
	fn0C00_0283(0x5447, ds_44);
	if (fn0C00_0271(ds_44) || !fn0C00_0267(ds_44))
	{
		do
			;
		while (Mem52[ds_44:0x81B0:word16] == 0x0000 || Mem52[ds_44:0x5404:word16] >= 0x0020);
		fn0C00_0283(0x5450, ds_44);
		Mem68[ds_44:0x5404:word16] = 0x0000;
		fn0C00_0259();
		if (Mem68[ds_44:0x53B8:word16] >= 0x0004)
		{
			word16 bx_71 = Mem68[ds_44:0x53B8:word16];
			Mem73[ds_44:0x53BE:word16] = bx_71 - 0x0001;
			Mem76[ds_44:0x53C0:word16] = bx_71 - 0x0002;
			fn0C00_025A(Mem76[ds_44:0x53C0:word16], ds_44);
			selector es_78 = Mem76[ds_44:0x53C2:selector];
			Mem82[ss:sp_14 - 0x0002:word16] = 0x6C34;
			word16 di_79 = 0x0000;
			selector ds_83 = Mem82[ss:sp_14 - 0x0002:selector];
			word16 si_87 = 0x0000;
			word16 cx_90 = 0x4000;
			while (cx_90 != 0x0000)
			{
				Mem95[es_78:di_79:word32] = Mem82[ds_83:si_87:word32];
				si_87 = si_87 + 0x0004;
				di_79 = di_79 + 0x0004;
				cx_90 = cx_90 - 0x0001;
			}
			Mem101[ss:sp_14 - 0x0002:word16] = 0x0800;
			selector ds_102 = Mem101[ss:sp_14 - 0x0002:selector];
			fn0C00_025A(Mem101[ds_102:0x53BE:word16], ds_102);
			selector es_105 = Mem101[ds_102:0x53C2:selector];
			Mem109[ss:sp_14 - 0x0002:word16] = 0x5D02;
			word16 di_106 = 0x0000;
			selector ds_110 = Mem109[ss:sp_14 - 0x0002:selector];
			word16 si_114 = 0x0000;
			word16 cx_117 = 0x4000;
			while (cx_117 != 0x0000)
			{
				Mem122[es_105:di_106:word32] = Mem109[ds_110:si_114:word32];
				si_114 = si_114 + 0x0004;
				di_106 = di_106 + 0x0004;
				cx_117 = cx_117 - 0x0001;
			}
			Mem128[ss:sp_14 - 0x0002:word16] = 0x0800;
			selector ds_129 = Mem128[ss:sp_14 - 0x0002:selector];
			Mem133[ds_129:0x7E52:word16] = Mem128[ds_129:0x53BE:word16];
			word16 ax_134 = Mem133[ds_129:0x53C2:word16];
			Mem135[ds_129:0x7E50:word16] = ax_134;
			Mem136[ds_129:0x5380:word16] = ax_134;
			word16 ax_137 = Mem136[ds_129:0x53B8:word16];
			Mem148[ds_129:0x53BC:word16] = ax_137 - 0x0002;
			fn0C00_025F();
			fn0C00_0282();
			word16 ax_138 = ax_137 - 0x0002;
			if (Mem148[ds_129:0x54A6:word16] != 0x0000)
			{
				fn0C00_027D();
				word32 eax_266 = (int32) Mem148[ds_129:0x5418:word16];
				word32 v34_276 = Mem148[ds_129:0x6FF0:word32] - (word32) (eax_266 *s 0x0000F000);
				Mem277[ds_129:0x6FF0:word32] = v34_276;
				Mem281[ds_129:0x6FF4:word32] = Mem277[ds_129:0x6FF4:word32] - 0x0000F000 - (v34_276 <u 0x00000000);
				ax_138 = (word16) (eax_266 *s 0x0000F000);
			}
			fn0C00_0265();
			do
				;
			while (Mem148[ds_129:0x81B0:word16] == 0x0000 || Mem148[ds_129:0x5404:word16] >= 0x0046);
			fn0C00_028F(0x53E7, ds_129);
			fn0C00_028B();
			fn0C00_027F();
			fn0C00_0280();
			fn0C00_027B();
			fn0C00_0266();
			while (true)
			{
				if ((Mem148[ds_129:0x919E:word16] & 0x01FF) != 0x0000)
				{
					fn0C00_0289();
					if (Mem148[ds_129:0x0480:word16] != 0x0000)
						fn0C00_028D();
					else
						Mem263[ds_129:0xC3CF:word16] = 0x0000;
					if (Mem148[ds_129:0x542C:word16] == 0x0000)
					{
						fn0C00_0257();
						fn0C00_0264();
					}
					else
					{
						Mem262[ds_129:0x540C:word32] = 0x00000000;
						fn0C00_0264();
					}
					if (Mem148[ds_129:0xC3CF:word16] != 0x0000)
						Mem261[ds_129:0x0412:word16] = 0x0000;
					Mem260[ds_129:0x5376:word16] = 0x0000;
				}
				fn0C00_027C();
				fn0C00_0263();
				word16 v36_191 = Mem148[ds_129:0x5404:word16];
				Mem192[ds_129:0x5404:word16] = 0x0000;
				word16 dx_194 = Mem192[ds_129:0x541A:word16];
				Mem196[ds_129:0x541A:word16] = ax_138;
				word16 ax_197 = ax_138 - dx_194;
				Mem209[ds_129:0x5408:word16] = SLICE(DPB(ax_197, (byte) (v36_191 - (ax_197 <u 0x0000)), 8) *u 0x3865, word16, 16);
				if ((Mem209[ds_129:Mem209[ds_129:0x5A02:word16] + 0x0094:word16] & 0xFFFF) != 0x0000 || (Mem209[ds_129:Mem209[ds_129:0x5BD8:word16] + 0x0094:word16] & 0xFFFF) != 0x0000)
					Mem248[ds_129:0x5408:word16] = 0x0000;
				if ((Mem209[ds_129:0x919E:word16] & 0x02FF) == 0x0000)
					Mem242[ds_129:0x5408:word16] = 0x0044;
				word16 ax_220 = Mem209[ds_129:0x919E:word16];
				ax_138 = ax_220 & 0x05FF;
				if ((ax_220 & 0x05FF) != 0x0400)
				{
					if (Mem209[ds_129:0x632E:word16] == 0x0000 && Mem209[ds_129:0xD10E:word16] != 0x0000)
						fn0C00_028C();
					fn0C00_0281();
					if ((Mem209[ds_129:0x6FCA:byte] & 0x10) != 0x00)
						Mem239[ds_129:0x5376:word16] = 0x0001;
					fn0C00_028A();
					if ((Mem209[ds_129:0x0412:word16] & 0xFFFF) != 0x0000)
						fn0C00_0258();
					fn0C00_0294();
				}
			}
		}
	}
	msdos_terminate(0x01);
}
===========================
// fn0C00_0257
// Return size: 0
void fn0C00_0257()
fn0C00_0257_entry:
	// succ:  l0C00_0257
l0C00_0257:
	return
	// succ:  fn0C00_0257_exit
fn0C00_0257_exit:

void fn0C00_0257()
{
	return;
}
===========================
// fn0C00_0258
// Return size: 0
void fn0C00_0258()
fn0C00_0258_entry:
	// succ:  l0C00_0258
l0C00_0258:
	return
	// succ:  fn0C00_0258_exit
fn0C00_0258_exit:

void fn0C00_0258()
{
	return;
}
===========================
// fn0C00_0259
// Return size: 0
void fn0C00_0259()
fn0C00_0259_entry:
	// succ:  l0C00_0259
l0C00_0259:
	return
	// succ:  fn0C00_0259_exit
fn0C00_0259_exit:

void fn0C00_0259()
{
	return;
}
===========================
// fn0C00_025A
// Return size: 0
void fn0C00_025A(word16 bx, selector ds)
fn0C00_025A_entry:
	// succ:  l0C00_025A
l0C00_025A:
	Mem3[ds:0x0540:word16] = bx
	return
	// succ:  fn0C00_025A_exit
fn0C00_025A_exit:

void fn0C00_025A(word16 bx, selector ds)
{
	Mem3[ds:0x0540:word16] = bx;
	return;
}
===========================
// fn0C00_025F
// Return size: 0
void fn0C00_025F()
fn0C00_025F_entry:
	// succ:  l0C00_025F
l0C00_025F:
	return
	// succ:  fn0C00_025F_exit
fn0C00_025F_exit:

void fn0C00_025F()
{
	return;
}
===========================
// fn0C00_0260
// Return size: 0
void fn0C00_0260()
fn0C00_0260_entry:
	// succ:  l0C00_0260
l0C00_0260:
	return
	// succ:  fn0C00_0260_exit
fn0C00_0260_exit:

void fn0C00_0260()
{
	return;
}
===========================
// fn0C00_0261
// Return size: 0
void fn0C00_0261()
fn0C00_0261_entry:
	// succ:  l0C00_0261
l0C00_0261:
	return
	// succ:  fn0C00_0261_exit
fn0C00_0261_exit:

void fn0C00_0261()
{
	return;
}
===========================
// fn0C00_0262
// Return size: 0
void fn0C00_0262()
fn0C00_0262_entry:
	// succ:  l0C00_0262
l0C00_0262:
	return
	// succ:  fn0C00_0262_exit
fn0C00_0262_exit:

void fn0C00_0262()
{
	return;
}
===========================
// fn0C00_0263
// Return size: 0
void fn0C00_0263()
fn0C00_0263_entry:
	// succ:  l0C00_0263
l0C00_0263:
	return
	// succ:  fn0C00_0263_exit
fn0C00_0263_exit:

void fn0C00_0263()
{
	return;
}
===========================
// fn0C00_0264
// Return size: 0
void fn0C00_0264()
fn0C00_0264_entry:
	// succ:  l0C00_0264
l0C00_0264:
	return
	// succ:  fn0C00_0264_exit
fn0C00_0264_exit:

void fn0C00_0264()
{
	return;
}
===========================
// fn0C00_0265
// Return size: 0
void fn0C00_0265()
fn0C00_0265_entry:
	// succ:  l0C00_0265
l0C00_0265:
	return
	// succ:  fn0C00_0265_exit
fn0C00_0265_exit:

void fn0C00_0265()
{
	return;
}
===========================
// fn0C00_0266
// Return size: 0
void fn0C00_0266()
fn0C00_0266_entry:
	// succ:  l0C00_0266
l0C00_0266:
	return
	// succ:  fn0C00_0266_exit
fn0C00_0266_exit:

void fn0C00_0266()
{
	return;
}
===========================
// fn0C00_0267
// Return size: 0
bool fn0C00_0267(selector ds)
fn0C00_0267_entry:
	// succ:  l0C00_0267
l0C00_0267:
	return cond(Mem0[ds:0x1234:word16] - Mem0[ds:0x1236:word16])
	// succ:  fn0C00_0267_exit
fn0C00_0267_exit:

bool fn0C00_0267(selector ds)
{
	return cond(Mem0[ds:0x1234:word16] - Mem0[ds:0x1236:word16]);
}
===========================
// fn0C00_0271
// Return size: 0
bool fn0C00_0271(selector ds)
fn0C00_0271_entry:
	// succ:  l0C00_0271
l0C00_0271:
	return cond(Mem0[ds:0x1234:word16] - Mem0[ds:0x1236:word16])
	// succ:  fn0C00_0271_exit
fn0C00_0271_exit:

bool fn0C00_0271(selector ds)
{
	return cond(Mem0[ds:0x1234:word16] - Mem0[ds:0x1236:word16]);
}
===========================
// fn0C00_027B
// Return size: 0
void fn0C00_027B()
fn0C00_027B_entry:
	// succ:  l0C00_027B
l0C00_027B:
	return
	// succ:  fn0C00_027B_exit
fn0C00_027B_exit:

void fn0C00_027B()
{
	return;
}
===========================
// fn0C00_027C
// Return size: 0
void fn0C00_027C()
fn0C00_027C_entry:
	// succ:  l0C00_027C
l0C00_027C:
	return
	// succ:  fn0C00_027C_exit
fn0C00_027C_exit:

void fn0C00_027C()
{
	return;
}
===========================
// fn0C00_027D
// Return size: 0
void fn0C00_027D()
fn0C00_027D_entry:
	// succ:  l0C00_027D
l0C00_027D:
	return
	// succ:  fn0C00_027D_exit
fn0C00_027D_exit:

void fn0C00_027D()
{
	return;
}
===========================
// fn0C00_027E
// Return size: 0
void fn0C00_027E()
fn0C00_027E_entry:
	// succ:  l0C00_027E
l0C00_027E:
	return
	// succ:  fn0C00_027E_exit
fn0C00_027E_exit:

void fn0C00_027E()
{
	return;
}
===========================
// fn0C00_027F
// Return size: 0
void fn0C00_027F()
fn0C00_027F_entry:
	// succ:  l0C00_027F
l0C00_027F:
	return
	// succ:  fn0C00_027F_exit
fn0C00_027F_exit:

void fn0C00_027F()
{
	return;
}
===========================
// fn0C00_0280
// Return size: 0
void fn0C00_0280()
fn0C00_0280_entry:
	// succ:  l0C00_0280
l0C00_0280:
	return
	// succ:  fn0C00_0280_exit
fn0C00_0280_exit:

void fn0C00_0280()
{
	return;
}
===========================
// fn0C00_0281
// Return size: 0
void fn0C00_0281()
fn0C00_0281_entry:
	// succ:  l0C00_0281
l0C00_0281:
	return
	// succ:  fn0C00_0281_exit
fn0C00_0281_exit:

void fn0C00_0281()
{
	return;
}
===========================
// fn0C00_0282
// Return size: 0
void fn0C00_0282()
fn0C00_0282_entry:
	// succ:  l0C00_0282
l0C00_0282:
	return
	// succ:  fn0C00_0282_exit
fn0C00_0282_exit:

void fn0C00_0282()
{
	return;
}
===========================
// fn0C00_0283
// Return size: 0
void fn0C00_0283(word16 si, selector ds)
fn0C00_0283_entry:
	// succ:  l0C00_0283
l0C00_0283:
	Mem3[ds:0x4AFB:word16] = si
	return
	// succ:  fn0C00_0283_exit
fn0C00_0283_exit:

void fn0C00_0283(word16 si, selector ds)
{
	Mem3[ds:0x4AFB:word16] = si;
	return;
}
===========================
// fn0C00_0288
// Return size: 0
void fn0C00_0288()
fn0C00_0288_entry:
	// succ:  l0C00_0288
l0C00_0288:
	return
	// succ:  fn0C00_0288_exit
fn0C00_0288_exit:

void fn0C00_0288()
{
	return;
}
===========================
// fn0C00_0289
// Return size: 0
void fn0C00_0289()
fn0C00_0289_entry:
	// succ:  l0C00_0289
l0C00_0289:
	return
	// succ:  fn0C00_0289_exit
fn0C00_0289_exit:

void fn0C00_0289()
{
	return;
}
===========================
// fn0C00_028A
// Return size: 0
void fn0C00_028A()
fn0C00_028A_entry:
	// succ:  l0C00_028A
l0C00_028A:
	return
	// succ:  fn0C00_028A_exit
fn0C00_028A_exit:

void fn0C00_028A()
{
	return;
}
===========================
// fn0C00_028B
// Return size: 0
void fn0C00_028B()
fn0C00_028B_entry:
	// succ:  l0C00_028B
l0C00_028B:
	return
	// succ:  fn0C00_028B_exit
fn0C00_028B_exit:

void fn0C00_028B()
{
	return;
}
===========================
// fn0C00_028C
// Return size: 0
void fn0C00_028C()
fn0C00_028C_entry:
	// succ:  l0C00_028C
l0C00_028C:
	return
	// succ:  fn0C00_028C_exit
fn0C00_028C_exit:

void fn0C00_028C()
{
	return;
}
===========================
// fn0C00_028D
// Return size: 0
void fn0C00_028D()
fn0C00_028D_entry:
	// succ:  l0C00_028D
l0C00_028D:
	return
	// succ:  fn0C00_028D_exit
fn0C00_028D_exit:

void fn0C00_028D()
{
	return;
}
===========================
// fn0C00_028E
// Return size: 0
void fn0C00_028E()
fn0C00_028E_entry:
	// succ:  l0C00_028E
l0C00_028E:
	return
	// succ:  fn0C00_028E_exit
fn0C00_028E_exit:

void fn0C00_028E()
{
	return;
}
===========================
// fn0C00_028F
// Return size: 0
void fn0C00_028F(word16 dx, selector ds)
fn0C00_028F_entry:
	// succ:  l0C00_028F
l0C00_028F:
	Mem3[ds:0xC54C:word16] = dx
	return
	// succ:  fn0C00_028F_exit
fn0C00_028F_exit:

void fn0C00_028F(word16 dx, selector ds)
{
	Mem3[ds:0xC54C:word16] = dx;
	return;
}
===========================
// fn0C00_0294
// Return size: 0
void fn0C00_0294()
fn0C00_0294_entry:
	// succ:  l0C00_0294
l0C00_0294:
	return
	// succ:  fn0C00_0294_exit
fn0C00_0294_exit:

void fn0C00_0294()
{
	return;
}
===========================
