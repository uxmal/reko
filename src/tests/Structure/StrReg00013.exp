// fn0C00_0000
// Return size: 0
void fn0C00_0000(selector ds)
fn0C00_0000_entry:
	Mem10[0C00:0001:word16] = 0x800<16>
	Mem11[0800:5422:word16] = ds
	Mem17[0800:0066:word16] = Mem11[0800:5420:word16]
	selector es_20 = Mem17[0800:5422:selector]
	word16 bx_21
	msdos_resize_memory_block(es_20, 0xFFFF<16>, out bx_21)
	Mem26[0800:53CD:word16] = Mem17[0800:5422:word16] + bx_21
	word16 bx_28
	msdos_resize_memory_block(es_20, bx_21, out bx_28)
	Mem30[0800:0400:word16] = 0x1758<16>
	fn0C00_0288()
	msdos_set_interrupt_vector(0x24<8>, SEQ(cs, 0x295<16>))
	fn0C00_0262()
	fn0C00_0260()
	branch Mem42[0800:541E:word16] == 0<16> l0C00_0062
	goto l0C00_005F
	// succ:  l0C00_005F l0C00_0062
l0C00_0000:
l0C00_005F:
	fn0C00_028E()
	// succ:  l0C00_0062
l0C00_0062:
	fn0C00_027E()
	fn0C00_028F(0x53F4<16>, 0x800<16>)
	Mem49[0800:53FE:word16] = 1<16>
	fn0C00_0261()
	Mem50[0800:53C2:word16] = 0x4AF3<16>
	fn0C00_0283(0x5447<16>, 0x800<16>)
	word16 sp_53 = <invalid>
	branch fn0C00_0271(0x800<16>) l0C00_008D
	// succ:  l0C00_0086 l0C00_008D
l0C00_0086:
	sp_53 = <invalid>
	branch fn0C00_0267(0x800<16>) l0C00_0251
	// succ:  l0C00_008D l0C00_0251
l0C00_008D:
	branch Mem50[0800:81B0:word16] == 0<16> l0C00_009B
	// succ:  l0C00_0094 l0C00_009B
l0C00_0094:
	branch Mem50[0800:5404:word16] < 0x20<16> l0C00_008D
	// succ:  l0C00_009B l0C00_008D
l0C00_009B:
	fn0C00_0283(0x5450<16>, 0x800<16>)
	Mem72[0800:5404:word16] = 0<16>
	fn0C00_0259()
	branch Mem72[0800:53B8:word16] < 4<16> l0C00_0251
	// succ:  l0C00_00B4 l0C00_0251
l0C00_00B4:
	word16 bx_77 = Mem72[0800:53B8:word16]
	Mem79[0800:53BE:word16] = bx_77 - 1<16>
	Mem82[0800:53C0:word16] = bx_77 - 2<16>
	fn0C00_025A(Mem82[0800:53C0:word16], 0x800<16>)
	selector es_84 = Mem82[0800:53C2:selector]
	word16 sp_88 = sp_53 - 2<i16>
	Mem92[ss:sp_88:word16] = 0x6C34<16>
	word16 di_255 = 0<16>
	selector ds_93 = Mem92[ss:sp_88:selector]
	word16 si_251 = 0<16>
	word16 cx_259 = 0x4000<16>
	// succ:  l0C00_00D8
l0C00_00D8:
	branch cx_259 == 0<16> l0C00_00DB
	// succ:  l0C00_00D8_1 l0C00_00DB
l0C00_00D8_1:
	Mem256[es_84:di_255:word32] = Mem252[ds_93:si_251:word32]
	si_251 = si_251 + 4<i16>
	di_255 = di_255 + 4<i16>
	cx_259 = cx_259 - 1<16>
	goto l0C00_00D8
	// succ:  l0C00_00D8
l0C00_00DB:
	Mem103[ss:sp_88:word16] = 0x800<16>
	selector ds_104 = Mem103[ss:sp_88:selector]
	fn0C00_025A(Mem103[ds_104:0x53BE<16>:word16], ds_104)
	selector es_107 = Mem103[ds_104:0x53C2<16>:selector]
	Mem110[ss:sp_88:word16] = 0x5D02<16>
	word16 di_108 = 0<16>
	selector ds_111 = Mem110[ss:sp_88:selector]
	word16 si_113 = 0<16>
	word16 cx_116 = 0x4000<16>
	// succ:  l0C00_00F5
l0C00_00F5:
	branch cx_116 == 0<16> l0C00_00F8
	// succ:  l0C00_00F5_1 l0C00_00F8
l0C00_00F5_1:
	Mem246[es_107:di_108:word32] = Mem242[ds_111:si_113:word32]
	si_113 = si_113 + 4<i16>
	di_108 = di_108 + 4<i16>
	cx_116 = cx_116 - 1<16>
	goto l0C00_00F5
	// succ:  l0C00_00F5
l0C00_00F8:
	Mem121[ss:sp_88:word16] = 0x800<16>
	selector ds_122 = Mem121[ss:sp_88:selector]
	Mem125[ds_122:0x7E52<16>:word16] = Mem121[ds_122:0x53BE<16>:word16]
	word16 ax_126 = Mem125[ds_122:0x53C2<16>:word16]
	Mem127[ds_122:0x7E50<16>:word16] = ax_126
	Mem128[ds_122:0x5380<16>:word16] = ax_126
	word16 ax_129 = Mem128[ds_122:0x53B8<16>:word16]
	Mem132[ds_122:0x53BC<16>:word16] = ax_129 - 2<16>
	fn0C00_025F()
	fn0C00_0282()
	word16 ax_130 = ax_129 - 2<16>
	branch Mem132[ds_122:0x54A6<16>:word16] == 0<16> l0C00_0144
	// succ:  l0C00_0128 l0C00_0144
l0C00_0128:
	fn0C00_027D()
	word32 eax_135 = CONVERT(Mem132[ds_122:0x5418<16>:word16], word16, int32)
	ui64 v28_v27_272 = Mem132[ds_122:0x6FF0<16>:ui64] - eax_135 *s64 0xF000<32>
	Mem140[ds_122:0x6FF0<16>:word32] = SLICE(v28_v27_272, word32, 0)
	Mem145[ds_122:0x6FF4<16>:word32] = SLICE(v28_v27_272, word32, 32)
	ax_130 = SLICE(eax_135, word16, 0) *s 0xF000<16> (alias)
	// succ:  l0C00_0144
l0C00_0144:
	fn0C00_0265()
	// succ:  l0C00_0147
l0C00_0147:
	branch Mem261[ds_122:0x81B0<16>:word16] == 0<16> l0C00_0155
	// succ:  l0C00_014E l0C00_0155
l0C00_014E:
	branch Mem261[ds_122:0x5404<16>:word16] < 0x46<16> l0C00_0147
	// succ:  l0C00_0155 l0C00_0147
l0C00_0155:
	fn0C00_028F(0x53E7<16>, ds_122)
	fn0C00_028B()
	fn0C00_027F()
	fn0C00_0280()
	fn0C00_027B()
	fn0C00_0266()
	// succ:  l0C00_016A
l0C00_016A:
	branch (Mem156[ds_122:0x919E<16>:word16] & 0x1FF<16>) == 0<16> l0C00_01B7
	// succ:  l0C00_0172 l0C00_01B7
l0C00_0172:
	fn0C00_0289()
	branch Mem156[ds_122:0x480<16>:word16] == 0<16> l0C00_0182
	// succ:  l0C00_017C l0C00_0182
l0C00_017C:
	fn0C00_028D()
	goto l0C00_0188
	// succ:  l0C00_0188
l0C00_0182:
	Mem162[ds_122:0xC3CF<16>:word16] = 0<16>
	// succ:  l0C00_0188
l0C00_0188:
	branch Mem164[ds_122:0x542C<16>:word16] != 0<16> l0C00_0198
	// succ:  l0C00_018F l0C00_0198
l0C00_018F:
	fn0C00_0257()
	fn0C00_0264()
	goto l0C00_01A4
	// succ:  l0C00_01A4
l0C00_0198:
	Mem167[ds_122:0x540C<16>:word32] = 0<32>
	fn0C00_0264()
	// succ:  l0C00_01A4
l0C00_01A4:
	branch Mem169[ds_122:0xC3CF<16>:word16] == 0<16> l0C00_01B1
	// succ:  l0C00_01AB l0C00_01B1
l0C00_01AB:
	Mem172[ds_122:0x412<16>:word16] = 0<16>
	// succ:  l0C00_01B1
l0C00_01B1:
	Mem174[ds_122:0x5376<16>:word16] = 0<16>
	// succ:  l0C00_01B7
l0C00_01B7:
	fn0C00_027C()
	fn0C00_0263()
	word16 v29_178 = Mem177[ds_122:0x5404<16>:word16]
	Mem179[ds_122:0x5404<16>:word16] = 0<16>
	word16 dx_181 = Mem179[ds_122:0x541A<16>:word16]
	Mem187[ds_122:0x541A<16>:word16] = ax_130
	ui32 bx_ax_274 = SEQ(v29_178, ax_130) - CONVERT(dx_181, word16, uint32)
	Mem200[ds_122:0x5408<16>:word16] = SLICE(SEQ(SLICE(SLICE(bx_ax_274, word16, 16), byte, 0), SLICE(SLICE(bx_ax_274, word16, 0), byte, 8)) *u32 0x3865<16>, word16, 16)
	branch Mem200[ds_122:Mem200[ds_122:0x5A02<16>:word16] + 0x94<16>:word16] != 0<16> l0C00_01FA
	// succ:  l0C00_01EC l0C00_01FA
l0C00_01EC:
	branch Mem200[ds_122:Mem200[ds_122:0x5BD8<16>:word16] + 0x94<16>:word16] == 0<16> l0C00_0200
	// succ:  l0C00_01FA l0C00_0200
l0C00_01FA:
	Mem212[ds_122:0x5408<16>:word16] = 0<16>
	// succ:  l0C00_0200
l0C00_0200:
	branch (Mem214[ds_122:0x919E<16>:word16] & 0x2FF<16>) != 0<16> l0C00_020E
	// succ:  l0C00_0208 l0C00_020E
l0C00_0208:
	Mem218[ds_122:0x5408<16>:word16] = 0x44<16>
	// succ:  l0C00_020E
l0C00_020E:
	word16 ax_221 = Mem220[ds_122:0x919E<16>:word16]
	ax_130 = ax_221 & 0x5FF<16>
	branch (ax_221 & 0x5FF<16>) == 0x400<16> l0C00_016A
	// succ:  l0C00_021C l0C00_016A
l0C00_021C:
	branch Mem220[ds_122:0x632E<16>:word16] != 0<16> l0C00_022D
	// succ:  l0C00_0223 l0C00_022D
l0C00_0223:
	branch Mem220[ds_122:0xD10E<16>:word16] == 0<16> l0C00_022D
	// succ:  l0C00_022A l0C00_022D
l0C00_022A:
	fn0C00_028C()
	// succ:  l0C00_022D
l0C00_022D:
	fn0C00_0281()
	branch (Mem220[ds_122:0x6FCA<16>:byte] & 0x10<8>) == 0<8> l0C00_023D
	// succ:  l0C00_0237 l0C00_023D
l0C00_0237:
	Mem234[ds_122:0x5376<16>:word16] = 1<16>
	// succ:  l0C00_023D
l0C00_023D:
	fn0C00_028A()
	branch Mem236[ds_122:0x412<16>:word16] == 0<16> l0C00_024B
	// succ:  l0C00_0248 l0C00_024B
l0C00_0248:
	fn0C00_0258()
	// succ:  l0C00_024B
l0C00_024B:
	fn0C00_0294()
	goto l0C00_016A
	// succ:  l0C00_016A
l0C00_0251:
	msdos_terminate(1<8>)
fn0C00_0000_exit:

void fn0C00_0000(selector ds)
{
	Mem10[0C00:0001:word16] = 0x800<16>;
	Mem11[0800:5422:word16] = ds;
	Mem17[0800:0066:word16] = Mem11[0800:5420:word16];
	selector es_20 = Mem17[0800:5422:selector];
	word16 bx_21;
	msdos_resize_memory_block(es_20, 0xFFFF<16>, out bx_21);
	Mem26[0800:53CD:word16] = Mem17[0800:5422:word16] + bx_21;
	word16 bx_28;
	msdos_resize_memory_block(es_20, bx_21, out bx_28);
	Mem30[0800:0400:word16] = 0x1758<16>;
	fn0C00_0288();
	msdos_set_interrupt_vector(0x24<8>, SEQ(cs, 0x295<16>));
	fn0C00_0262();
	fn0C00_0260();
	if (Mem42[0800:541E:word16] != 0<16>)
		fn0C00_028E();
	fn0C00_027E();
	fn0C00_028F(0x53F4<16>, 0x800<16>);
	Mem49[0800:53FE:word16] = 1<16>;
	fn0C00_0261();
	Mem50[0800:53C2:word16] = 0x4AF3<16>;
	fn0C00_0283(0x5447<16>, 0x800<16>);
	word16 sp_53 = <invalid>;
	if (!fn0C00_0271(0x800<16>))
	{
		sp_53 = <invalid>;
		if (fn0C00_0267(0x800<16>))
			goto l0C00_0251;
	}
	do
		;
	while (Mem50[0800:81B0:word16] != 0<16> && Mem50[0800:5404:word16] < 0x20<16>);
	fn0C00_0283(0x5450<16>, 0x800<16>);
	Mem72[0800:5404:word16] = 0<16>;
	fn0C00_0259();
	if (Mem72[0800:53B8:word16] >= 4<16>)
	{
		word16 bx_77 = Mem72[0800:53B8:word16];
		Mem79[0800:53BE:word16] = bx_77 - 1<16>;
		Mem82[0800:53C0:word16] = bx_77 - 2<16>;
		fn0C00_025A(Mem82[0800:53C0:word16], 0x800<16>);
		selector es_84 = Mem82[0800:53C2:selector];
		word16 sp_88 = sp_53 - 2<i16>;
		Mem92[ss:sp_88:word16] = 0x6C34<16>;
		word16 di_255 = 0<16>;
		selector ds_93 = Mem92[ss:sp_88:selector];
		word16 si_251 = 0<16>;
		word16 cx_259;
		for (cx_259 = 0x4000<16>; cx_259 != 0<16>; --cx_259)
		{
			Mem256[es_84:di_255:word32] = Mem252[ds_93:si_251:word32];
			si_251 += 4<i16>;
			di_255 += 4<i16>;
		}
		Mem103[ss:sp_88:word16] = 0x800<16>;
		selector ds_104 = Mem103[ss:sp_88:selector];
		fn0C00_025A(Mem103[ds_104:0x53BE<16>:word16], ds_104);
		selector es_107 = Mem103[ds_104:0x53C2<16>:selector];
		Mem110[ss:sp_88:word16] = 0x5D02<16>;
		word16 di_108 = 0<16>;
		selector ds_111 = Mem110[ss:sp_88:selector];
		word16 si_113 = 0<16>;
		word16 cx_116;
		for (cx_116 = 0x4000<16>; cx_116 != 0<16>; --cx_116)
		{
			Mem246[es_107:di_108:word32] = Mem242[ds_111:si_113:word32];
			si_113 += 4<i16>;
			di_108 += 4<i16>;
		}
		Mem121[ss:sp_88:word16] = 0x800<16>;
		selector ds_122 = Mem121[ss:sp_88:selector];
		Mem125[ds_122:0x7E52<16>:word16] = Mem121[ds_122:0x53BE<16>:word16];
		word16 ax_126 = Mem125[ds_122:0x53C2<16>:word16];
		Mem127[ds_122:0x7E50<16>:word16] = ax_126;
		Mem128[ds_122:0x5380<16>:word16] = ax_126;
		word16 ax_129 = Mem128[ds_122:0x53B8<16>:word16];
		Mem132[ds_122:0x53BC<16>:word16] = ax_129 - 2<16>;
		fn0C00_025F();
		fn0C00_0282();
		word16 ax_130 = ax_129 - 2<16>;
		if (Mem132[ds_122:0x54A6<16>:word16] != 0<16>)
		{
			fn0C00_027D();
			word32 eax_135 = CONVERT(Mem132[ds_122:0x5418<16>:word16], word16, int32);
			ui64 v28_v27_272 = Mem132[ds_122:0x6FF0<16>:ui64] - eax_135 *s64 0xF000<32>;
			Mem140[ds_122:0x6FF0<16>:word32] = SLICE(v28_v27_272, word32, 0);
			Mem145[ds_122:0x6FF4<16>:word32] = SLICE(v28_v27_272, word32, 32);
			ax_130 = SLICE(eax_135, word16, 0) *s 0xF000<16>;
		}
		fn0C00_0265();
		do
			;
		while (Mem261[ds_122:0x81B0<16>:word16] != 0<16> && Mem261[ds_122:0x5404<16>:word16] < 0x46<16>);
		fn0C00_028F(0x53E7<16>, ds_122);
		fn0C00_028B();
		fn0C00_027F();
		fn0C00_0280();
		fn0C00_027B();
		fn0C00_0266();
		while (true)
		{
			if ((Mem156[ds_122:0x919E<16>:word16] & 0x1FF<16>) != 0<16>)
			{
				fn0C00_0289();
				if (Mem156[ds_122:0x480<16>:word16] != 0<16>)
					fn0C00_028D();
				else
					Mem162[ds_122:0xC3CF<16>:word16] = 0<16>;
				if (Mem164[ds_122:0x542C<16>:word16] == 0<16>)
				{
					fn0C00_0257();
					fn0C00_0264();
				}
				else
				{
					Mem167[ds_122:0x540C<16>:word32] = 0<32>;
					fn0C00_0264();
				}
				if (Mem169[ds_122:0xC3CF<16>:word16] != 0<16>)
					Mem172[ds_122:0x412<16>:word16] = 0<16>;
				Mem174[ds_122:0x5376<16>:word16] = 0<16>;
			}
			fn0C00_027C();
			fn0C00_0263();
			word16 v29_178 = Mem177[ds_122:0x5404<16>:word16];
			Mem179[ds_122:0x5404<16>:word16] = 0<16>;
			word16 dx_181 = Mem179[ds_122:0x541A<16>:word16];
			Mem187[ds_122:0x541A<16>:word16] = ax_130;
			ui32 bx_ax_274 = SEQ(v29_178, ax_130) - CONVERT(dx_181, word16, uint32);
			Mem200[ds_122:0x5408<16>:word16] = SLICE(SEQ(SLICE(SLICE(bx_ax_274, word16, 16), byte, 0), SLICE(SLICE(bx_ax_274, word16, 0), byte, 8)) *u32 0x3865<16>, word16, 16);
			if (Mem200[ds_122:Mem200[ds_122:0x5A02<16>:word16] + 0x94<16>:word16] != 0<16> || Mem200[ds_122:Mem200[ds_122:0x5BD8<16>:word16] + 0x94<16>:word16] != 0<16>)
				Mem212[ds_122:0x5408<16>:word16] = 0<16>;
			if ((Mem214[ds_122:0x919E<16>:word16] & 0x2FF<16>) == 0<16>)
				Mem218[ds_122:0x5408<16>:word16] = 0x44<16>;
			word16 ax_221 = Mem220[ds_122:0x919E<16>:word16];
			ax_130 = ax_221 & 0x5FF<16>;
			if ((ax_221 & 0x5FF<16>) != 0x400<16>)
			{
				if (Mem220[ds_122:0x632E<16>:word16] == 0<16> && Mem220[ds_122:0xD10E<16>:word16] != 0<16>)
					fn0C00_028C();
				fn0C00_0281();
				if ((Mem220[ds_122:0x6FCA<16>:byte] & 0x10<8>) != 0<8>)
					Mem234[ds_122:0x5376<16>:word16] = 1<16>;
				fn0C00_028A();
				if (Mem236[ds_122:0x412<16>:word16] != 0<16>)
					fn0C00_0258();
				fn0C00_0294();
			}
		}
	}
l0C00_0251:
	msdos_terminate(1<8>);
}
===========================
// fn0C00_0257
// Return size: 0
void fn0C00_0257()
fn0C00_0257_entry:
	// succ:  l0C00_0257
l0C00_0257:
	return
	// succ:  fn0C00_0257_exit
fn0C00_0257_exit:

void fn0C00_0257()
{
}
===========================
// fn0C00_0258
// Return size: 0
void fn0C00_0258()
fn0C00_0258_entry:
	// succ:  l0C00_0258
l0C00_0258:
	return
	// succ:  fn0C00_0258_exit
fn0C00_0258_exit:

void fn0C00_0258()
{
}
===========================
// fn0C00_0259
// Return size: 0
void fn0C00_0259()
fn0C00_0259_entry:
	// succ:  l0C00_0259
l0C00_0259:
	return
	// succ:  fn0C00_0259_exit
fn0C00_0259_exit:

void fn0C00_0259()
{
}
===========================
// fn0C00_025A
// Return size: 0
void fn0C00_025A(word16 bx, selector ds)
fn0C00_025A_entry:
	// succ:  l0C00_025A
l0C00_025A:
	Mem6[ds:0x540<16>:word16] = bx
	return
	// succ:  fn0C00_025A_exit
fn0C00_025A_exit:

void fn0C00_025A(word16 bx, selector ds)
{
	Mem6[ds:0x540<16>:word16] = bx;
}
===========================
// fn0C00_025F
// Return size: 0
void fn0C00_025F()
fn0C00_025F_entry:
	// succ:  l0C00_025F
l0C00_025F:
	return
	// succ:  fn0C00_025F_exit
fn0C00_025F_exit:

void fn0C00_025F()
{
}
===========================
// fn0C00_0260
// Return size: 0
void fn0C00_0260()
fn0C00_0260_entry:
	// succ:  l0C00_0260
l0C00_0260:
	return
	// succ:  fn0C00_0260_exit
fn0C00_0260_exit:

void fn0C00_0260()
{
}
===========================
// fn0C00_0261
// Return size: 0
void fn0C00_0261()
fn0C00_0261_entry:
	// succ:  l0C00_0261
l0C00_0261:
	return
	// succ:  fn0C00_0261_exit
fn0C00_0261_exit:

void fn0C00_0261()
{
}
===========================
// fn0C00_0262
// Return size: 0
void fn0C00_0262()
fn0C00_0262_entry:
	// succ:  l0C00_0262
l0C00_0262:
	return
	// succ:  fn0C00_0262_exit
fn0C00_0262_exit:

void fn0C00_0262()
{
}
===========================
// fn0C00_0263
// Return size: 0
void fn0C00_0263()
fn0C00_0263_entry:
	// succ:  l0C00_0263
l0C00_0263:
	return
	// succ:  fn0C00_0263_exit
fn0C00_0263_exit:

void fn0C00_0263()
{
}
===========================
// fn0C00_0264
// Return size: 0
void fn0C00_0264()
fn0C00_0264_entry:
	// succ:  l0C00_0264
l0C00_0264:
	return
	// succ:  fn0C00_0264_exit
fn0C00_0264_exit:

void fn0C00_0264()
{
}
===========================
// fn0C00_0265
// Return size: 0
void fn0C00_0265()
fn0C00_0265_entry:
	// succ:  l0C00_0265
l0C00_0265:
	return
	// succ:  fn0C00_0265_exit
fn0C00_0265_exit:

void fn0C00_0265()
{
}
===========================
// fn0C00_0266
// Return size: 0
void fn0C00_0266()
fn0C00_0266_entry:
	// succ:  l0C00_0266
l0C00_0266:
	return
	// succ:  fn0C00_0266_exit
fn0C00_0266_exit:

void fn0C00_0266()
{
}
===========================
// fn0C00_0267
// Return size: 0
bool fn0C00_0267(selector ds)
fn0C00_0267_entry:
	// succ:  l0C00_0267
l0C00_0267:
	return SLICE(cond(Mem7[ds:0x1234<16>:word16] - Mem7[ds:0x1236<16>:word16]), bool, 1)
	// succ:  fn0C00_0267_exit
fn0C00_0267_exit:

bool fn0C00_0267(selector ds)
{
	return SLICE(cond(Mem7[ds:0x1234<16>:word16] - Mem7[ds:0x1236<16>:word16]), bool, 1);
}
===========================
// fn0C00_0271
// Return size: 0
bool fn0C00_0271(selector ds)
fn0C00_0271_entry:
	// succ:  l0C00_0271
l0C00_0271:
	return SLICE(cond(Mem7[ds:0x1234<16>:word16] - Mem7[ds:0x1236<16>:word16]), bool, 1)
	// succ:  fn0C00_0271_exit
fn0C00_0271_exit:

bool fn0C00_0271(selector ds)
{
	return SLICE(cond(Mem7[ds:0x1234<16>:word16] - Mem7[ds:0x1236<16>:word16]), bool, 1);
}
===========================
// fn0C00_027B
// Return size: 0
void fn0C00_027B()
fn0C00_027B_entry:
	// succ:  l0C00_027B
l0C00_027B:
	return
	// succ:  fn0C00_027B_exit
fn0C00_027B_exit:

void fn0C00_027B()
{
}
===========================
// fn0C00_027C
// Return size: 0
void fn0C00_027C()
fn0C00_027C_entry:
	// succ:  l0C00_027C
l0C00_027C:
	return
	// succ:  fn0C00_027C_exit
fn0C00_027C_exit:

void fn0C00_027C()
{
}
===========================
// fn0C00_027D
// Return size: 0
void fn0C00_027D()
fn0C00_027D_entry:
	// succ:  l0C00_027D
l0C00_027D:
	return
	// succ:  fn0C00_027D_exit
fn0C00_027D_exit:

void fn0C00_027D()
{
}
===========================
// fn0C00_027E
// Return size: 0
void fn0C00_027E()
fn0C00_027E_entry:
	// succ:  l0C00_027E
l0C00_027E:
	return
	// succ:  fn0C00_027E_exit
fn0C00_027E_exit:

void fn0C00_027E()
{
}
===========================
// fn0C00_027F
// Return size: 0
void fn0C00_027F()
fn0C00_027F_entry:
	// succ:  l0C00_027F
l0C00_027F:
	return
	// succ:  fn0C00_027F_exit
fn0C00_027F_exit:

void fn0C00_027F()
{
}
===========================
// fn0C00_0280
// Return size: 0
void fn0C00_0280()
fn0C00_0280_entry:
	// succ:  l0C00_0280
l0C00_0280:
	return
	// succ:  fn0C00_0280_exit
fn0C00_0280_exit:

void fn0C00_0280()
{
}
===========================
// fn0C00_0281
// Return size: 0
void fn0C00_0281()
fn0C00_0281_entry:
	// succ:  l0C00_0281
l0C00_0281:
	return
	// succ:  fn0C00_0281_exit
fn0C00_0281_exit:

void fn0C00_0281()
{
}
===========================
// fn0C00_0282
// Return size: 0
void fn0C00_0282()
fn0C00_0282_entry:
	// succ:  l0C00_0282
l0C00_0282:
	return
	// succ:  fn0C00_0282_exit
fn0C00_0282_exit:

void fn0C00_0282()
{
}
===========================
// fn0C00_0283
// Return size: 0
void fn0C00_0283(word16 si, selector ds)
fn0C00_0283_entry:
	// succ:  l0C00_0283
l0C00_0283:
	Mem6[ds:0x4AFB<16>:word16] = si
	return
	// succ:  fn0C00_0283_exit
fn0C00_0283_exit:

void fn0C00_0283(word16 si, selector ds)
{
	Mem6[ds:0x4AFB<16>:word16] = si;
}
===========================
// fn0C00_0288
// Return size: 0
void fn0C00_0288()
fn0C00_0288_entry:
	// succ:  l0C00_0288
l0C00_0288:
	return
	// succ:  fn0C00_0288_exit
fn0C00_0288_exit:

void fn0C00_0288()
{
}
===========================
// fn0C00_0289
// Return size: 0
void fn0C00_0289()
fn0C00_0289_entry:
	// succ:  l0C00_0289
l0C00_0289:
	return
	// succ:  fn0C00_0289_exit
fn0C00_0289_exit:

void fn0C00_0289()
{
}
===========================
// fn0C00_028A
// Return size: 0
void fn0C00_028A()
fn0C00_028A_entry:
	// succ:  l0C00_028A
l0C00_028A:
	return
	// succ:  fn0C00_028A_exit
fn0C00_028A_exit:

void fn0C00_028A()
{
}
===========================
// fn0C00_028B
// Return size: 0
void fn0C00_028B()
fn0C00_028B_entry:
	// succ:  l0C00_028B
l0C00_028B:
	return
	// succ:  fn0C00_028B_exit
fn0C00_028B_exit:

void fn0C00_028B()
{
}
===========================
// fn0C00_028C
// Return size: 0
void fn0C00_028C()
fn0C00_028C_entry:
	// succ:  l0C00_028C
l0C00_028C:
	return
	// succ:  fn0C00_028C_exit
fn0C00_028C_exit:

void fn0C00_028C()
{
}
===========================
// fn0C00_028D
// Return size: 0
void fn0C00_028D()
fn0C00_028D_entry:
	// succ:  l0C00_028D
l0C00_028D:
	return
	// succ:  fn0C00_028D_exit
fn0C00_028D_exit:

void fn0C00_028D()
{
}
===========================
// fn0C00_028E
// Return size: 0
void fn0C00_028E()
fn0C00_028E_entry:
	// succ:  l0C00_028E
l0C00_028E:
	return
	// succ:  fn0C00_028E_exit
fn0C00_028E_exit:

void fn0C00_028E()
{
}
===========================
// fn0C00_028F
// Return size: 0
void fn0C00_028F(word16 dx, selector ds)
fn0C00_028F_entry:
	// succ:  l0C00_028F
l0C00_028F:
	Mem6[ds:0xC54C<16>:word16] = dx
	return
	// succ:  fn0C00_028F_exit
fn0C00_028F_exit:

void fn0C00_028F(word16 dx, selector ds)
{
	Mem6[ds:0xC54C<16>:word16] = dx;
}
===========================
// fn0C00_0294
// Return size: 0
void fn0C00_0294()
fn0C00_0294_entry:
	// succ:  l0C00_0294
l0C00_0294:
	return
	// succ:  fn0C00_0294_exit
fn0C00_0294_exit:

void fn0C00_0294()
{
}
===========================
