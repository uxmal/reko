// void fn0C00_0000(Register selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1
// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax dh dl dx eax edx rax rdx
// Preserved: sp
// fn0C00_0000
// Return size: 0
void fn0C00_0000(selector ds)
fn0C00_0000_entry:
	// succ:  l0C00_0000
l0C00_0000:
	Mem4[ds:0x012C:word16] = fn0C00_000B(0x001E)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:

// Register word16 fn0C00_000B(Register word16 dx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1
// MayUse:  dx
// LiveOut: ax
// Trashed: SCZO ah al ax dh dl dx eax edx rax rdx
// Preserved: sp
// fn0C00_000B
// Return size: 0
word16 fn0C00_000B(word16 dx)
fn0C00_000B_entry:
	// succ:  l0C00_000B
l0C00_000B:
	return fn0C00_000F(dx)
	// succ:  fn0C00_000B_exit
fn0C00_000B_exit:

// Register word16 fn0C00_000F(Register word16 dx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1
// MayUse:  dx
// LiveOut: ax
// Trashed: SCZO ah al ax dh dl dx eax edx rax rdx
// Preserved: si sp
// fn0C00_000F
// Return size: 0
word16 fn0C00_000F(word16 dx)
fn0C00_000F_entry:
	// succ:  l0C00_000F
l0C00_000F:
	word16 si_12 = 0x0000
	goto l0C00_0018
	// succ:  l0C00_0018
l0C00_0015:
	si_12 = si_12 + dx
	dx = dx - 0x0001
	// succ:  l0C00_0018
l0C00_0018:
	branch dx >= 0x0000 l0C00_0015
	// succ:  l0C00_001D l0C00_0015
l0C00_001D:
	return si_12
	// succ:  fn0C00_000F_exit
fn0C00_000F_exit:

