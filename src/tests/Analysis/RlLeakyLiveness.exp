// fn0C00_0000 /////////////////////
	LiveOut:  
	BitsUsed:  ds:[0..15]
	Trashed:   SCZO ax si Top
	Preserved: sp
// fn0C00_0000
define fn0C00_0000
fn0C00_0000_entry:
	def ds
	def Mem0
l0C00_0000:
	call fn0C00_000A (retsize: 2;)
		uses: ds:ds
		defs: ax:ax_6,C:C_8
	branch C_8 l0C00_0009
l0C00_0005:
	v6_12 = Mem0[ds:0x0300:word16] + ax_6
	Mem13[ds:0x0300:word16] = v6_12
l0C00_0009:
	return
fn0C00_0000_exit:
// fn0C00_000A /////////////////////
	LiveOut:   C ax:[0..15]
	BitsUsed:  ds:[0..15]
	Trashed:   SCZO ax si Top
	Preserved: sp
// fn0C00_000A
define fn0C00_000A
fn0C00_000A_entry:
	def ds
	def Mem0
	def ax
l0C00_000A:
	si_6 = Mem0[ds:0x0100:word16]
	branch si_6 == Mem0[ds:0x0102:word16] l0C00_001E
l0C00_0014:
	ax_10 = Mem0[ds:si_6:word16]
	Mem14[ds:0x0100:word16] = si_6 + 0x0002
	C_15 = false
	return
l0C00_001E:
	C_9 = true
	return
fn0C00_000A_exit:
	C_18 = PHI((C_15, l0C00_0014), (C_9, l0C00_001E))
	ax_16 = PHI((ax_10, l0C00_0014), (ax, l0C00_001E))
	use ax_16
	use C_18
