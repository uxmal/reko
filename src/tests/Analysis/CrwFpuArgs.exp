void fn0C00_0000(Register selector ds)
// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx eax ebx rax rbx
// Preserved: sp
// fn0C00_0000
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// rLoc1:FPU stack
// ds:ds
// rLoc2:FPU stack
// v6:v6
// ss:ss
// ax:ax
// v9:v9
// SCZO:Flags
// wLoc02:Local -0002
// wLoc04:Local -0004
// return address size: 2
void fn0C00_0000(selector ds)
fn0C00_0000_entry:
	// succ:  l0C00_0000
l0C00_0000:
	sp = fp
	rLoc1 = (real64) Mem0[ds:0x0300:real32]
	rLoc2 = (real64) Mem0[ds:0x0304:real32]
	v6 = 0x0308
	sp = fp - 0x0002
	wLoc02 = 0x0308
	fn0C00_0024(ds, wLoc02, rLoc2, rLoc1)
	rLoc1 = 0.0
	Mem0[ds:0x030C:real32] = (real32) rLoc1
	ax = Mem0[ds:0x0308:word16]
	v9 = ax
	sp = fp - 0x0004
	wLoc04 = v9
	rLoc1 = fn0C00_0031(ds, wLoc04)
	Mem0[ds:0x030C:real32] = (real32) rLoc1
	sp = fp
	SCZO = cond(fp)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
void fn0C00_0024(Register selector ds, Stack word16 wArg02, FpuStack real64 rArg0, FpuStack real64 rArg1)
// MayUse:  ds
// LiveOut:
// Trashed: bh bl bx ebx rbx
// Preserved: bp sp
// Stack args: Stack +0002(16)
// fn0C00_0024
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// bp:bp
// v4:v4
// ss:ss
// bx:bx
// rArg0:FPU stack
// ds:ds
// rArg1:FPU stack
// wLoc02:Local -0002
// wArg02:Stack +0002
// return address size: 2
void fn0C00_0024(selector ds, word16 wArg02, real64 rArg0, real64 rArg1)
fn0C00_0024_entry:
	// succ:  l0C00_0024
l0C00_0024:
	sp = fp
	v4 = bp
	sp = fp - 0x0002
	wLoc02 = v4
	bp = fp - 0x0002
	bx = wArg02
	Mem0[ds:bx:real32] = (real32) rArg0
	Mem0[ds:bx + 0x0004:real32] = (real32) rArg1
	bp = wLoc02
	sp = fp
	return
	// succ:  fn0C00_0024_exit
fn0C00_0024_exit:
FpuStack real64 fn0C00_0031(Register selector ds, Stack word16 wArg02)
// MayUse:  ds
// LiveOut:
// Trashed: bh bl bx ebx rbx
// Preserved: bp sp
// Stack args: Stack +0002(16)
// fn0C00_0031
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// bp:bp
// v4:v4
// ss:ss
// bx:bx
// rLoc1:FPU stack
// ds:ds
// wLoc02:Local -0002
// wArg02:Stack +0002
// return address size: 2
real64 fn0C00_0031(selector ds, word16 wArg02)
fn0C00_0031_entry:
	// succ:  l0C00_0031
l0C00_0031:
	sp = fp
	v4 = bp
	sp = fp - 0x0002
	wLoc02 = v4
	bp = fp - 0x0002
	bx = wArg02
	rLoc1 = (real64) Mem0[ds:bx:real32]
	bp = wLoc02
	sp = fp
	return rLoc1
	// succ:  fn0C00_0031_exit
fn0C00_0031_exit:
