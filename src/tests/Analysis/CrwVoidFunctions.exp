void fn0C00_0000(Register word16 di, Register selector ds)
// MayUse:  di ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx eax ebx esi rax rbx rsi si sil
// Preserved: sp
// fn0C00_0000
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// si:si
// v4:v4
// ss:ss
// SCZO:Flags
// wLoc02:Local -0002
// di:di
// ds:ds
// return address size: 2
void fn0C00_0000(word16 di, selector ds)
fn0C00_0000_entry:
	// succ:  l0C00_0000
l0C00_0000:
	sp = fp
	si = 0x0100
	fn0C00_0010(si, di, ds)
	v4 = 0x0100
	sp = fp - 0x0002
	wLoc02 = 0x0100
	fn0C00_0017(di, ds, wLoc02)
	sp = fp
	SCZO = cond(fp)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
void fn0C00_0010(Register word16 si, Register word16 di, Register selector ds)
// MayUse:  di ds si
// LiveOut:
// Trashed: ah al ax eax rax
// Preserved: sp
// fn0C00_0010
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// ax:ax
// si:si
// ds:ds
// di:di
// return address size: 2
void fn0C00_0010(word16 si, word16 di, selector ds)
fn0C00_0010_entry:
	// succ:  l0C00_0010
l0C00_0010:
	sp = fp
	ax = Mem0[ds:si + 0x0002:word16]
	fn0C00_0029(ax, di, ds)
	return
	// succ:  fn0C00_0010_exit
fn0C00_0010_exit:
void fn0C00_0017(Register word16 di, Register selector ds, Stack word16 wArg02)
// MayUse:  di ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx eax ebx rax rbx
// Preserved: bp sp
// Stack args: Stack +0002(16)
// fn0C00_0017
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// bp:bp
// v4:v4
// ss:ss
// bx:bx
// ax:ax
// ds:ds
// v9:v9
// SCZO:Flags
// wLoc02:Local -0002
// wArg02:Stack +0002
// wLoc04:Local -0004
// di:di
// return address size: 2
void fn0C00_0017(word16 di, selector ds, word16 wArg02)
fn0C00_0017_entry:
	// succ:  l0C00_0017
l0C00_0017:
	sp = fp
	v4 = bp
	sp = fp - 0x0002
	wLoc02 = v4
	bp = fp - 0x0002
	bx = wArg02
	ax = Mem0[ds:bx + 0x0002:word16]
	v9 = ax
	sp = fp - 0x0004
	wLoc04 = v9
	fn0C00_002C(di, ds, wLoc04)
	sp = fp - 0x0002
	SCZO = cond(fp - 0x0002)
	bp = wLoc02
	sp = fp
	return
	// succ:  fn0C00_0017_exit
fn0C00_0017_exit:
void fn0C00_0029(Register word16 ax, Register word16 di, Register selector ds)
// MayUse:  ax di ds
// LiveOut:
// Trashed:
// Preserved: sp
// fn0C00_0029
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// di:di
// ds:ds
// ax:ax
// return address size: 2
void fn0C00_0029(word16 ax, word16 di, selector ds)
fn0C00_0029_entry:
	// succ:  l0C00_0029
l0C00_0029:
	sp = fp
	Mem0[ds:di:word16] = ax
	return
	// succ:  fn0C00_0029_exit
fn0C00_0029_exit:
void fn0C00_002C(Register word16 di, Register selector ds, Stack word16 wArg02)
// MayUse:  di ds
// LiveOut:
// Trashed: ah al ax eax rax
// Preserved: bp sp
// Stack args: Stack +0002(16)
// fn0C00_002C
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// bp:bp
// v4:v4
// ss:ss
// ax:ax
// di:di
// ds:ds
// wLoc02:Local -0002
// wArg02:Stack +0002
// return address size: 2
void fn0C00_002C(word16 di, selector ds, word16 wArg02)
fn0C00_002C_entry:
	// succ:  l0C00_002C
l0C00_002C:
	sp = fp
	v4 = bp
	sp = fp - 0x0002
	wLoc02 = v4
	bp = fp - 0x0002
	ax = wArg02
	Mem0[ds:di:word16] = ax
	bp = wLoc02
	sp = fp
	return
	// succ:  fn0C00_002C_exit
fn0C00_002C_exit:
