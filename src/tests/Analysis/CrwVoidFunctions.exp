void fn0C00_0000(Sequence segptr32 ds_di)
// MayUse:  Sequence ds:di:[0..31]
// DataTypes: 
//   Sequence ds:di: segptr32
// LiveOut:
// Trashed: SCZO ax bx si Top
// Preserved: sp
// fn0C00_0000
// Return size: 0
// Mem0:Mem
// fp:fp
// sp:sp
// si:si
// ss:ss
// SCZO:SCZO
// Top:Top
// ds:ds
// di:di
// ds_di:Sequence ds:di
// ax:ax
// bx:bx
// S:S
// C:C
// Z:Z
// O:O
// wLoc02:Local -0002
// return address size: 2
void fn0C00_0000(segptr32 ds_di)
fn0C00_0000_entry:
	def ds_di
	// succ:  l0C00_0000
l0C00_0000:
	fn0C00_0010(ds_di, 0x100<16>)
	fn0C00_0017(ds_di, 0x100<16>)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
void fn0C00_0010(Sequence segptr32 ds_di, Register word16 si)
// MayUse:  Sequence ds:di:[0..31] si:[0..15]
// DataTypes: 
//   Sequence ds:di: segptr32
//   si: (memptr T_5 (struct (2 T_4 t0002)))
// LiveOut:
// Trashed: ax Top
// Preserved: sp
// fn0C00_0010
// Return size: 0
// Mem0:Mem
// fp:fp
// sp:sp
// ax:ax
// si:si
// ds:ds
// Top:Top
// di:di
// ds_di:Sequence ds:di
// ds_si:Sequence ds:si
// return address size: 2
void fn0C00_0010(segptr32 ds_di, word16 si)
fn0C00_0010_entry:
	def ds_di
	ds = SLICE(ds_di, selector, 16)
	def si
	def Mem0
	// succ:  l0C00_0010
l0C00_0010:
	ax_7 = Mem0[ds:si + 2<i16>:word16]
	fn0C00_0029(ds_di, ax_7)
	return
	// succ:  fn0C00_0010_exit
fn0C00_0010_exit:
void fn0C00_0017(Sequence segptr32 ds_di, Stack word16 wArg02)
// MayUse:  Sequence ds:di:[0..31] Stack +0002:[0..15]
// DataTypes: 
//   Sequence ds:di: segptr32
//   Stack +0002: (memptr T_6 (struct (2 T_5 t0002)))
// LiveOut:
// Trashed: SCZO ax bx Top
// Preserved: bp sp
// fn0C00_0017
// Return size: 0
// Mem0:Mem
// fp:fp
// sp:sp
// bp:bp
// ss:ss
// bx:bx
// ax:ax
// ds:ds
// SCZO:SCZO
// Top:Top
// di:di
// ds_di:Sequence ds:di
// wLoc02:Local -0002
// wArg02:Stack +0002
// wLoc04:Local -0004
// S:S
// C:C
// Z:Z
// O:O
// return address size: 2
void fn0C00_0017(segptr32 ds_di, word16 wArg02)
fn0C00_0017_entry:
	def ds_di
	ds = SLICE(ds_di, selector, 16)
	def wArg02
	// succ:  l0C00_0017
l0C00_0017:
	ax_11 = Mem7[ds:wArg02 + 2<i16>:word16]
	fn0C00_002C(ds_di, ax_11)
	return
	// succ:  fn0C00_0017_exit
fn0C00_0017_exit:
void fn0C00_0029(Sequence segptr32 ds_di, Register word16 ax)
// MayUse:  ax:[0..15] Sequence ds:di:[0..31]
// DataTypes: 
//   ax: word16
//   Sequence ds:di: (ptr32 (struct (0 T_2 t0000)))
// LiveOut:
// Trashed: Top
// Preserved: sp
// fn0C00_0029
// Return size: 0
// Mem0:Mem
// fp:fp
// sp:sp
// di:di
// ds:ds
// ax:ax
// Top:Top
// ds_di:Sequence ds:di
// return address size: 2
void fn0C00_0029(segptr32 ds_di, word16 ax)
fn0C00_0029_entry:
	def ds_di
	def ax
	// succ:  l0C00_0029
l0C00_0029:
	Mem7[ds_di:word16] = ax
	return
	// succ:  fn0C00_0029_exit
fn0C00_0029_exit:
void fn0C00_002C(Sequence segptr32 ds_di, Stack word16 wArg02)
// MayUse:  Sequence ds:di:[0..31] Stack +0002:[0..15]
// DataTypes: 
//   Sequence ds:di: (ptr32 (struct (0 T_2 t0000)))
//   Stack +0002: word16
// LiveOut:
// Trashed: ax Top
// Preserved: bp sp
// fn0C00_002C
// Return size: 0
// Mem0:Mem
// fp:fp
// sp:sp
// bp:bp
// ss:ss
// ax:ax
// di:di
// ds:ds
// Top:Top
// wLoc02:Local -0002
// wArg02:Stack +0002
// ds_di:Sequence ds:di
// return address size: 2
void fn0C00_002C(segptr32 ds_di, word16 wArg02)
fn0C00_002C_entry:
	def ds_di
	def wArg02
	// succ:  l0C00_002C
l0C00_002C:
	Mem12[ds_di:word16] = wArg02
	return
	// succ:  fn0C00_002C_exit
fn0C00_002C_exit:
