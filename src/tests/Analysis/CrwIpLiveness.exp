void fn0C00_0000(Register selector ds)
// MayUse:  ds:[0..15]
// DataTypes: 
//   ds: (ptr16 (segment (100 T_1 t0100) (102 T_11 t0102) (104 T_21 t0104)))
// LiveOut:
// Trashed: SCZO ax bx di si Top
// Preserved: sp
// fn0C00_0000
// Return size: 0
// Mem0:Mem
// fp:fp
// sp:sp
// di:di
// ds:ds
// si:si
// ax:ax
// bx:bx
// Top:Top
// ds_si:Sequence ds:si
// S:S
// C:C
// Z:Z
// O:O
// return address size: 2
void fn0C00_0000(selector ds)
fn0C00_0000_entry:
	def ds
	def Mem0
	// succ:  l0C00_0000
l0C00_0000:
	di_6 = Mem0[ds:0x100<16>:word16]
	si_7 = Mem0[ds:di_6:word16]
	ds_si_8 = SEQ(ds, si_7) (alias)
	ax_9 = fn0C00_0026(ds_si_8)
	Mem14[ds:di_6 + 2<i16>:word16] = ax_9
	bx_15 = Mem14[ds:0x102<16>:word16]
	si_16 = Mem14[ds:bx_15 + 4<i16>:word16]
	ds_si_17 = SEQ(ds, si_16) (alias)
	ax_18 = fn0C00_0026(ds_si_17)
	Mem23[ds:bx_15 + 8<i16>:word16] = ax_18
	di_24 = Mem23[ds:0x104<16>:word16]
	si_25 = Mem23[ds:di_24:word16]
	ds_si_26 = SEQ(ds, si_25) (alias)
	ax_27 = fn0C00_0033(ds_si_26)
	Mem32[ds:di_24 + 2<i16>:word16] = ax_27
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
Register word16 fn0C00_0026(Sequence segptr32 ds_si)
// MayUse:  Sequence ds:si:[0..31]
// DataTypes: 
//   Sequence ds:si: segptr32
// LiveOut: ax
// Trashed: SCZO ax Top
// Preserved: di sp
// fn0C00_0026
// Return size: 0
// Mem0:Mem
// fp:fp
// sp:sp
// di:di
// ss:ss
// ds:ds
// v6:v6
// SZO:SZO
// Top:Top
// si:si
// ds_si:Sequence ds:si
// ax:ax
// S:S
// C:C
// Z:Z
// O:O
// wLoc02:Local -0002
// return address size: 2
word16 fn0C00_0026(segptr32 ds_si)
fn0C00_0026_entry:
	def ds_si
	ds = SLICE(ds_si, selector, 16)
	// succ:  l0C00_0026
l0C00_0026:
	di_9 = Mem7[ds:0x104<16>:word16]
	v6_10 = Mem7[ds:di_9 + 48<i16>:word16] + 1<16>
	Mem11[ds:di_9 + 48<i16>:word16] = v6_10
	ax_15 = fn0C00_0033(ds_si)
	return ax_15
	// succ:  fn0C00_0026_exit
fn0C00_0026_exit:
Register word16 fn0C00_0033(Sequence segptr32 ds_si)
// MayUse:  Sequence ds:si:[0..31]
// DataTypes: 
//   Sequence ds:si: (ptr32 (struct (0 T_1 t0000)))
// LiveOut: ax
// Trashed: SCZO ax Top
// Preserved: sp
// fn0C00_0033
// Return size: 0
// Mem0:Mem
// fp:fp
// sp:sp
// ax:ax
// si:si
// ds:ds
// SCZO:SCZO
// Top:Top
// S:S
// C:C
// Z:Z
// O:O
// ds_si:Sequence ds:si
// return address size: 2
word16 fn0C00_0033(segptr32 ds_si)
fn0C00_0033_entry:
	def ds_si
	def Mem0
	// succ:  l0C00_0033
l0C00_0033:
	ax_7 = Mem0[ds_si:word16]
	ax_8 = ax_7 * 2<16>
	return ax_8
	// succ:  fn0C00_0033_exit
fn0C00_0033_exit:
