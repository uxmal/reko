void fn0C00_0000(Register selector ds)
// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx di dil eax ebx edi esi rax rbx rdi rsi si sil
// Preserved: sp
// fn0C00_0000
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// di:di
// ds:ds
// si:si
// ax:ax
// bx:bx
// return address size: 2
void fn0C00_0000(selector ds)
fn0C00_0000_entry:
	// succ:  l0C00_0000
l0C00_0000:
	sp = fp
	di = Mem0[ds:0x0100:word16]
	si = Mem0[ds:di:word16]
	ax = fn0C00_0026(si, ds)
	Mem0[ds:di + 0x0002:word16] = ax
	bx = Mem0[ds:0x0102:word16]
	si = Mem0[ds:bx + 0x0004:word16]
	ax = fn0C00_0026(si, ds)
	Mem0[ds:bx + 0x0008:word16] = ax
	di = Mem0[ds:0x0104:word16]
	si = Mem0[ds:di:word16]
	ax = fn0C00_0033(si, ds)
	Mem0[ds:di + 0x0002:word16] = ax
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
Register word16 fn0C00_0026(Register word16 si, Register selector ds)
// MayUse:  ds si
// LiveOut: ax
// Trashed: SCZO ah al ax eax rax
// Preserved: di sp
// fn0C00_0026
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// di:di
// v4:v4
// ss:ss
// ds:ds
// v7:v7
// SZO:Flags
// wLoc02:Local -0002
// si:si
// ax:ax
// return address size: 2
word16 fn0C00_0026(word16 si, selector ds)
fn0C00_0026_entry:
	// succ:  l0C00_0026
l0C00_0026:
	sp = fp
	v4 = di
	sp = fp - 0x0002
	wLoc02 = v4
	di = Mem0[ds:0x0104:word16]
	v7 = Mem0[ds:di + 0x0030:word16] + 0x0001
	Mem0[ds:di + 0x0030:word16] = v7
	SZO = cond(v7)
	ax = fn0C00_0033(si, ds)
	di = wLoc02
	sp = fp
	return ax
	// succ:  fn0C00_0026_exit
fn0C00_0026_exit:
Register word16 fn0C00_0033(Register word16 si, Register selector ds)
// MayUse:  ds si
// LiveOut: ax
// Trashed: SCZO ah al ax eax rax
// Preserved: sp
// fn0C00_0033
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// ax:ax
// si:si
// ds:ds
// SCZO:Flags
// return address size: 2
word16 fn0C00_0033(word16 si, selector ds)
fn0C00_0033_entry:
	// succ:  l0C00_0033
l0C00_0033:
	sp = fp
	ax = Mem0[ds:si:word16]
	ax = ax + ax
	SCZO = cond(ax)
	return ax
	// succ:  fn0C00_0033_exit
fn0C00_0033_exit:
