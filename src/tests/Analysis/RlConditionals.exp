// fn0C00_0000 /////////////////////
	LiveOut:  
	MayUseIn:  bp ds ss
	BypassIn: 
	Trashed:   SCZO ah al ax bp bpl eax ebp esp rax rbp rsp sp spl
	Preserved:
// fn0C00_0000
void fn0C00_0000()
// SymbolicIn: sp:fp
fn0C00_0000_entry:
// DataOut: bp ds ss
// DataOut (flags): 
// LocalsOut: fp(16)

// SymbolicIn: sp:fp
l0C00_0000:
	sp = fp
	ax = Mem0[ds:0x0100:word16]
	SCZO = cond(Mem0[ds:0x0102:word16] - ax)
	branch Test(EQ,Z) l0C00_000F
// DataOut: bp ds ss
// DataOut (flags): 
// LocalsOut: fp(16)

// SymbolicIn: sp:fp ax:<invalid>
l0C00_000A:
	Mem0[ds:0x0F00:byte] = 0x01
// DataOut: bp ds ss
// DataOut (flags): 
// LocalsOut: fp(16)

// SymbolicIn: sp:fp ax:<invalid>
l0C00_000F:
	ax = Mem0[ds:0x0104:word16]
	v7 = Mem0[ds:0x0106:word16] - ax
	Mem0[ds:0x0106:word16] = v7
	SCZO = cond(v7)
	branch Test(LE,SZO) l0C00_001E
// DataOut: bp ds ss
// DataOut (flags): 
// LocalsOut: fp(16)

// SymbolicIn: sp:fp ax:<invalid>
l0C00_0019:
	Mem0[ds:0x0F01:byte] = 0x01
// DataOut: bp ds ss
// DataOut (flags): 
// LocalsOut: fp(16)

// SymbolicIn: sp:fp ax:<invalid>
l0C00_001E:
	ax = Mem0[ds:0x0106:word16]
	ax = ax & Mem0[ds:0x0108:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0C00_002D
// DataOut: bp ds ss
// DataOut (flags): 
// LocalsOut: fp(16)

// SymbolicIn: sp:fp ax:<invalid>
l0C00_0028:
	Mem0[ds:0x0F02:byte] = 0x01
// DataOut: bp ds ss
// DataOut (flags): 
// LocalsOut: fp(16)

// SymbolicIn: sp:fp ax:<invalid>
l0C00_002D:
	ax = Mem0[ds:0x010A:word16]
	SCZO = cond(ax - Mem0[ds:0x010C:word16])
	C = !C
	branch Test(ULT,C) l0C00_003D
// DataOut: bp ds ss
// DataOut (flags): 
// LocalsOut: fp(16)

// SymbolicIn: sp:fp ax:<invalid>
l0C00_0038:
	Mem0[ds:0x0F03:byte] = 0x01
// DataOut: bp ds ss
// DataOut (flags): 
// LocalsOut: fp(16)

// SymbolicIn: sp:fp ax:<invalid>
l0C00_003D:
	v10 = 0x0003
	sp = fp - 0x0002
	wLoc02 = 0x0003
	call fn0C00_0069 (retsize: 2; depth: 4)
	branch Test(UGE,C) l0C00_0049
// DataOut: bp ds ss
// DataOut (flags): 

// SymbolicIn: sp:fp - 0x0002 ax:<invalid> -2(fp):0x0003
l0C00_0044:
	Mem0[ds:0x0F04:byte] = 0x01
// DataOut: bp ds ss
// DataOut (flags): 

// SymbolicIn: sp:fp - 0x0002 ax:<invalid> -2(fp):0x0003
l0C00_0049:
	SZO = cond(Mem0[ds:0x010E:word16] & 0x01FF)
	C = false
	branch Test(EQ,Z) l0C00_0056
// DataOut: bp ds ss
// DataOut (flags): 

// SymbolicIn: sp:fp - 0x0002 ax:<invalid> -2(fp):0x0003
l0C00_0051:
	Mem0[ds:0x0F05:byte] = 0x01
// DataOut: bp ds ss
// DataOut (flags): 

// SymbolicIn: sp:fp - 0x0002 ax:<invalid> -2(fp):0x0003
l0C00_0056:
	bp = bp - 0x0010
	SCZO = cond(bp)
	branch Test(LT,SO) l0C00_005F
// DataOut: bp ds ss
// DataOut (flags): 

// SymbolicIn: sp:fp - 0x0002 ax:<invalid> bp:bp - 0x0010 -2(fp):0x0003
l0C00_005B:
	Mem0[ss:bp + 0x0006:byte] = 0x01
// DataOut: bp ds
// DataOut (flags): 

// SymbolicIn: sp:fp - 0x0002 ax:<invalid> bp:bp - 0x0010 -2(fp):0x0003
l0C00_005F:
	bp = bp + bp
	SCZO = cond(bp)
	branch Test(NO,O) l0C00_0068
// DataOut: ds
// DataOut (flags): 

// SymbolicIn: sp:fp - 0x0002 ax:<invalid> bp:bp - 0x0020 + (bp - 0x0020) -2(fp):0x0003
l0C00_0063:
	Mem0[ds:0x0F07:byte] = 0x01
// DataOut:
// DataOut (flags): 

// SymbolicIn: sp:fp - 0x0002 ax:<invalid> bp:bp - 0x0020 + (bp - 0x0020) -2(fp):0x0003
l0C00_0068:
	return
// DataOut:
// DataOut (flags): 

// SymbolicIn: sp:fp - 0x0002 ax:<invalid> bp:bp - 0x0020 + (bp - 0x0020) -2(fp):0x0003
fn0C00_0000_exit:
// DataOut:
// DataOut (flags): 

// fn0C00_0069 /////////////////////
	LiveOut:   C ds ss
	MayUseIn: 
	BypassIn: 
	Trashed:   SCZO
	Preserved: bp sp
// fn0C00_0069
void fn0C00_0069()
// SymbolicIn: sp:fp
fn0C00_0069_entry:
// DataOut: ds ss
// DataOut (flags): 
// LocalsOut: fp(16) Stack +0002(16)

// SymbolicIn: sp:fp
l0C00_0069:
	sp = fp
	v4 = bp
	sp = fp - 0x0002
	wLoc02 = v4
	bp = fp - 0x0002
	SCZO = cond(wArg02 - 0x0000)
	bp = wLoc02
	sp = fp
	return
// DataOut: ds ss
// DataOut (flags): C

// SymbolicIn: sp:fp bp:bp -2(fp):bp
fn0C00_0069_exit:
// DataOut: ds ss
// DataOut (flags): C

