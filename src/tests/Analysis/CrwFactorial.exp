void fn0C00_0000(Register selector ds)
// MayUse:  ds:[0..15]
// LiveOut:
// Trashed: SCZO ax cx dx Top
// Preserved: sp
// fn0C00_0000
// Return size: 0
// Mem0:Mem
// fp:fp
// sp:sp
// cx:cx
// ss:ss
// SCZO:SCZO
// ds:ds
// ax:ax
// Top:Top
// dx:dx
// S:S
// C:C
// Z:Z
// O:O
// wLoc02:Local -0002
// return address size: 2
void fn0C00_0000(selector ds)
fn0C00_0000_entry:
	def ds
	// succ:  l0C00_0000
l0C00_0000:
	ax_8 = fn0C00_000F(0x0064)
	Mem18[ds:0x0064:word16] = ax_8
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
Register word16 fn0C00_000F(Stack word16 wArg02)
// MayUse:  Stack +0002:[0..15]
// LiveOut: ax
// Trashed: SCZO ax dx Top
// Preserved: bp sp
// fn0C00_000F
// Return size: 0
// Mem0:Mem
// fp:fp
// sp:sp
// bp:bp
// ss:ss
// ax:ax
// SZO:SZO
// Z:Z
// dx:dx
// dx_ax:Sequence dx:ax
// SCZO:SCZO
// Top:Top
// wLoc02:Local -0002
// wArg02:Stack +0002
// wLoc04:Local -0004
// S:S
// O:O
// C:C
// return address size: 2
word16 fn0C00_000F(word16 wArg02)
fn0C00_000F_entry:
	def wArg02
	// succ:  l0C00_000F
l0C00_000F:
	branch wArg02 == 0x0001 l0C00_0026
	// succ:  l0C00_0018 l0C00_0026
l0C00_0018:
	ax_17 = fn0C00_000F(wArg02 - 0x0001)
	dx_ax_27 = wArg02 *s ax_17
	ax_29 = (word16) dx_ax_27 (alias)
	goto l0C00_0029
	// succ:  l0C00_0029
l0C00_0026:
	ax_13 = 0x0001
	// succ:  l0C00_0029
l0C00_0029:
	ax_39 = PHI((ax_29, l0C00_0018), (ax_13, l0C00_0026))
	return ax_39
	// succ:  fn0C00_000F_exit
fn0C00_000F_exit:
