void fn0C00_0000(Register selector ds)
// MayUse:  ds:[0..15]
// LiveOut:
// Trashed: SCZO ax si Top
// Preserved: sp
// fn0C00_0000
// Return size: 0
// Mem0:Mem
// fp:fp
// sp:sp
// si:si
// ds:ds
// ax:ax
// Top:Top
// S:S
// C:C
// Z:Z
// O:O
// return address size: 2
void fn0C00_0000(selector ds)
fn0C00_0000_entry:
	def ds
	def Mem0
	// succ:  l0C00_0000
l0C00_0000:
	si_6 = Mem0[ds:0x0200:word16]
	ax_7 = fn0C00_0025(si_6, ds, out si_8)
	Mem9[ds:0x0310:word16] = ax_7
	ax_10 = fn0C00_0027(si_8, ds, out si_11)
	Mem16[ds:0x0320:word16] = ax_10
	ax_17 = fn0C00_002F(si_11, ds, out si_18)
	Mem19[ds:0x0330:word16] = ax_17
	ax_20 = fn0C00_0036(si_18, ds, out si_21)
	Mem22[ds:0x0340:word16] = ax_20
	Mem23[ds:0x0400:word16] = si_21
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
Register word16 fn0C00_0025(Register word16 si, Register selector ds, Register out ptr16 siOut)
// MayUse:  ds:[0..15] si:[0..15]
// LiveOut: ax si
// Trashed: ax si Top
// Preserved: sp
// fn0C00_0025
// Return size: 0
// Mem0:Mem
// fp:fp
// sp:sp
// ax:ax
// ds:ds
// si:si
// Top:Top
// siOut:Out:si
// return address size: 2
word16 fn0C00_0025(word16 si, selector ds, ptr16 & siOut)
fn0C00_0025_entry:
	def ds
	def si
	def Mem0
	// succ:  l0C00_0025
l0C00_0025:
	ax_7 = Mem0[ds:si:word16]
	si_8 = si + 0x0002
	siOut = si_8
	return ax_7
	// succ:  fn0C00_0025_exit
fn0C00_0025_exit:
Register word16 fn0C00_0027(Register word16 si, Register selector ds, Register out ptr16 siOut)
// MayUse:  ds:[0..15] si:[0..15]
// LiveOut: ax si
// Trashed: SCZO ax si Top
// Preserved: sp
// fn0C00_0027
// Return size: 0
// Mem0:Mem
// fp:fp
// sp:sp
// ax:ax
// SZO:SZO
// C:C
// si:si
// Z:Z
// ds:ds
// Top:Top
// S:S
// O:O
// siOut:Out:si
// return address size: 2
word16 fn0C00_0027(word16 si, selector ds, ptr16 & siOut)
fn0C00_0027_entry:
	def si
	def ds
	def Mem0
	// succ:  l0C00_0027
l0C00_0027:
	ax_4 = 0x0000
	si_8 = si
	branch si == 0x0000 l0C00_002E
	// succ:  l0C00_002D l0C00_002E
l0C00_002D:
	ax_14 = Mem0[ds:si:word16]
	si_15 = si + 0x0002
	// succ:  l0C00_002E
l0C00_002E:
	si_22 = PHI((si_8, l0C00_0027), (si_15, l0C00_002D))
	ax_16 = PHI((ax_4, l0C00_0027), (ax_14, l0C00_002D))
	siOut = si_22
	return ax_16
	// succ:  fn0C00_0027_exit
fn0C00_0027_exit:
Register word16 fn0C00_002F(Register word16 si, Register selector ds, Register out ptr16 siOut)
// MayUse:  ds:[0..15] si:[0..15]
// LiveOut: ax si
// Trashed: ax si Top
// Preserved: sp
// fn0C00_002F
// Return size: 0
// Mem0:Mem
// fp:fp
// sp:sp
// ax:ax
// ds:ds
// si:si
// Top:Top
// siOut:Out:si
// return address size: 2
word16 fn0C00_002F(word16 si, selector ds, ptr16 & siOut)
fn0C00_002F_entry:
	def ds
	def si
	def Mem0
	// succ:  l0C00_002F
l0C00_002F:
	ax_7 = Mem0[ds:si:word16]
	si_8 = si + 0x0002
	Mem9[ds:si + 0x0004:word16] = 0x0000
	siOut = si_8
	return ax_7
	// succ:  fn0C00_002F_exit
fn0C00_002F_exit:
Register word16 fn0C00_0036(Register word16 si, Register selector ds, Register out ptr16 siOut)
// MayUse:  ds:[0..15] si:[0..15]
// LiveOut: ax si
// Trashed: ax si Top
// Preserved: sp
// fn0C00_0036
// Return size: 0
// Mem0:Mem
// fp:fp
// sp:sp
// ax:ax
// ds:ds
// si:si
// Top:Top
// siOut:Out:si
// return address size: 2
word16 fn0C00_0036(word16 si, selector ds, ptr16 & siOut)
fn0C00_0036_entry:
	def ds
	def si
	// succ:  l0C00_0036
l0C00_0036:
	ax_9 = fn0C00_0025(si + 0x0002, ds, out si_10)
	siOut = si_10
	return ax_9
	// succ:  fn0C00_0036_exit
fn0C00_0036_exit:
