void fn0C00_0000(Register selector ds)
// MayUse:  ds:[0..15]
// DataTypes: 
//   ds: (ptr16 (segment 0402))
// LiveOut:
// Trashed: SCZO ax si Top
// Preserved: sp
// fn0C00_0000
// Return size: 0
// Mem0:Mem
// fp:fp
// %continuation:%continuation
// sp:sp
// si:si
// ds:ds
// ax:ax
// Top:Top
// ds_si:Sequence ds:si
// S:S
// C:C
// Z:Z
// O:O
// return address size: 2
void fn0C00_0000(selector ds)
fn0C00_0000_entry:
	def ds
	def Mem0
	// succ:  l0C00_0000
l0C00_0000:
	si_6 = Mem0[ds:0x200<16>:word16]
	ds_si_7 = SEQ(ds, si_6) (alias)
	ax_8 = fn0C00_0025(ds_si_7, out si_9)
	Mem10[ds:0x310<16>:word16] = ax_8
	ds_si_11 = SEQ(ds, si_9) (alias)
	ax_12 = fn0C00_0027(ds_si_11, out si_13)
	Mem18[ds:0x320<16>:word16] = ax_12
	ds_si_19 = SEQ(ds, si_13) (alias)
	ax_20 = fn0C00_002F(ds_si_19, out si_21)
	Mem22[ds:0x330<16>:word16] = ax_20
	ds_si_23 = SEQ(ds, si_21) (alias)
	ax_24 = fn0C00_0036(ds_si_23, out si_25)
	Mem26[ds:0x340<16>:word16] = ax_24
	Mem27[ds:0x400<16>:word16] = si_25
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
Register word16 fn0C00_0025(Sequence segptr32 ds_si, Register out ptr16 siOut)
// MayUse:  Sequence ds:si:[0..31]
// DataTypes: 
//   Sequence ds:si: (union (segptr32 u0) ((ptr32 (struct 0002)) u1))
// LiveOut: ax si
// Trashed: ax si Top
// Preserved: sp
// fn0C00_0025
// Return size: 0
// Mem0:Mem
// fp:fp
// %continuation:%continuation
// sp:sp
// ax:ax
// si:si
// ds:ds
// Top:Top
// ds_si:Sequence ds:si
// siOut:Out:si
// return address size: 2
word16 fn0C00_0025(segptr32 ds_si, ptr16 & siOut)
fn0C00_0025_entry:
	def ds_si
	si = SLICE(ds_si, word16, 0)
	def Mem0
	// succ:  l0C00_0025
l0C00_0025:
	ax_7 = Mem0[ds_si:word16]
	si_8 = si + 2<i16>
	siOut = si_8
	return ax_7
	// succ:  fn0C00_0025_exit
fn0C00_0025_exit:
Register word16 fn0C00_0027(Sequence segptr32 ds_si, Register out ptr16 siOut)
// MayUse:  Sequence ds:si:[0..31]
// DataTypes: 
//   Sequence ds:si: (union (segptr32 u0) ((ptr32 (struct 0002)) u1))
// LiveOut: ax si
// Trashed: SCZO ax si Top
// Preserved: sp
// fn0C00_0027
// Return size: 0
// Mem0:Mem
// fp:fp
// %continuation:%continuation
// sp:sp
// ax:ax
// SZ:SZ
// O:O
// C:C
// si:si
// Z:Z
// ds:ds
// Top:Top
// S:S
// ds_si:Sequence ds:si
// siOut:Out:si
// return address size: 2
word16 fn0C00_0027(segptr32 ds_si, ptr16 & siOut)
fn0C00_0027_entry:
	def ds_si
	si = SLICE(ds_si, word16, 0)
	def Mem0
	// succ:  l0C00_0027
l0C00_0027:
	ax_4 = 0<16>
	si_9 = si
	branch si == 0<16> l0C00_002E
	// succ:  l0C00_002D l0C00_002E
l0C00_002D:
	ax_16 = Mem0[ds_si:word16]
	si_17 = si + 2<i16>
	// succ:  l0C00_002E
l0C00_002E:
	si_23 = PHI((si_9, l0C00_0027), (si_17, l0C00_002D))
	ax_18 = PHI((ax_4, l0C00_0027), (ax_16, l0C00_002D))
	siOut = si_23
	return ax_18
	// succ:  fn0C00_0027_exit
fn0C00_0027_exit:
Register word16 fn0C00_002F(Sequence segptr32 ds_si, Register out ptr16 siOut)
// MayUse:  Sequence ds:si:[0..31]
// DataTypes: 
//   Sequence ds:si: (union (segptr32 u0) ((ptr32 (struct 0006)) u1))
// LiveOut: ax si
// Trashed: ax si Top
// Preserved: sp
// fn0C00_002F
// Return size: 0
// Mem0:Mem
// fp:fp
// %continuation:%continuation
// sp:sp
// ax:ax
// si:si
// ds:ds
// Top:Top
// ds_si:Sequence ds:si
// siOut:Out:si
// return address size: 2
word16 fn0C00_002F(segptr32 ds_si, ptr16 & siOut)
fn0C00_002F_entry:
	def ds_si
	si = SLICE(ds_si, word16, 0)
	def Mem0
	// succ:  l0C00_002F
l0C00_002F:
	ax_7 = Mem0[ds_si:word16]
	si_8 = si + 2<i16>
	Mem9[ds_si + 4<i32>:word16] = 0<16>
	siOut = si_8
	return ax_7
	// succ:  fn0C00_002F_exit
fn0C00_002F_exit:
Register word16 fn0C00_0036(Sequence segptr32 ds_si, Register out ptr16 siOut)
// MayUse:  Sequence ds:si:[0..31]
// DataTypes: 
//   Sequence ds:si: segptr32
// LiveOut: ax si
// Trashed: ax si Top
// Preserved: sp
// fn0C00_0036
// Return size: 0
// Mem0:Mem
// fp:fp
// %continuation:%continuation
// sp:sp
// ax:ax
// si:si
// ds:ds
// Top:Top
// ds_si:Sequence ds:si
// siOut:Out:si
// return address size: 2
word16 fn0C00_0036(segptr32 ds_si, ptr16 & siOut)
fn0C00_0036_entry:
	def ds_si
	ds = SLICE(ds_si, selector, 16)
	si = SLICE(ds_si, word16, 0)
	// succ:  l0C00_0036
l0C00_0036:
	ds_si_9 = SEQ(ds, si + 2<i16>) (alias)
	ax_10 = fn0C00_0025(ds_si_9, out si_11)
	siOut = si_11
	return ax_10
	// succ:  fn0C00_0036_exit
fn0C00_0036_exit:
