// fn0C00_0000 /////////////////////
	LiveOut:  
	BitsUsed:  ds:[0..15]
	Trashed:   SCZO ax bx cx di es Top
	Preserved: sp
// fn0C00_0000
define fn0C00_0000
fn0C00_0000_entry:
	def ds
l0C00_0000:
	call fn0C00_000C (retsize: 2;)
		uses: ds:ds
		defs: bx:bx_6,cx:cx_7
	cl_15 = SLICE(cx_7, byte, 0) (alias)
	Mem14[ds:0x300<16>:word16] = bx_6
	Mem16[ds:0x302<16>:byte] = cl_15
	return
fn0C00_0000_exit:
// fn0C00_000C /////////////////////
	LiveOut:   bx:[0..15] cx:[0..7]
	BitsUsed:  ds:[0..15]
	Trashed:   SCZO ax bx cx di es Top
	Preserved: sp
// fn0C00_000C
define fn0C00_000C
fn0C00_000C_entry:
	def ds
	def Mem0
l0C00_000C:
	di_7 = 0x7E0F<16>
	cx_8 = 0xC<16>
	v17_41 = true
l0C00_0019:
	v19_43 = PHI((v17_41, l0C00_000C), (v18_42, l0C00_0019_1))
	di_15 = PHI((di_7, l0C00_000C), (di_18, l0C00_0019_1))
	cx_12 = PHI((cx_8, l0C00_000C), (cx_19, l0C00_0019_1))
	ch_55 = SLICE(cx_12, byte, 8) (alias)
	branch cx_12 == 0<16> l0C00_001B
l0C00_0019_1:
	v18_42 = Mem0[ds:di_15:byte] == 0<8>
	di_18 = di_15 + 1<i16>
	cx_19 = cx_12 - 1<16>
	ch_56 = SLICE(cx_19, byte, 8) (alias)
	branch Mem0[ds:di_15:byte] != 0<8> l0C00_0019
l0C00_001B:
	ch_54 = PHI((ch_55, l0C00_0019), (ch_56, l0C00_0019_1))
	di_30 = PHI((di_15, l0C00_0019), (di_18, l0C00_0019_1))
	v20_44 = PHI((v19_43, l0C00_0019), (v18_42, l0C00_0019_1))
	branch v20_44 l0C00_002D
l0C00_001D:
	ah_32 = Mem0[ds:di_30 + 1<16>:byte]
	ax_34 = SEQ(ah_32, 0<8>) (alias)
	cx_35 = __bsr<word16>(ax_34)
	cx_36 = cx_35 - 8<16>
	bx_38 = di_30 - 0x7E03<16>
	return
l0C00_002D:
	bx_24 = 0<16>
	cx_57 = SEQ(ch_54, 0<8>) (alias)
	return
fn0C00_000C_exit:
	cx_53 = PHI((cx_36, l0C00_001D), (cx_57, l0C00_002D))
	bx_50 = PHI((bx_38, l0C00_001D), (bx_24, l0C00_002D))
	use bx_50
	use cx_53
