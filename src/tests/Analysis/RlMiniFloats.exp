// fn0C00_0000 /////////////////////
	LiveOut:  
	BitsUsed:  ds:[0..15]
	Trashed:   SCZO ax bx ch cl dx Top
	Preserved: sp
// fn0C00_0000
define fn0C00_0000
fn0C00_0000_entry:
	def ds
l0C00_0000:
	call fn0C00_001E (retsize: 2;)
		uses: ax:0x0001,bx:0x0001,ch:0x02,cl:0x00
		defs: ax:ax_8,cl:cl_9
	call fn0C00_0032 (retsize: 2;)
		uses: ax:ax_8,bx:0x0005,ch:0x03,cl:cl_9
		defs: ax:ax_17,cl:cl_18
	Mem25[ds:0x0120:word16] = ax_17
	Mem26[ds:0x0122:byte] = cl_18
	return
fn0C00_0000_exit:
// fn0C00_001E /////////////////////
	LiveOut:   ax:[0..15] cl:[0..7]
	BitsUsed:  ax:[0..15] bx:[0..15] ch:[0..7] cl:[0..7]
	Trashed:   SCZO ax bx cl Top
	Preserved: sp
// fn0C00_001E
define fn0C00_001E
fn0C00_001E_entry:
	def cl
	def ch
	def ax
	def bx
l0C00_001E:
	cl_6 = cl - ch
	branch cl_6 <u 0x00 l0C00_0027
l0C00_0022:
	bx_16 = bx >> cl_6
l0C00_0027:
	cl_9 = -cl_6
	ax_11 = ax >> cl_9
	cl_12 = -cl_9
l0C00_002D:
	cl_21 = PHI((cl_6, l0C00_0022), (cl_12, l0C00_0027))
	bx_19 = PHI((bx_16, l0C00_0022), (bx, l0C00_0027))
	ax_18 = PHI((ax, l0C00_0022), (ax_11, l0C00_0027))
	ax_20 = ax_18 + bx_19
	cl_23 = cl_21 + ch
	return
fn0C00_001E_exit:
	use ax_20
	use cl_23
// fn0C00_0032 /////////////////////
	LiveOut:   ax:[0..15] cl:[0..7]
	BitsUsed:  ax:[0..15] bx:[0..15] ch:[0..7] cl:[0..7]
	Trashed:   SCZO ax cl dx Top
	Preserved: sp
// fn0C00_0032
define fn0C00_0032
fn0C00_0032_entry:
	def bx
	def ax
	def cl
	def ch
l0C00_0032:
	dx_ax_6 = bx *s ax
	ax_11 = (word16) dx_ax_6 (alias)
	cl_9 = cl + ch
	return
fn0C00_0032_exit:
	use ax_11
	use cl_9
