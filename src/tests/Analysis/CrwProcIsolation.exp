void fn0C00_0000(Register word16 di, Register selector ds)
// MayUse:  di ds
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: di sp
// fn0C00_0000
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// di:di
// v4:v4
// ss:ss
// ax:ax
// ds:ds
// wLoc02:Local -0002
// return address size: 2
void fn0C00_0000(word16 di, selector ds)
fn0C00_0000_entry:
	// succ:  l0C00_0000
l0C00_0000:
	sp = fp
	fn0C00_000F(di, ds)
	v4 = di
	sp = fp - 0x0002
	wLoc02 = v4
	ax = 0x0100
	ax = fn0C00_0014(ax)
	Mem0[ds:0x0300:word16] = ax
	di = wLoc02
	sp = fp
	// succ:  l0C00_000E_thunk_fn0C00_000F
l0C00_000E_thunk_fn0C00_000F:
	fn0C00_000F(di, ds)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
void fn0C00_000F(Register word16 di, Register selector ds)
// MayUse:  di ds
// LiveOut:
// Trashed:
// Preserved: sp
// fn0C00_000F
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// di:di
// ds:ds
// return address size: 2
void fn0C00_000F(word16 di, selector ds)
fn0C00_000F_entry:
	// succ:  l0C00_000F
l0C00_000F:
	sp = fp
	Mem0[ds:di:word16] = 0x0000
	return
	// succ:  fn0C00_000F_exit
fn0C00_000F_exit:
Register word16 fn0C00_0014(Register word16 ax)
// MayUse:  ax
// LiveOut: ax
// Trashed: SCZO ah al ax di dil eax edi rax rdi
// Preserved: sp
// fn0C00_0014
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// di:di
// SZO:Flags
// C:Flags
// ax:ax
// return address size: 2
word16 fn0C00_0014(word16 ax)
fn0C00_0014_entry:
	// succ:  l0C00_0014
l0C00_0014:
	sp = fp
	di = 0x0000
	C = false
	ax = ax - 0x0001
	SZO = cond(ax)
	return ax
	// succ:  fn0C00_0014_exit
fn0C00_0014_exit:
