// fn0C00_0000 /////////////////////
	LiveOut:  
	MayUseIn:  ds
	BypassIn: 
	Trashed:   SCZO ah al ax ch cl cx dh dl dx eax ecx edx rax rcx rdx
	Preserved: sp
// fn0C00_0000
void fn0C00_0000()
// SymbolicIn: sp:fp
fn0C00_0000_entry:
// DataOut: ds
// DataOut (flags): 
// LocalsOut: fp(16)

// SymbolicIn: sp:fp
l0C00_0000:
	sp = fp
	cx = 0x0064
	v4 = 0x0064
	sp = fp - 0x0002
	wLoc02 = 0x0064
	call fn0C00_000F (retsize: 2; depth: 4)
	sp = fp
	SCZO = cond(fp)
	Mem0[ds:0x0064:word16] = ax
	return
// DataOut:
// DataOut (flags): 

// SymbolicIn: sp:fp cx:0x0064 ax:<invalid> dx:<invalid> -2(fp):0x0064
fn0C00_0000_exit:
// DataOut:
// DataOut (flags): 

// fn0C00_000F /////////////////////
	LiveOut:   ax ds
	MayUseIn: 
	BypassIn: 
	Trashed:   SCZO ah al ax dh dl dx eax edx rax rdx
	Preserved: bp sp
// fn0C00_000F
void fn0C00_000F()
// SymbolicIn: sp:fp
fn0C00_000F_entry:
// DataOut: ds
// DataOut (flags): 
// LocalsOut: fp(16) Stack +0002(16)

// SymbolicIn: sp:fp
l0C00_000F:
	sp = fp
	v4 = bp
	sp = fp - 0x0002
	wLoc02 = v4
	bp = fp - 0x0002
	ax = wArg02
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0C00_0026
// DataOut: ax ds
// DataOut (flags): 
// LocalsOut: fp(16) Stack +0002(16)

// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> -2(fp):bp
l0C00_0018:
	v9 = ax
	sp = fp - 0x0004
	wLoc04 = v9
	call fn0C00_000F (retsize: 2; depth: 6)
	sp = fp - 0x0003
	SZO = cond(fp - 0x0003)
	sp = fp - 0x0002
	SZO = cond(fp - 0x0002)
	dx = wArg02
	dx_ax = dx *s ax
	SCZO = cond(dx_ax)
// DataOut: ax ds
// DataOut (flags): 

// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> -2(fp):bp
l0C00_0026:
	ax = 0x0001
// DataOut: ax ds
// DataOut (flags): 

// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> dx:<invalid> Sequence dx:ax:<invalid> -4(fp):<invalid> -2(fp):bp
l0C00_0029:
	bp = wLoc02
	sp = fp
	return
// DataOut: ax ds
// DataOut (flags): 

// SymbolicIn: sp:fp bp:bp ax:<invalid> dx:<invalid> Sequence dx:ax:<invalid> -4(fp):<invalid> -2(fp):bp
fn0C00_000F_exit:
// DataOut: ax ds
// DataOut (flags): 

