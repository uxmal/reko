void fn0C00_0000(Register selector ds)
// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: sp
// fn0C00_0000
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// v3:v3
// ss:ss
// v5:v5
// v6:v6
// SCZO:Flags
// ds:ds
// ax:ax
// wLoc02:Local -0002
// wLoc04:Local -0004
// wLoc06:Local -0006
// return address size: 2
void fn0C00_0000(selector ds)
fn0C00_0000_entry:
	// succ:  l0C00_0000
l0C00_0000:
	sp = fp
	v3 = 0x0003
	sp = fp - 0x0002
	wLoc02 = 0x0003
	v5 = 0x0002
	sp = fp - 0x0004
	wLoc04 = 0x0002
	v6 = 0x0001
	sp = fp - 0x0006
	wLoc06 = 0x0001
	ax = fn0C00_0011(wLoc06, wLoc04, wLoc02)
	sp = fp
	SCZO = cond(fp)
	Mem0[ds:0x1300:word16] = ax
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
Register word16 fn0C00_0011(Stack word16 wArg02, Stack word16 wArg04, Stack word16 wArg06)
// MayUse: 
// LiveOut: ax
// Trashed: SCZO ah al ax eax rax
// Preserved: bp sp
// Stack args: Stack +0002(16) Stack +0004(16) Stack +0006(16)
// fn0C00_0011
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// bp:bp
// v4:v4
// ss:ss
// ax:ax
// SCZO:Flags
// wLoc02:Local -0002
// wArg02:Stack +0002
// wArg04:Stack +0004
// wArg06:Stack +0006
// return address size: 2
word16 fn0C00_0011(word16 wArg02, word16 wArg04, word16 wArg06)
fn0C00_0011_entry:
	// succ:  l0C00_0011
l0C00_0011:
	sp = fp
	v4 = bp
	sp = fp - 0x0002
	wLoc02 = v4
	bp = fp - 0x0002
	ax = wArg02
	ax = ax + wArg04
	ax = ax + wArg06
	SCZO = cond(ax)
	bp = wLoc02
	sp = fp
	return ax
	// succ:  fn0C00_0011_exit
fn0C00_0011_exit:
