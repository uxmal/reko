void fn0C00_0000(Register selector ds)
// MayUse:  ds:[0..15]
// DataTypes: 
//   ds: (ptr16 (segment (300 T_15 t0300)))
// LiveOut:
// Trashed: SCZO ax si Top
// Preserved: sp
// fn0C00_0000
// Return size: 0
// Mem0:Mem
// fp:fp
// sp:sp
// C:C
// ds:ds
// ax:ax
// v6:v6
// SCZO:SCZO
// Top:Top
// si:si
// S:S
// Z:Z
// O:O
// return address size: 2
void fn0C00_0000(selector ds)
fn0C00_0000_entry:
	def ds
	def Mem0
	// succ:  l0C00_0000
l0C00_0000:
	C_8 = fn0C00_000A(ds, out ax_6)
	branch C_8 l0C00_0009
	// succ:  l0C00_0005 l0C00_0009
l0C00_0005:
	v6_12 = Mem0[ds:0x300<16>:word16] + ax_6
	Mem13[ds:0x300<16>:word16] = v6_12
	// succ:  l0C00_0009
l0C00_0009:
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
FlagGroup bool fn0C00_000A(Register selector ds, Register out ptr16 axOut)
// MayUse:  ds:[0..15]
// DataTypes: 
//   ds: (ptr16 (segment (100 T_19 t0100) (102 T_24 t0102)))
// LiveOut: C ax
// Trashed: SCZO ax si Top
// Preserved: sp
// fn0C00_000A
// Return size: 0
// Mem0:Mem
// fp:fp
// sp:sp
// si:si
// ds:ds
// SCZO:SCZO
// Z:Z
// ax:ax
// SZO:SZO
// C:C
// Top:Top
// S:S
// O:O
// axOut:Out:ax
// return address size: 2
bool fn0C00_000A(selector ds, ptr16 & axOut)
fn0C00_000A_entry:
	def ds
	def Mem0
	def ax
	// succ:  l0C00_000A
l0C00_000A:
	si_6 = Mem0[ds:0x100<16>:word16]
	branch si_6 == Mem0[ds:0x102<16>:word16] l0C00_001E
	// succ:  l0C00_0014 l0C00_001E
l0C00_0014:
	ax_10 = Mem0[ds:si_6:word16]
	Mem15[ds:0x100<16>:word16] = si_6 + 2<16>
	C_16 = false
	axOut = ax_10
	return C_16
	// succ:  fn0C00_000A_exit
l0C00_001E:
	C_9 = true
	axOut = ax
	return C_9
	// succ:  fn0C00_000A_exit
fn0C00_000A_exit:
