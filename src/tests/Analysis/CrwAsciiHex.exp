void fn0C00_0000(Register byte al, Register selector ds)
// MayUse:  al:[0..7] ds:[0..15]
// LiveOut:
// Trashed: SCZO al Top
// Preserved: sp
// fn0C00_0000
// Return size: 0
// Mem0:Mem
// fp:fp
// sp:sp
// C:C
// ds:ds
// al:al
// Top:Top
// S:S
// Z:Z
// O:O
// return address size: 2
void fn0C00_0000(byte al, selector ds)
fn0C00_0000_entry:
	def al
	def ds
	// succ:  l0C00_0000
l0C00_0000:
	C_7 = fn0C00_000A(al, out al_5)
	branch C_7 l0C00_0009
	// succ:  l0C00_0005 l0C00_0009
l0C00_0005:
	Mem11[ds:0x0300:byte] = al_5
	// succ:  l0C00_0009
l0C00_0009:
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
FlagGroup bool fn0C00_000A(Register byte al, Register out ptr16 alOut)
// MayUse:  al:[0..7]
// LiveOut: C al
// Trashed: SCZO al Top
// Preserved: sp
// fn0C00_000A
// Return size: 0
// Mem0:Mem
// fp:fp
// sp:sp
// al:al
// SCZO:SCZO
// C:C
// CZ:CZ
// Top:Top
// S:S
// Z:Z
// O:O
// alOut:Out:al
// return address size: 2
bool fn0C00_000A(byte al, ptr16 & alOut)
fn0C00_000A_entry:
	def al
	// succ:  l0C00_000A
l0C00_000A:
	branch al <u 0x30 l0C00_0032
	// succ:  l0C00_000E l0C00_0032
l0C00_000E:
	branch al <=u 0x39 l0C00_0022
	// succ:  l0C00_0012 l0C00_0022
l0C00_0012:
	branch al <u 0x41 l0C00_0032
	// succ:  l0C00_0016 l0C00_0032
l0C00_0016:
	branch al <=u 0x46 l0C00_0022
	// succ:  l0C00_001A l0C00_0022
l0C00_001A:
	branch al <u 0x61 l0C00_0032
	// succ:  l0C00_001E l0C00_0032
l0C00_001E:
	branch al >u 0x66 l0C00_0032
	// succ:  l0C00_0022 l0C00_0032
l0C00_0022:
	al_19 = al - 0x30
	branch al <u 0x3A l0C00_0030
	// succ:  l0C00_0028 l0C00_0030
l0C00_0028:
	al_23 = al - 0x37
	branch al <u 0x47 l0C00_0030
	// succ:  l0C00_002E l0C00_0030
l0C00_002E:
	al_27 = al - 0x57
	// succ:  l0C00_0030
l0C00_0030:
	al_32 = PHI((al_19, l0C00_0022), (al_23, l0C00_0028), (al_27, l0C00_002E))
	C_29 = false
	alOut = al_32
	return C_29
	// succ:  fn0C00_000A_exit
l0C00_0032:
	C_17 = true
	alOut = al
	return C_17
	// succ:  fn0C00_000A_exit
fn0C00_000A_exit:
