void fn0C00_0000(Register selector ds, Stack segptr32 ptrArg04)
// MayUse:  ds:[0..15] Stack +0004:[0..31]
// DataTypes: 
//   ds: (ptr16 (segment (200 T_2 t0200)))
//   Stack +0004: segptr32
// LiveOut:
// Trashed: SCZO ax bx es Top
// Preserved: bp sp
// fn0C00_0000
// Return size: 0
// Mem0:Mem
// fp:fp
// sp:sp
// bp:bp
// ss:ss
// es_bx:Sequence es:bx
// es:es
// bx:bx
// SCZO:SCZO
// ax:ax
// ds:ds
// Top:Top
// S:S
// C:C
// Z:Z
// O:O
// wLoc02:Local -0002
// ptrArg04:Stack +0004
// wLoc04:Local -0004
// wLoc06:Local -0006
// ptrLoc06:Local -0006
// wLoc08:Local -0008
// ptrLoc08:Local -0008
// return address size: 2
void fn0C00_0000(selector ds, segptr32 ptrArg04)
fn0C00_0000_entry:
	def ds
	def ptrArg04
	// succ:  l0C00_0000
l0C00_0000:
	ax_16 = fn0C00_0020(ptrArg04)
	ax_30 = fn0C00_002E(ptrArg04, ax_16)
	Mem40[ds:0x200<16>:word16] = ax_30
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
Register word16 fn0C00_0020(Stack segptr32 ptrArg02)
// MayUse:  Stack +0002:[0..31]
// DataTypes: 
//   Stack +0002: (union (segptr32 u0) ((ptr16 (struct (4 T_4 t0004))) u1))
// LiveOut: ax
// Trashed: ax bx es Top
// Preserved: bp sp
// fn0C00_0020
// Return size: 0
// Mem0:Mem
// fp:fp
// sp:sp
// bp:bp
// ss:ss
// es_bx:Sequence es:bx
// ax:ax
// bx:bx
// es:es
// Top:Top
// wLoc02:Local -0002
// ptrArg02:Stack +0002
// return address size: 2
word16 fn0C00_0020(segptr32 ptrArg02)
fn0C00_0020_entry:
	def ptrArg02
	// succ:  l0C00_0020
l0C00_0020:
	ax_12 = Mem7[ptrArg02 + 4<i16>:word16]
	return ax_12
	// succ:  fn0C00_0020_exit
fn0C00_0020_exit:
Register word16 fn0C00_002E(Stack segptr32 ptrArg02, Stack word16 wArg06)
// MayUse:  Stack +0002:[0..31] Stack +0006:[0..15]
// DataTypes: 
//   Stack +0002: (union (segptr32 u0) ((ptr16 (struct (6 T_6 t0006))) u1))
//   Stack +0006: word16
// LiveOut: ax
// Trashed: SCZO ax bx es Top
// Preserved: bp sp
// fn0C00_002E
// Return size: 0
// Mem0:Mem
// fp:fp
// sp:sp
// bp:bp
// ss:ss
// es_bx:Sequence es:bx
// ax:ax
// bx:bx
// es:es
// SCZO:SCZO
// Top:Top
// wLoc02:Local -0002
// ptrArg02:Stack +0002
// wArg06:Stack +0006
// S:S
// C:C
// Z:Z
// O:O
// return address size: 2
word16 fn0C00_002E(segptr32 ptrArg02, word16 wArg06)
fn0C00_002E_entry:
	def ptrArg02
	def wArg06
	// succ:  l0C00_002E
l0C00_002E:
	ax_13 = wArg06 + Mem7[ptrArg02 + 6<i16>:word16]
	return ax_13
	// succ:  fn0C00_002E_exit
fn0C00_002E_exit:
