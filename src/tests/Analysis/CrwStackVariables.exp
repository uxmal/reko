void fn0C00_0000(Register selector ds, Stack segptr32 ptrArg04)
// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx eax ebx es rax rbx
// Preserved: bp sp
// Stack args: Stack +0004(32)
// fn0C00_0000
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// bp:bp
// v4:v4
// ss:ss
// es_bx:Sequence es:bx
// es:es
// v8:v8
// bx:bx
// v10:v10
// SCZO:Flags
// ax:ax
// v13:v13
// v14:v14
// v15:v15
// ds:ds
// wLoc02:Local -0002
// ptrArg04:Stack +0004
// wLoc04:Local -0004
// wLoc06:Local -0006
// wLoc08:Local -0008
// ptrLoc06:Local -0006
// ptrLoc08:Local -0008
// return address size: 2
void fn0C00_0000(selector ds, segptr32 ptrArg04)
fn0C00_0000_entry:
	// succ:  l0C00_0000
l0C00_0000:
	sp = fp
	v4 = bp
	sp = fp - 0x0002
	wLoc02 = v4
	bp = fp - 0x0002
	es_bx = ptrArg04
	v8 = es
	sp = fp - 0x0004
	wLoc04 = v8
	v10 = bx
	sp = fp - 0x0006
	wLoc06 = v10
	ax = fn0C00_0020(ptrLoc06)
	sp = fp - 0x0002
	SCZO = cond(fp - 0x0002)
	v13 = ax
	sp = fp - 0x0004
	wLoc04 = v13
	es_bx = ptrArg04
	v14 = es
	sp = fp - 0x0006
	wLoc06 = v14
	v15 = bx
	sp = fp - 0x0008
	wLoc08 = v15
	ax = fn0C00_002E(ptrLoc08, wLoc04)
	sp = fp - 0x0002
	SCZO = cond(fp - 0x0002)
	Mem0[ds:0x0200:word16] = ax
	bp = wLoc02
	sp = fp
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
Register word16 fn0C00_0020(Stack segptr32 ptrArg02)
// MayUse: 
// LiveOut: ax
// Trashed: ah al ax bh bl bx eax ebx es rax rbx
// Preserved: bp sp
// Stack args: Stack +0002(32)
// fn0C00_0020
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// bp:bp
// v4:v4
// ss:ss
// es_bx:Sequence es:bx
// ax:ax
// bx:bx
// es:es
// wLoc02:Local -0002
// ptrArg02:Stack +0002
// return address size: 2
word16 fn0C00_0020(segptr32 ptrArg02)
fn0C00_0020_entry:
	// succ:  l0C00_0020
l0C00_0020:
	sp = fp
	v4 = bp
	sp = fp - 0x0002
	wLoc02 = v4
	bp = fp - 0x0002
	es_bx = ptrArg02
	ax = Mem0[es:bx + 0x0004:word16]
	sp = fp - 0x0002
	bp = wLoc02
	sp = fp
	return ax
	// succ:  fn0C00_0020_exit
fn0C00_0020_exit:
Register word16 fn0C00_002E(Stack segptr32 ptrArg02, Stack word16 wArg06)
// MayUse: 
// LiveOut: ax
// Trashed: SCZO ah al ax bh bl bx eax ebx es rax rbx
// Preserved: bp sp
// Stack args: Stack +0002(32) Stack +0006(16)
// fn0C00_002E
// Return size: 0
// Mem0:Global memory
// fp:fp
// sp:sp
// bp:bp
// v4:v4
// ss:ss
// es_bx:Sequence es:bx
// ax:ax
// bx:bx
// es:es
// SCZO:Flags
// wLoc02:Local -0002
// ptrArg02:Stack +0002
// wArg06:Stack +0006
// return address size: 2
word16 fn0C00_002E(segptr32 ptrArg02, word16 wArg06)
fn0C00_002E_entry:
	// succ:  l0C00_002E
l0C00_002E:
	sp = fp
	v4 = bp
	sp = fp - 0x0002
	wLoc02 = v4
	bp = fp - 0x0002
	es_bx = ptrArg02
	ax = wArg06
	ax = ax + Mem0[es:bx + 0x0006:word16]
	SCZO = cond(ax)
	sp = fp - 0x0002
	bp = wLoc02
	sp = fp
	return ax
	// succ:  fn0C00_002E_exit
fn0C00_002E_exit:
