// fn0C00_0000 /////////////////////
	LiveOut:  
	MayUseIn:  ds es
	BypassIn: 
	Trashed:   SCZO ah al ax di dil eax edi esi rax rdi rsi si sil
	Preserved: sp
// fn0C00_0000
void fn0C00_0000()
// SymbolicIn: sp:fp
fn0C00_0000_entry:
// DataOut: ds es
// DataOut (flags): 

// SymbolicIn: sp:fp
l0C00_0000:
	sp = fp
	si = 0x1234
	call fn0C00_000B (retsize: 2; depth: 2)
	Mem0[ds:0x4321:word16] = ax
	return
// DataOut:
// DataOut (flags): 

// SymbolicIn: sp:fp si:0x1234 di:<invalid> ax:<invalid>
fn0C00_0000_exit:
// DataOut:
// DataOut (flags): 

// fn0C00_000B /////////////////////
	LiveOut:   ax ds
	MayUseIn:  ds es si
	BypassIn: 
	Trashed:   SCZO ah al ax di dil eax edi rax rdi
	Preserved: si sp
// fn0C00_000B
void fn0C00_000B()
// SymbolicIn: sp:fp
fn0C00_000B_entry:
// DataOut: ds es si
// DataOut (flags): 
// LocalsOut: fp(16)

// SymbolicIn: sp:fp
l0C00_000B:
	sp = fp
	v4 = si
	sp = fp - 0x0002
	wLoc02 = v4
	call fn0C00_0026 (retsize: 2; depth: 4)
	di = ax
	Mem0[ds:di:word16] = 0x0000
	Mem0[ds:di + 0x0002:word16] = 0x0000
	Mem0[ds:di + 0x0004:word16] = 0x0000
	call fn0C00_0035 (retsize: 2; depth: 4)
	ax = si
	si = wLoc02
	sp = fp
	return
// DataOut: ax ds
// DataOut (flags): 

// SymbolicIn: sp:fp di:<invalid> ax:si si:si -2(fp):si
fn0C00_000B_exit:
// DataOut: ax ds
// DataOut (flags): 

// fn0C00_0026 /////////////////////
	LiveOut:   ax ds es
	MayUseIn:  ds si
	BypassIn: 
	Trashed:   ah al ax eax rax
	Preserved: si sp
// fn0C00_0026
void fn0C00_0026()
// SymbolicIn: sp:fp
fn0C00_0026_entry:
// DataOut: ds es si
// DataOut (flags): 
// LocalsOut: fp(16)

// SymbolicIn: sp:fp
l0C00_0026:
	sp = fp
	v4 = si
	sp = fp - 0x0002
	wLoc02 = v4
	Mem0[ds:si:word16] = 0x0001
	Mem0[ds:si + 0x0002:word16] = 0x0000
	ax = si + 0x0004
	si = wLoc02
	sp = fp
	return
// DataOut: ax ds es
// DataOut (flags): 

// SymbolicIn: sp:fp ax:si + 0x0004 si:si -2(fp):si
fn0C00_0026_exit:
// DataOut: ax ds es
// DataOut (flags): 

// fn0C00_0035 /////////////////////
	LiveOut:   ds si
	MayUseIn:  di ds es si
	BypassIn: 
	Trashed:   SCZO ah al ax di dil eax edi rax rdi
	Preserved: sp
// fn0C00_0035
void fn0C00_0035()
// SymbolicIn: sp:fp
fn0C00_0035_entry:
// DataOut: di ds es si
// DataOut (flags): 
// LocalsOut: fp(16)

// SymbolicIn: sp:fp
l0C00_0035:
	sp = fp
	v4 = di
	sp = fp - 0x0002
	wLoc02 = v4
	v8 = Mem0[ds:si + 0x0002:word16] + 0x0001
	Mem0[ds:si + 0x0002:word16] = v8
	SZO = cond(v8)
	ax = Mem0[ds:si + 0x0002:word16]
	ax = ax << 0x0002
	SCZO = cond(ax)
	di = si + 0x0004
	di = di + ax
	SCZO = cond(di)
	ax = wLoc02
	sp = fp
	Mem0[es:di:word16] = ax
	di = di + 0x0002
	return
// DataOut: ds si
// DataOut (flags): 

// SymbolicIn: sp:fp ax:di di:<invalid> -2(fp):di
fn0C00_0035_exit:
// DataOut: ds si
// DataOut (flags): 

