// fn0C00_0000 /////////////////////
	LiveOut:  
	MayUseIn:  ds
	BypassIn: 
	Trashed:   SCZO ah al ax bh bl bx eax ebx es rax rbx
	Preserved: bp sp
// fn0C00_0000
void fn0C00_0000()
// SymbolicIn: sp:fp
fn0C00_0000_entry:
// DataOut: ds
// DataOut (flags): 
// LocalsOut: fp(16) Local -0008(16) Stack +0004(32)

// SymbolicIn: sp:fp
l0C00_0000:
	sp = fp
	v4 = bp
	sp = fp - 0x0002
	wLoc02 = v4
	bp = fp - 0x0002
	es_bx = ptrArg04
	v8 = es
	sp = fp - 0x0004
	wLoc04 = v8
	v10 = bx
	sp = fp - 0x0006
	wLoc06 = v10
	call fn0C00_0020 (retsize: 2; depth: 8)
	sp = fp - 0x0002
	SCZO = cond(fp - 0x0002)
	v13 = ax
	sp = fp - 0x0004
	wLoc04 = v13
	es_bx = ptrArg04
	v14 = es
	sp = fp - 0x0006
	wLoc06 = v14
	v15 = bx
	sp = fp - 0x0008
	wLoc08 = v15
	call fn0C00_002E (retsize: 2; depth: 10)
	sp = fp - 0x0002
	SCZO = cond(fp - 0x0002)
	Mem0[ds:0x0200:word16] = ax
	bp = wLoc02
	sp = fp
	return
// DataOut:
// DataOut (flags): 

// SymbolicIn: sp:fp bp:bp Sequence es:bx:<invalid> es:<invalid> bx:<invalid> ax:<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):<invalid> -2(fp):bp
fn0C00_0000_exit:
// DataOut:
// DataOut (flags): 

// fn0C00_0020 /////////////////////
	LiveOut:   ax ds
	MayUseIn: 
	BypassIn: 
	Trashed:   ah al ax bh bl bx eax ebx es rax rbx
	Preserved: bp sp
// fn0C00_0020
void fn0C00_0020()
// SymbolicIn: sp:fp
fn0C00_0020_entry:
// DataOut: ds
// DataOut (flags): 
// LocalsOut: fp(16) Stack +0002(32)

// SymbolicIn: sp:fp
l0C00_0020:
	sp = fp
	v4 = bp
	sp = fp - 0x0002
	wLoc02 = v4
	bp = fp - 0x0002
	es_bx = ptrArg02
	ax = Mem0[es:bx + 0x0004:word16]
	sp = fp - 0x0002
	bp = wLoc02
	sp = fp
	return
// DataOut: ax ds
// DataOut (flags): 

// SymbolicIn: sp:fp bp:bp Sequence es:bx:<invalid> ax:<invalid> -2(fp):bp
fn0C00_0020_exit:
// DataOut: ax ds
// DataOut (flags): 

// fn0C00_002E /////////////////////
	LiveOut:   ax ds
	MayUseIn: 
	BypassIn: 
	Trashed:   SCZO ah al ax bh bl bx eax ebx es rax rbx
	Preserved: bp sp
// fn0C00_002E
void fn0C00_002E()
// SymbolicIn: sp:fp
fn0C00_002E_entry:
// DataOut: ds
// DataOut (flags): 
// LocalsOut: fp(16) Stack +0002(32) Stack +0006(16)

// SymbolicIn: sp:fp
l0C00_002E:
	sp = fp
	v4 = bp
	sp = fp - 0x0002
	wLoc02 = v4
	bp = fp - 0x0002
	es_bx = ptrArg02
	ax = wArg06
	ax = ax + Mem0[es:bx + 0x0006:word16]
	SCZO = cond(ax)
	sp = fp - 0x0002
	bp = wLoc02
	sp = fp
	return
// DataOut: ax ds
// DataOut (flags): 

// SymbolicIn: sp:fp bp:bp Sequence es:bx:<invalid> ax:<invalid> -2(fp):bp
fn0C00_002E_exit:
// DataOut: ax ds
// DataOut (flags): 

