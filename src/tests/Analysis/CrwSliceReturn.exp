void fn0C00_0000(Register selector ds)
// MayUse:  ds:[0..15]
// DataTypes: 
//   ds: (ptr16 (segment (202 T_5 t0202) (302 T_10 t0302)))
// LiveOut:
// Trashed: ax si Top
// Preserved: sp
// fn0C00_0000
// Return size: 0
// Mem0:Mem
// fp:fp
// sp:sp
// si:si
// ds:ds
// ax:ax
// al:al
// Top:Top
// ds_si:Sequence ds:si
// return address size: 2
void fn0C00_0000(selector ds)
fn0C00_0000_entry:
	def ds
	// succ:  l0C00_0000
l0C00_0000:
	ds_si_6 = SEQ(ds, 0x200<16>) (alias)
	ax_7 = fn0C00_0015(ds_si_6)
	Mem8[ds:0x202<16>:word16] = ax_7
	ds_si_10 = SEQ(ds, 0x300<16>) (alias)
	ax_11 = fn0C00_0015(ds_si_10)
	al_12 = SLICE(ax_11, byte, 0) (alias)
	Mem13[ds:0x302<16>:byte] = al_12
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:
Register word16 fn0C00_0015(Sequence segptr32 ds_si)
// MayUse:  Sequence ds:si:[0..31]
// DataTypes: 
//   Sequence ds:si: (ptr32 (struct (0 T_1 t0000)))
// LiveOut: ax
// Trashed: ax Top
// Preserved: sp
// fn0C00_0015
// Return size: 0
// Mem0:Mem
// fp:fp
// sp:sp
// ax:ax
// si:si
// ds:ds
// Top:Top
// ds_si:Sequence ds:si
// return address size: 2
word16 fn0C00_0015(segptr32 ds_si)
fn0C00_0015_entry:
	def ds_si
	def Mem0
	// succ:  l0C00_0015
l0C00_0015:
	ax_7 = Mem0[ds_si:word16]
	return ax_7
	// succ:  fn0C00_0015_exit
fn0C00_0015_exit:
