// SegmentedArray
// Return size: 0
define SegmentedArray
SegmentedArray_entry:
	// succ:  l1
l1:
	Mem0[ds:0x1234<16>:word16] = ds:0x5388<16>[bx * 2<16>]
SegmentedArray_exit:

// Equivalence classes ////////////
Eq_1: (struct "Globals")
	globals_t (in globals : (ptr32 (struct "Globals")))
Eq_2: (segment (1234 word16 w1234))
	T_2 (in ds : selector)
Eq_4: (union (segptr32 u0) ((ptr32 (arr word16)) u1))
	T_4 (in ds:0x5388<16> : ptr32)
// Type Variables ////////////
globals_t: (in globals : (ptr32 (struct "Globals")))
  Class: Eq_1
  DataType: (ptr32 Eq_1)
  OrigDataType: (ptr32 (struct "Globals"))
T_2: (in ds : selector)
  Class: Eq_2
  DataType: (ptr16 Eq_2)
  OrigDataType: (ptr16 (segment (1234 T_11 t1234)))
T_3: (in 0x5388<16> : word16)
  Class: Eq_3
  DataType: word16
  OrigDataType: word16
T_4: (in ds:0x5388<16> : ptr32)
  Class: Eq_4
  DataType: Eq_4
  OrigDataType: (union (segptr32 u0) ((ptr32 (arr Eq_12)) u1) ((ptr32 (arr Eq_12)) u2))
T_5: (in bx : word16)
  Class: Eq_5
  DataType: ui16
  OrigDataType: ui16
T_6: (in 2<16> : word16)
  Class: Eq_6
  DataType: ui16
  OrigDataType: ui16
T_7: (in bx * 2<16> : word16)
  Class: Eq_7
  DataType: ui16
  OrigDataType: ui16
T_8: (in ds:0x5388<16>[bx * 2<16>] : word16)
  Class: Eq_8
  DataType: word16
  OrigDataType: word16
T_9: (in 0x1234<16> : word16)
  Class: Eq_9
  DataType: (memptr (ptr16 Eq_2) word16)
  OrigDataType: (memptr T_2 (struct (0 T_11 t0000)))
T_10: (in ds:0x1234<16> : segptr32)
  Class: Eq_10
  DataType: segptr32
  OrigDataType: segptr32
T_11: (in Mem0[ds:0x1234<16>:word16] : word16)
  Class: Eq_8
  DataType: word16
  OrigDataType: word16
T_12:
  Class: Eq_12
  DataType: word16
  OrigDataType: (struct 0002 (0 T_8 t0000))
T_13:
  Class: Eq_13
  DataType: (arr word16)
  OrigDataType: (arr T_12)
