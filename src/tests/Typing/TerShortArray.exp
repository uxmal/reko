// Before ///////
// proc1
// Return size: 0
void proc1(word32 dwArg04, word32 dwArg08)
proc1_entry:
	// succ:  l1
l1:
	Mem8[0x1234<32>:word32] = CONVERT(Mem0[dwArg04 + dwArg08 * 2<32>:int16], int16, int32)
proc1_exit:

// After ///////
// proc1
// Return size: 0
void proc1(int16 dwArg04[], ui32 dwArg08)
proc1_entry:
	// succ:  l1
l1:
	g_dw1234 = (int32) dwArg04[dwArg08]
proc1_exit:

// Equivalence classes ////////////
Eq_1: (struct "Globals" (1234 int32 dw1234))
	globals_t (in globals : (ptr32 (struct "Globals")))
// Type Variables ////////////
globals_t: (in globals : (ptr32 (struct "Globals")))
  Class: Eq_1
  DataType: (ptr32 Eq_1)
  OrigDataType: (ptr32 (struct "Globals"))
T_2: (in dwArg04 : (arr int16))
  Class: Eq_2
  DataType: (ptr32 (arr int16))
  OrigDataType: (ptr32 (struct (0 T_11 t0000)))
T_3: (in dwArg08 : ui32)
  Class: Eq_3
  DataType: ui32
  OrigDataType: ui32
T_4: (in 2<32> : word32)
  Class: Eq_4
  DataType: ui32
  OrigDataType: ui32
T_5: (in dwArg08 * 2<32> : word32)
  Class: Eq_5
  DataType: ui32
  OrigDataType: ui32
T_6: (in dwArg04[dwArg08 * 2<32>] : int16)
  Class: Eq_6
  DataType: int16
  OrigDataType: int16
T_7: (in CONVERT(dwArg04[dwArg08 * 2<32>], int16, int32) : int32)
  Class: Eq_7
  DataType: int32
  OrigDataType: int32
T_8: (in 0x1234<32> : word32)
  Class: Eq_8
  DataType: (ptr32 int32)
  OrigDataType: (ptr32 (struct (0 T_9 t0000)))
T_9: (in Mem8[0x1234<32>:word32] : word32)
  Class: Eq_7
  DataType: int32
  OrigDataType: word32
T_10:
  Class: Eq_10
  DataType: int16
  OrigDataType: (struct 0002 (0 T_6 t0000))
T_11:
  Class: Eq_11
  DataType: (arr int16)
  OrigDataType: (arr T_10)
