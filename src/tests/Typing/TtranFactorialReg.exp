// fn0C00_0000
// Return size: 0
void fn0C00_0000(selector ds)
fn0C00_0000_entry:
	// succ:  l0C00_0000
l0C00_0000:
	Mem12[ds:0x64<16>:word16] = fn0C00_000B(5<16>)
	return
	// succ:  fn0C00_0000_exit
fn0C00_0000_exit:

// fn0C00_000B
// Return size: 0
word16 fn0C00_000B(word16 cx)
fn0C00_000B_entry:
	// succ:  l0C00_000B
l0C00_000B:
	word16 ax_11
	branch cx <= 1<16> l0C00_001C
	// succ:  l0C00_0011 l0C00_001C
l0C00_0011:
	ax_11 = SLICE(cx *s32 fn0C00_000B(cx - 1<16>), word16, 0) (alias)
	goto l0C00_001F
	// succ:  l0C00_001F
l0C00_001C:
	ax_11 = 1<16>
	// succ:  l0C00_001F
l0C00_001F:
	return ax_11
	// succ:  fn0C00_000B_exit
fn0C00_000B_exit:

// Equivalence classes ////////////
Eq_1: (struct "Globals")
	globals_t (in globals : (ptr32 (struct "Globals")))
Eq_2: (segment "seg0C00_t" 0021)
	T_2 (in seg0C00 : selector)
Eq_3: (segment (64 int16 w0064))
	T_3 (in ds : selector)
Eq_4: (fn int16 (int16))
	T_4 (in fn0C00_000B : segptr32)
	T_5 (in signature of fn0C00_000B : void)
	T_16 (in fn0C00_000B : segptr32)
// Type Variables ////////////
globals_t: (in globals : (ptr32 (struct "Globals")))
  Class: Eq_1
  DataType: (ptr32 Eq_1)
  OrigDataType: (ptr32 (struct "Globals"))
T_2: (in seg0C00 : selector)
  Class: Eq_2
  DataType: (ptr16 Eq_2)
  OrigDataType: (ptr16 (segment "seg0C00_t" 0021))
T_3: (in ds : selector)
  Class: Eq_3
  DataType: (ptr16 Eq_3)
  OrigDataType: (ptr16 (segment (64 T_10 t0064)))
T_4: (in fn0C00_000B : segptr32)
  Class: Eq_4
  DataType: (ptr32 Eq_4)
  OrigDataType: (ptr32 (fn T_8 (T_7)))
T_5: (in signature of fn0C00_000B : void)
  Class: Eq_4
  DataType: (ptr32 Eq_4)
  OrigDataType: 
T_6: (in cx : word16)
  Class: Eq_6
  DataType: int16
  OrigDataType: int16
T_7: (in 5<16> : word16)
  Class: Eq_6
  DataType: int16
  OrigDataType: word16
T_8: (in fn0C00_000B(5<16>) : word16)
  Class: Eq_8
  DataType: int16
  OrigDataType: word16
T_9: (in 0x64<16> : word16)
  Class: Eq_9
  DataType: (memptr (ptr16 Eq_3) int16)
  OrigDataType: (memptr T_3 (struct (0 T_10 t0000)))
T_10: (in Mem12[ds:0x64<16>:word16] : word16)
  Class: Eq_8
  DataType: int16
  OrigDataType: word16
T_11: (in ax : word16)
  Class: Eq_11
  DataType: word16
  OrigDataType: word16
T_12: (in ax_11 : word16)
  Class: Eq_11
  DataType: word16
  OrigDataType: word16
T_13: (in 1<16> : word16)
  Class: Eq_6
  DataType: int16
  OrigDataType: ci16
T_14: (in cx <= 1<16> : bool)
  Class: Eq_14
  DataType: bool
  OrigDataType: bool
T_15: (in 1<16> : word16)
  Class: Eq_11
  DataType: word16
  OrigDataType: word16
T_16: (in fn0C00_000B : segptr32)
  Class: Eq_4
  DataType: (ptr32 Eq_4)
  OrigDataType: (ptr32 (fn T_19 (T_18)))
T_17: (in 1<16> : word16)
  Class: Eq_17
  DataType: int16
  OrigDataType: int16
T_18: (in cx - 1<16> : word16)
  Class: Eq_6
  DataType: int16
  OrigDataType: ci16
T_19: (in fn0C00_000B(cx - 1<16>) : word16)
  Class: Eq_8
  DataType: int16
  OrigDataType: int16
T_20: (in cx *s32 fn0C00_000B(cx - 1<16>) : int32)
  Class: Eq_20
  DataType: int32
  OrigDataType: int32
T_21: (in SLICE(cx *s32 fn0C00_000B(cx - 1<16>), word16, 0) : word16)
  Class: Eq_11
  DataType: word16
  OrigDataType: word16
